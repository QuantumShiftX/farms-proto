syntax = "proto3";

package farm.v1;
option go_package = "./pb/v1";



message FarmReq{

}
message FarmReply{

}

service FarmService {
  rpc Test (FarmReq) returns (FarmReply) {}
}

message StoreProductInfoMsgReq {
  int64 id = 1;
}

message StoreProductInfoMsgReply {
  int64 id = 1;                    // 自增主键
  ProductType product_type = 2;    // 商品类型
  string product_name = 3;         // 商品名称
  string product_image_url = 4;    // 商品图片地址
  int64 product_id = 5;            // 商品ID
  int64 stock = 6;                 // 库存数量，-1表示无限
  int64 sort = 7;                  // 排序字段
  BooleanStatus is_free = 8;       // 是否可以免费领取
  BooleanStatus is_enabled = 9;    // 是否启用
}


message CropsProductInfoMsgReq {
  repeated int64 id = 1;
}

message CropsProductInfoMsgReply {
  repeated CropsProductInfo rows = 1;
}


message CropsProductInfo {
  int64 id = 1;                              // 作物ID
  string name = 2;                            // 作物名称
  int64 price = 3;                           // 作物价格（单位：代币）
  int64 maturity_income = 4;                 // 成熟收益（代币）
  int64 maturity_period = 5;                 // 成熟周期（单位：分）
  int64 watering_frequency = 6;              // 浇水频率（次/天）
  int64 fertilizing_frequency = 7;           // 施肥频率（次/天）
  int64 self_watering_decrease_time = 8;     // 自己每次浇水减少时间（单位：分）
  int64 self_watering_decrease_percentage = 9; // 自己每次浇水减少百分比（0-100）
  int64 self_fertilizing_decrease_time = 10; // 自己每次施肥减少时间（单位：分）
  int64 self_fertilizing_decrease_percentage = 11; // 自己每次施肥减少百分比（0-100）
  int64 friend_watering_decrease_time = 12;  // 好友每次浇水减少时间（单位：分）
  int64 friend_watering_decrease_percentage = 13; // 好友每次浇水减少百分比（0-100）
  int64 friend_fertilizing_decrease_time = 14; // 好友每次施肥减少时间（单位：分）
  int64 friend_fertilizing_decrease_percentage = 15; // 好友每次施肥减少百分比（0-100）
  BooleanStatus is_available = 16;                  // 是否上架（1 = 上架, 2 = 下架）
  int64 sort = 17;                          // 排序（用于显示顺序）
  BooleanStatus is_enabled = 18;                    // 是否启用（1 = 启用, 2 = 禁用）
}




service FarmInnerService {
  // 农场商店信息
  rpc FarmsStoreInfo (FarmsStoreInfoMsgReq) returns (FarmsStoreInfoMsgReply) {}
  // 单个商品信息
  rpc StoreProductInfo (StoreProductInfoMsgReq) returns (StoreProductInfoMsgReply) {}
  // 更新商品库存
  rpc UpdateProductStock (StoreProductInfoMsgReq) returns (FarmReply) {}
  // 获取种子信息
  rpc CropsProductInfo (CropsProductInfoMsgReq) returns (CropsProductInfoMsgReply) {}
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// -------------------------------------------------------------------------------------消息定义----------------------------------------------------------------------------------------- //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

/**
 * MessageID 枚举
 * 定义系统中所有消息类型的唯一标识符
 */
enum MessageID {
  // 未知消息
  MESSAGE_ID_UNSPECIFIED = 0;

  // 商店相关消息 (200-299)
  FARMS_STORE_INFO_MSG = 200;
  STORE_INFO = 201;


}

// 基础消息定义
// ------------------------------------

/**
 * MQTT请求消息基础结构
 * 所有请求消息的基础结构，可根据需要扩展
 */
message MsgReq {
  // 暂无字段，可根据需要扩展
}

/**
 * MQTT响应消息基础结构
 * 所有响应消息的基础结构，可根据需要扩展
 */
message MsgReply {
  // 暂无字段，可根据需要扩展
}


/**
 * 是否状态枚举
 * 通用的是否状态枚举（用于多个字段）
 */
enum BooleanStatus {
  BOOLEAN_UNSPECIFIED = 0;  // 未指定
  NO = 1;                   // 否
  YES = 2;                  // 是
}

/**
 * 商品类型枚举
 * 定义商店中商品的类型
 */
enum ProductType {
  PRODUCT_TYPE_UNSPECIFIED = 0;  // 未指定类型
  SEED = 1;                      // 种子
  FERTILIZER = 2;                // 肥料
  OTHER = 3;                     // 其他道具
}



// 商店相关消息
// ------------------------------------

/**
 * 获取用户商店信息请求
 * 用于查询当前用户的商店相关信息
 */
message FarmsStoreInfoMsgReq {
  int64 user_id = 1;  // 用户身份验证令牌，必填
  int64 page = 2;
  int64 page_size = 3;
}

/**
 * 商店信息响应
 * 包含商店内可购买的商品列表
 */
message FarmsStoreInfoMsgReply {
  int64 page = 1;
  int64 page_size = 2;
  int64 total = 3;
  int64 total_page = 4;
  repeated StoreInfo rows = 5;  // 商品信息列表
  string extend = 6;
}

/**
 * 商店商品信息
 * 表示商店中的单个商品信息
 */
message StoreInfo {
  int64 id = 1;                    // 自增主键
  ProductType product_type = 2;    // 商品类型
  string product_name = 3;         // 商品名称
  string product_image_url = 4;    // 商品图片地址
  int64 product_id = 5;            // 商品ID
  int64 stock = 6;                 // 库存数量，-1表示无限
  int64 sort = 7;                  // 排序字段
  BooleanStatus is_free = 8;       // 是否可以免费领取
  BooleanStatus is_enabled = 9;    // 是否启用
}


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// -------------------------------------------------------------------------------------消息定义----------------------------------------------------------------------------------------- //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
