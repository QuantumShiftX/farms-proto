// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: mqtt/v1/mqtt.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MessageID 枚举
// 定义系统中所有消息类型的唯一标识符
type MessageID int32

const (
	// 未知消息
	MessageID_MESSAGE_ID_UNSPECIFIED MessageID = 0
	// 基础消息 (1-99)
	MessageID_DEMO                          MessageID = 1
	MessageID_USER_AUTH_INFO_MSG            MessageID = 2
	MessageID_USER_PERSONAL_INFO_MSG        MessageID = 3
	MessageID_USER_EDIT_PERSONAL_INFO_MSG   MessageID = 4
	MessageID_USER_FRIEND_RANKING_INFO_MSG  MessageID = 5
	MessageID_ALL_USER_RANKING_INFO_MSG     MessageID = 6
	MessageID_USER_FORTUNE_TREE_INFO_MSG    MessageID = 7
	MessageID_USER_EDIT_SENSITIVE_INFO_MSG  MessageID = 8
	MessageID_VERIFY_SECONDARY_PASSWORD_MSG MessageID = 9
	MessageID_SUBMIT_FOR_REDEMPTION_MSG     MessageID = 10
	MessageID_USER_ANNOUNCEMENTS_INFO_MSG   MessageID = 11
	MessageID_FARM_AGREEMENT_INFO_MSG       MessageID = 12
	MessageID_USER_TRANSACTION_RECORDS_MSG  MessageID = 13
	MessageID_FARM_TRANSACTION_RECORDS_MSG  MessageID = 14
	// 钱包相关消息 (100-199)
	MessageID_USER_WALLET  MessageID = 100
	MessageID_USER_BALANCE MessageID = 101
	// 商店相关消息 (200-299)
	MessageID_FARMS_STORE_INFO_MSG MessageID = 200
	MessageID_STORE_INFO           MessageID = 201
	MessageID_CROPS_INFO_LIST_MSG  MessageID = 202
	// 仓库相关消息 (300-399)
	MessageID_USER_STORAGE_INFO_MSG   MessageID = 300
	MessageID_USER_STORAGE_DETAIL     MessageID = 301
	MessageID_USER_PURCHASE_GOODS_MSG MessageID = 302
	// 农场相关消息 (400-499)
	MessageID_USER_FARM_INFO_MSG        MessageID = 400
	MessageID_USER_LAND_INFO_MSG        MessageID = 401
	MessageID_USER_PLANTING_DETAIL      MessageID = 402
	MessageID_USER_FARM_OPS_MSG         MessageID = 403
	MessageID_LOOK_USER_FARMS_INFO_MSG  MessageID = 404
	MessageID_USER_OPS_FORTUNE_TREE_MSG MessageID = 405
	MessageID_GENERATE_FARMS_NAME_MSG   MessageID = 406
	// 配置相关信息 (600-699)
	MessageID_VIP_LEVEL_INFO_MSG             MessageID = 600
	MessageID_RECHARGE_CHANNELS_INFO_MSG     MessageID = 601
	MessageID_USER_RECHARGE_INFO_MSG         MessageID = 602 // 用户提交充值
	MessageID_USER_WITHDRAW_INFO_MSG         MessageID = 603 // 用户提交提现
	MessageID_USER_WITHDRAW_ACCOUNT_INFO_MSG MessageID = 604 // 用户提现账号
	MessageID_GET_MERCHANT_LIST_MSG          MessageID = 605
	MessageID_MERCHANT_EXCHANGE_RATE_MSG     MessageID = 606
	MessageID_USER_SET_WITHDRAW_CHANNEL_MSG  MessageID = 607
	MessageID_CURRENCY_INFO_MSG              MessageID = 608 // 货币列表
	MessageID_GET_BANK_LIST_INFO_MSG         MessageID = 609 // 银行列表
	MessageID_GET_PAYMENT_CONF_LIST_MSG      MessageID = 610 // 支付配置列表
	MessageID_USER_RECHARGE_CONFIRM_MSG      MessageID = 611 // 用户充值确认
	MessageID_GET_PENDING_ORDER_MSG          MessageID = 612 // 获取待处理订单
	// 代理相关信息messageID (700-799)
	MessageID_GET_AGENT_INCOME_OVERVIEW_MSG MessageID = 700 // 获取代理收入概览响应
	MessageID_GET_AGENT_DOWNLINE_STATS_MSG  MessageID = 701 // 获取代理下线统计响应
	MessageID_GET_AGENT_DOWNLINE_LIST_MSG   MessageID = 702 // 获取代理下线列表响应
	MessageID_GET_AGENT_INCOME_DETAILS_MSG  MessageID = 703 // 获取代理收入明细响应
	MessageID_AGENT_RULE_INFO_MSG           MessageID = 704 // 代理规则
	// 主动推送消息messageID (800-899)
	MessageID_USER_NOTIFICATION_INFO_MSG MessageID = 800 // 公告
	MessageID_USER_BALANCE_INFO_MSG      MessageID = 801 // 用户余额相关
	MessageID_USER_LAND_STATUS_INFO_MSG  MessageID = 802 //用户土地变更相关
	// USER_LAND_CROP_CAN_OPS_INFO_MSG = 803; // 用户土地可收获状态
	MessageID_USER_FORTE_TREE_STATUS_MSG    MessageID = 804 // 用户发财树状态变更数据推送
	MessageID_USER_VIP_INFO_MSG             MessageID = 805 // 用户VIP信息推送
	MessageID_USER_SUB_REGISTER_NOTIFY_MSG  MessageID = 806 // 通知上级有下级注册成功
	MessageID_USER_FOREIGN_LOGIN_NOTIFY_MSG MessageID = 807 // 通知用户异地登录通知（同一时间只能登录一个地方）
	// 心跳连接
	MessageID_USER_HEART_BEAT_MSG MessageID = 8888
	MessageID_USER_EVENT_INFO_MSG MessageID = 9999 // 事件推送
	// 错误消息 (500500+)
	MessageID_ERR_COMMON         MessageID = 500500 // 通用错误
	MessageID_ERR_PACKET         MessageID = 500501 // 数据包错误
	MessageID_ERR_PARAM          MessageID = 500502 // 参数错误
	MessageID_ERR_USER_NOT_EXIST MessageID = 500503 // 用户不存在
	MessageID_ERR_USER_AUTH      MessageID = 500504 // 认证失败
)

// Enum value maps for MessageID.
var (
	MessageID_name = map[int32]string{
		0:      "MESSAGE_ID_UNSPECIFIED",
		1:      "DEMO",
		2:      "USER_AUTH_INFO_MSG",
		3:      "USER_PERSONAL_INFO_MSG",
		4:      "USER_EDIT_PERSONAL_INFO_MSG",
		5:      "USER_FRIEND_RANKING_INFO_MSG",
		6:      "ALL_USER_RANKING_INFO_MSG",
		7:      "USER_FORTUNE_TREE_INFO_MSG",
		8:      "USER_EDIT_SENSITIVE_INFO_MSG",
		9:      "VERIFY_SECONDARY_PASSWORD_MSG",
		10:     "SUBMIT_FOR_REDEMPTION_MSG",
		11:     "USER_ANNOUNCEMENTS_INFO_MSG",
		12:     "FARM_AGREEMENT_INFO_MSG",
		13:     "USER_TRANSACTION_RECORDS_MSG",
		14:     "FARM_TRANSACTION_RECORDS_MSG",
		100:    "USER_WALLET",
		101:    "USER_BALANCE",
		200:    "FARMS_STORE_INFO_MSG",
		201:    "STORE_INFO",
		202:    "CROPS_INFO_LIST_MSG",
		300:    "USER_STORAGE_INFO_MSG",
		301:    "USER_STORAGE_DETAIL",
		302:    "USER_PURCHASE_GOODS_MSG",
		400:    "USER_FARM_INFO_MSG",
		401:    "USER_LAND_INFO_MSG",
		402:    "USER_PLANTING_DETAIL",
		403:    "USER_FARM_OPS_MSG",
		404:    "LOOK_USER_FARMS_INFO_MSG",
		405:    "USER_OPS_FORTUNE_TREE_MSG",
		406:    "GENERATE_FARMS_NAME_MSG",
		600:    "VIP_LEVEL_INFO_MSG",
		601:    "RECHARGE_CHANNELS_INFO_MSG",
		602:    "USER_RECHARGE_INFO_MSG",
		603:    "USER_WITHDRAW_INFO_MSG",
		604:    "USER_WITHDRAW_ACCOUNT_INFO_MSG",
		605:    "GET_MERCHANT_LIST_MSG",
		606:    "MERCHANT_EXCHANGE_RATE_MSG",
		607:    "USER_SET_WITHDRAW_CHANNEL_MSG",
		608:    "CURRENCY_INFO_MSG",
		609:    "GET_BANK_LIST_INFO_MSG",
		610:    "GET_PAYMENT_CONF_LIST_MSG",
		611:    "USER_RECHARGE_CONFIRM_MSG",
		612:    "GET_PENDING_ORDER_MSG",
		700:    "GET_AGENT_INCOME_OVERVIEW_MSG",
		701:    "GET_AGENT_DOWNLINE_STATS_MSG",
		702:    "GET_AGENT_DOWNLINE_LIST_MSG",
		703:    "GET_AGENT_INCOME_DETAILS_MSG",
		704:    "AGENT_RULE_INFO_MSG",
		800:    "USER_NOTIFICATION_INFO_MSG",
		801:    "USER_BALANCE_INFO_MSG",
		802:    "USER_LAND_STATUS_INFO_MSG",
		804:    "USER_FORTE_TREE_STATUS_MSG",
		805:    "USER_VIP_INFO_MSG",
		806:    "USER_SUB_REGISTER_NOTIFY_MSG",
		807:    "USER_FOREIGN_LOGIN_NOTIFY_MSG",
		8888:   "USER_HEART_BEAT_MSG",
		9999:   "USER_EVENT_INFO_MSG",
		500500: "ERR_COMMON",
		500501: "ERR_PACKET",
		500502: "ERR_PARAM",
		500503: "ERR_USER_NOT_EXIST",
		500504: "ERR_USER_AUTH",
	}
	MessageID_value = map[string]int32{
		"MESSAGE_ID_UNSPECIFIED":         0,
		"DEMO":                           1,
		"USER_AUTH_INFO_MSG":             2,
		"USER_PERSONAL_INFO_MSG":         3,
		"USER_EDIT_PERSONAL_INFO_MSG":    4,
		"USER_FRIEND_RANKING_INFO_MSG":   5,
		"ALL_USER_RANKING_INFO_MSG":      6,
		"USER_FORTUNE_TREE_INFO_MSG":     7,
		"USER_EDIT_SENSITIVE_INFO_MSG":   8,
		"VERIFY_SECONDARY_PASSWORD_MSG":  9,
		"SUBMIT_FOR_REDEMPTION_MSG":      10,
		"USER_ANNOUNCEMENTS_INFO_MSG":    11,
		"FARM_AGREEMENT_INFO_MSG":        12,
		"USER_TRANSACTION_RECORDS_MSG":   13,
		"FARM_TRANSACTION_RECORDS_MSG":   14,
		"USER_WALLET":                    100,
		"USER_BALANCE":                   101,
		"FARMS_STORE_INFO_MSG":           200,
		"STORE_INFO":                     201,
		"CROPS_INFO_LIST_MSG":            202,
		"USER_STORAGE_INFO_MSG":          300,
		"USER_STORAGE_DETAIL":            301,
		"USER_PURCHASE_GOODS_MSG":        302,
		"USER_FARM_INFO_MSG":             400,
		"USER_LAND_INFO_MSG":             401,
		"USER_PLANTING_DETAIL":           402,
		"USER_FARM_OPS_MSG":              403,
		"LOOK_USER_FARMS_INFO_MSG":       404,
		"USER_OPS_FORTUNE_TREE_MSG":      405,
		"GENERATE_FARMS_NAME_MSG":        406,
		"VIP_LEVEL_INFO_MSG":             600,
		"RECHARGE_CHANNELS_INFO_MSG":     601,
		"USER_RECHARGE_INFO_MSG":         602,
		"USER_WITHDRAW_INFO_MSG":         603,
		"USER_WITHDRAW_ACCOUNT_INFO_MSG": 604,
		"GET_MERCHANT_LIST_MSG":          605,
		"MERCHANT_EXCHANGE_RATE_MSG":     606,
		"USER_SET_WITHDRAW_CHANNEL_MSG":  607,
		"CURRENCY_INFO_MSG":              608,
		"GET_BANK_LIST_INFO_MSG":         609,
		"GET_PAYMENT_CONF_LIST_MSG":      610,
		"USER_RECHARGE_CONFIRM_MSG":      611,
		"GET_PENDING_ORDER_MSG":          612,
		"GET_AGENT_INCOME_OVERVIEW_MSG":  700,
		"GET_AGENT_DOWNLINE_STATS_MSG":   701,
		"GET_AGENT_DOWNLINE_LIST_MSG":    702,
		"GET_AGENT_INCOME_DETAILS_MSG":   703,
		"AGENT_RULE_INFO_MSG":            704,
		"USER_NOTIFICATION_INFO_MSG":     800,
		"USER_BALANCE_INFO_MSG":          801,
		"USER_LAND_STATUS_INFO_MSG":      802,
		"USER_FORTE_TREE_STATUS_MSG":     804,
		"USER_VIP_INFO_MSG":              805,
		"USER_SUB_REGISTER_NOTIFY_MSG":   806,
		"USER_FOREIGN_LOGIN_NOTIFY_MSG":  807,
		"USER_HEART_BEAT_MSG":            8888,
		"USER_EVENT_INFO_MSG":            9999,
		"ERR_COMMON":                     500500,
		"ERR_PACKET":                     500501,
		"ERR_PARAM":                      500502,
		"ERR_USER_NOT_EXIST":             500503,
		"ERR_USER_AUTH":                  500504,
	}
)

func (x MessageID) Enum() *MessageID {
	p := new(MessageID)
	*p = x
	return p
}

func (x MessageID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageID) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[0].Descriptor()
}

func (MessageID) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[0]
}

func (x MessageID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageID.Descriptor instead.
func (MessageID) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{0}
}

// *
// 土地状态枚举
// 定义土地的各种可能状态
type LandStatus int32

const (
	LandStatus_LAND_STATUS_UNSPECIFIED LandStatus = 0 // 未指定状态
	LandStatus_UNCULTIVATED            LandStatus = 1 // 未开垦
	LandStatus_CULTIVATED_EMPTY        LandStatus = 2 // 已开垦未种植
	LandStatus_PLANTED                 LandStatus = 3 // 已种植
)

// Enum value maps for LandStatus.
var (
	LandStatus_name = map[int32]string{
		0: "LAND_STATUS_UNSPECIFIED",
		1: "UNCULTIVATED",
		2: "CULTIVATED_EMPTY",
		3: "PLANTED",
	}
	LandStatus_value = map[string]int32{
		"LAND_STATUS_UNSPECIFIED": 0,
		"UNCULTIVATED":            1,
		"CULTIVATED_EMPTY":        2,
		"PLANTED":                 3,
	}
)

func (x LandStatus) Enum() *LandStatus {
	p := new(LandStatus)
	*p = x
	return p
}

func (x LandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[1].Descriptor()
}

func (LandStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[1]
}

func (x LandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandStatus.Descriptor instead.
func (LandStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{1}
}

// *
// 作物收获状态枚举
// 定义作物是否已被收获
type HarvestStatus int32

const (
	HarvestStatus_HARVEST_STATUS_UNSPECIFIED HarvestStatus = 0 // 未指定状态
	HarvestStatus_NOT_HARVESTED              HarvestStatus = 1 // 未收获 （没成熟）
	HarvestStatus_HARVESTED                  HarvestStatus = 2 // 可收获（已成熟）
	HarvestStatus_WAIT_HARVESTED             HarvestStatus = 3 // 已收获
)

// Enum value maps for HarvestStatus.
var (
	HarvestStatus_name = map[int32]string{
		0: "HARVEST_STATUS_UNSPECIFIED",
		1: "NOT_HARVESTED",
		2: "HARVESTED",
		3: "WAIT_HARVESTED",
	}
	HarvestStatus_value = map[string]int32{
		"HARVEST_STATUS_UNSPECIFIED": 0,
		"NOT_HARVESTED":              1,
		"HARVESTED":                  2,
		"WAIT_HARVESTED":             3,
	}
)

func (x HarvestStatus) Enum() *HarvestStatus {
	p := new(HarvestStatus)
	*p = x
	return p
}

func (x HarvestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HarvestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[2].Descriptor()
}

func (HarvestStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[2]
}

func (x HarvestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HarvestStatus.Descriptor instead.
func (HarvestStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{2}
}

// *
// 作物生长状态枚举
// 定义作物的生长阶段
type GrowthStatus int32

const (
	GrowthStatus_GROWTH_STATUS_UNSPECIFIED GrowthStatus = 0 // 未指定状态
	GrowthStatus_SEED_STAGE                GrowthStatus = 1 // 种子阶段
	GrowthStatus_SPROUTING_STAGE           GrowthStatus = 2 // 发芽阶段
	GrowthStatus_GROWTH_STAGE              GrowthStatus = 3 // 成长阶段
	GrowthStatus_FLOWERING_STAGE           GrowthStatus = 4 // 开花阶段
	GrowthStatus_FRUITING_STAGE            GrowthStatus = 5 // 结果阶段
	GrowthStatus_MATURE_STAGE              GrowthStatus = 6 // 成熟阶段
)

// Enum value maps for GrowthStatus.
var (
	GrowthStatus_name = map[int32]string{
		0: "GROWTH_STATUS_UNSPECIFIED",
		1: "SEED_STAGE",
		2: "SPROUTING_STAGE",
		3: "GROWTH_STAGE",
		4: "FLOWERING_STAGE",
		5: "FRUITING_STAGE",
		6: "MATURE_STAGE",
	}
	GrowthStatus_value = map[string]int32{
		"GROWTH_STATUS_UNSPECIFIED": 0,
		"SEED_STAGE":                1,
		"SPROUTING_STAGE":           2,
		"GROWTH_STAGE":              3,
		"FLOWERING_STAGE":           4,
		"FRUITING_STAGE":            5,
		"MATURE_STAGE":              6,
	}
)

func (x GrowthStatus) Enum() *GrowthStatus {
	p := new(GrowthStatus)
	*p = x
	return p
}

func (x GrowthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrowthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[3].Descriptor()
}

func (GrowthStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[3]
}

func (x GrowthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrowthStatus.Descriptor instead.
func (GrowthStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{3}
}

// *
// 农场操作类型枚举
// 定义可在农场上执行的操作类型
type FarmOperationType int32

const (
	FarmOperationType_OPERATION_UNSPECIFIED FarmOperationType = 0 // 未指定操作
	FarmOperationType_PLANTING              FarmOperationType = 1 // 播种 - 在指定土地上种植作物
	FarmOperationType_WATERING              FarmOperationType = 2 // 浇水 - 为指定土地上的作物浇水
	FarmOperationType_FERTILIZING           FarmOperationType = 3 // 施肥 - 为指定土地上的作物施肥
	FarmOperationType_HARVESTING            FarmOperationType = 4 // 采摘 - 收获指定土地上成熟的作物
	FarmOperationType_READ_MESSAGE          FarmOperationType = 5 // 读消息 - 读取作物相关的消息或通知
)

// Enum value maps for FarmOperationType.
var (
	FarmOperationType_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "PLANTING",
		2: "WATERING",
		3: "FERTILIZING",
		4: "HARVESTING",
		5: "READ_MESSAGE",
	}
	FarmOperationType_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"PLANTING":              1,
		"WATERING":              2,
		"FERTILIZING":           3,
		"HARVESTING":            4,
		"READ_MESSAGE":          5,
	}
)

func (x FarmOperationType) Enum() *FarmOperationType {
	p := new(FarmOperationType)
	*p = x
	return p
}

func (x FarmOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[4].Descriptor()
}

func (FarmOperationType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[4]
}

func (x FarmOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FarmOperationType.Descriptor instead.
func (FarmOperationType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{4}
}

// *
// 钱包类型枚举
// 定义用户钱包的类型
type WalletType int32

const (
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0 // 未指定类型
	WalletType_USERS_WALLET            WalletType = 1 // 用户钱包
	WalletType_AGENT_WALLET            WalletType = 2 // 代理钱包
	WalletType_REWARD_WALLET           WalletType = 3 // 奖励钱包
	WalletType_USDT_WALLET             WalletType = 4 // USDT钱包
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "WALLET_TYPE_UNSPECIFIED",
		1: "USERS_WALLET",
		2: "AGENT_WALLET",
		3: "REWARD_WALLET",
		4: "USDT_WALLET",
	}
	WalletType_value = map[string]int32{
		"WALLET_TYPE_UNSPECIFIED": 0,
		"USERS_WALLET":            1,
		"AGENT_WALLET":            2,
		"REWARD_WALLET":           3,
		"USDT_WALLET":             4,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[5].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[5]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{5}
}

// *
// 钱包用途类型枚举
// 定义钱包的使用用途
type WalletUsageType int32

const (
	WalletUsageType_USAGE_TYPE_UNSPECIFIED WalletUsageType = 0 // 未指定用途
	WalletUsageType_DEPOSIT_ONLY           WalletUsageType = 1 // 仅存款
	WalletUsageType_WITHDRAWAL_ONLY        WalletUsageType = 2 // 仅提款
	WalletUsageType_DEPOSIT_AND_WITHDRAWAL WalletUsageType = 3 // 存款和提款
)

// Enum value maps for WalletUsageType.
var (
	WalletUsageType_name = map[int32]string{
		0: "USAGE_TYPE_UNSPECIFIED",
		1: "DEPOSIT_ONLY",
		2: "WITHDRAWAL_ONLY",
		3: "DEPOSIT_AND_WITHDRAWAL",
	}
	WalletUsageType_value = map[string]int32{
		"USAGE_TYPE_UNSPECIFIED": 0,
		"DEPOSIT_ONLY":           1,
		"WITHDRAWAL_ONLY":        2,
		"DEPOSIT_AND_WITHDRAWAL": 3,
	}
)

func (x WalletUsageType) Enum() *WalletUsageType {
	p := new(WalletUsageType)
	*p = x
	return p
}

func (x WalletUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[6].Descriptor()
}

func (WalletUsageType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[6]
}

func (x WalletUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletUsageType.Descriptor instead.
func (WalletUsageType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{6}
}

// *
// 是否状态枚举
// 通用的是否状态枚举（用于多个字段）
type BooleanStatus int32

const (
	BooleanStatus_BOOLEAN_UNSPECIFIED BooleanStatus = 0 // 未指定
	BooleanStatus_NO                  BooleanStatus = 1 // 否
	BooleanStatus_YES                 BooleanStatus = 2 // 是
)

// Enum value maps for BooleanStatus.
var (
	BooleanStatus_name = map[int32]string{
		0: "BOOLEAN_UNSPECIFIED",
		1: "NO",
		2: "YES",
	}
	BooleanStatus_value = map[string]int32{
		"BOOLEAN_UNSPECIFIED": 0,
		"NO":                  1,
		"YES":                 2,
	}
)

func (x BooleanStatus) Enum() *BooleanStatus {
	p := new(BooleanStatus)
	*p = x
	return p
}

func (x BooleanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[7].Descriptor()
}

func (BooleanStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[7]
}

func (x BooleanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanStatus.Descriptor instead.
func (BooleanStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{7}
}

// *
// 商品类型枚举
// 定义商店中商品的类型
type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0 // 未指定类型
	ProductType_SEED                     ProductType = 1 // 种子
	ProductType_FERTILIZER               ProductType = 2 // 肥料
	ProductType_OTHER                    ProductType = 3 // 其他道具
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "SEED",
		2: "FERTILIZER",
		3: "OTHER",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"SEED":                     1,
		"FERTILIZER":               2,
		"OTHER":                    3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[8].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[8]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{8}
}

// NotificationType 定义通知类型枚举
// NotificationType defines notification type enum
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED    NotificationType = 0    // 未指定 | Unspecified
	NotificationType_NOTIFICATION_TYPE_DAILY_GREETING NotificationType = 1000 // 日常问候 | Daily greeting
	NotificationType_NOTIFICATION_TYPE_OPERATION_TIP  NotificationType = 2000 // 操作提示 | Operation tip
	NotificationType_NOTIFICATION_TYPE_FRIEND_INFO    NotificationType = 3000 // 好友信息 | Friend info
	NotificationType_NOTIFICATION_TYPE_SYSTEM_INFO    NotificationType = 4000 // 系统信息 | System info
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0:    "NOTIFICATION_TYPE_UNSPECIFIED",
		1000: "NOTIFICATION_TYPE_DAILY_GREETING",
		2000: "NOTIFICATION_TYPE_OPERATION_TIP",
		3000: "NOTIFICATION_TYPE_FRIEND_INFO",
		4000: "NOTIFICATION_TYPE_SYSTEM_INFO",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED":    0,
		"NOTIFICATION_TYPE_DAILY_GREETING": 1000,
		"NOTIFICATION_TYPE_OPERATION_TIP":  2000,
		"NOTIFICATION_TYPE_FRIEND_INFO":    3000,
		"NOTIFICATION_TYPE_SYSTEM_INFO":    4000,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[9].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[9]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{9}
}

// NotificationSubType 定义通知子类型枚举
// NotificationSubType defines notification subtype enum
type NotificationSubType int32

const (
	NotificationSubType_NOTIFICATION_SUB_TYPE_UNSPECIFIED NotificationSubType = 0 // 未指定 | Unspecified
	// 日常问候子类型 (1000-1999) | Daily greeting subtypes (1000-1999)
	NotificationSubType_NOTIFICATION_SUB_TYPE_MORNING       NotificationSubType = 1001 // 早上问候 | Morning greeting
	NotificationSubType_NOTIFICATION_SUB_TYPE_NOON          NotificationSubType = 1002 // 中午问候 | Noon greeting
	NotificationSubType_NOTIFICATION_SUB_TYPE_EVENING       NotificationSubType = 1003 // 晚上问候 | Evening greeting
	NotificationSubType_NOTIFICATION_SUB_TYPE_RETURN_PLAYER NotificationSubType = 1004 // 老玩家回归问候 | Returning player greeting
	// 操作提示子类型 (2000-2999) | Operation tip subtypes (2000-2999)
	NotificationSubType_NOTIFICATION_SUB_TYPE_CROP_NEED_WATER     NotificationSubType = 2001 // 农作物待浇水 | Crop needs water
	NotificationSubType_NOTIFICATION_SUB_TYPE_CROP_CAN_HARVEST    NotificationSubType = 2002 // 农作物待收获 | Crop can be harvested
	NotificationSubType_NOTIFICATION_SUB_TYPE_SEED_WAIT_PLANT     NotificationSubType = 2003 // 种子待种植 | Seed waiting to be planted
	NotificationSubType_NOTIFICATION_SUB_TYPE_CROP_NEED_FERTILIZE NotificationSubType = 2004 // 农作物待施肥 | Crop needs fertilizer
	NotificationSubType_NOTIFICATION_SUB_TYPE_BUY_SEED            NotificationSubType = 2005 // 购买种子 | Buy seed
	// 好友信息子类型 (3000-3999) | Friend info subtypes (3000-3999)
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_REGISTER NotificationSubType = 3001 // 新好友注册 | New friend registered
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_WATERED  NotificationSubType = 3002 // 好友浇水 | Friend watered
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_VISIT    NotificationSubType = 3003 // 好友查看农场 | Friend visited farm
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_HARVEST  NotificationSubType = 3004 // 好友收获 | Friend harvested
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_BUY_SEED NotificationSubType = 3005 // 好友购买种子 | Friend bought seed
	NotificationSubType_NOTIFICATION_SUB_TYPE_FRIEND_PLANT    NotificationSubType = 3006 // 好友种植 | Friend planted
	// 系统信息子类型 (4000-4999) | System info subtypes (4000-4999)
	NotificationSubType_NOTIFICATION_SUB_TYPE_DEPOSIT_SUCCESS    NotificationSubType = 4001 // 存款成功 | Deposit successful
	NotificationSubType_NOTIFICATION_SUB_TYPE_WITHDRAW_AVAILABLE NotificationSubType = 4002 // 可以提款 | Withdrawal available
	NotificationSubType_NOTIFICATION_SUB_TYPE_VIP_UPGRADE        NotificationSubType = 4003 // VIP等级提升 | VIP level upgraded
	NotificationSubType_NOTIFICATION_SUB_TYPE_RANKING_BREAK      NotificationSubType = 4004 // 打破排行榜记录 | Ranking record broken
)

// Enum value maps for NotificationSubType.
var (
	NotificationSubType_name = map[int32]string{
		0:    "NOTIFICATION_SUB_TYPE_UNSPECIFIED",
		1001: "NOTIFICATION_SUB_TYPE_MORNING",
		1002: "NOTIFICATION_SUB_TYPE_NOON",
		1003: "NOTIFICATION_SUB_TYPE_EVENING",
		1004: "NOTIFICATION_SUB_TYPE_RETURN_PLAYER",
		2001: "NOTIFICATION_SUB_TYPE_CROP_NEED_WATER",
		2002: "NOTIFICATION_SUB_TYPE_CROP_CAN_HARVEST",
		2003: "NOTIFICATION_SUB_TYPE_SEED_WAIT_PLANT",
		2004: "NOTIFICATION_SUB_TYPE_CROP_NEED_FERTILIZE",
		2005: "NOTIFICATION_SUB_TYPE_BUY_SEED",
		3001: "NOTIFICATION_SUB_TYPE_FRIEND_REGISTER",
		3002: "NOTIFICATION_SUB_TYPE_FRIEND_WATERED",
		3003: "NOTIFICATION_SUB_TYPE_FRIEND_VISIT",
		3004: "NOTIFICATION_SUB_TYPE_FRIEND_HARVEST",
		3005: "NOTIFICATION_SUB_TYPE_FRIEND_BUY_SEED",
		3006: "NOTIFICATION_SUB_TYPE_FRIEND_PLANT",
		4001: "NOTIFICATION_SUB_TYPE_DEPOSIT_SUCCESS",
		4002: "NOTIFICATION_SUB_TYPE_WITHDRAW_AVAILABLE",
		4003: "NOTIFICATION_SUB_TYPE_VIP_UPGRADE",
		4004: "NOTIFICATION_SUB_TYPE_RANKING_BREAK",
	}
	NotificationSubType_value = map[string]int32{
		"NOTIFICATION_SUB_TYPE_UNSPECIFIED":         0,
		"NOTIFICATION_SUB_TYPE_MORNING":             1001,
		"NOTIFICATION_SUB_TYPE_NOON":                1002,
		"NOTIFICATION_SUB_TYPE_EVENING":             1003,
		"NOTIFICATION_SUB_TYPE_RETURN_PLAYER":       1004,
		"NOTIFICATION_SUB_TYPE_CROP_NEED_WATER":     2001,
		"NOTIFICATION_SUB_TYPE_CROP_CAN_HARVEST":    2002,
		"NOTIFICATION_SUB_TYPE_SEED_WAIT_PLANT":     2003,
		"NOTIFICATION_SUB_TYPE_CROP_NEED_FERTILIZE": 2004,
		"NOTIFICATION_SUB_TYPE_BUY_SEED":            2005,
		"NOTIFICATION_SUB_TYPE_FRIEND_REGISTER":     3001,
		"NOTIFICATION_SUB_TYPE_FRIEND_WATERED":      3002,
		"NOTIFICATION_SUB_TYPE_FRIEND_VISIT":        3003,
		"NOTIFICATION_SUB_TYPE_FRIEND_HARVEST":      3004,
		"NOTIFICATION_SUB_TYPE_FRIEND_BUY_SEED":     3005,
		"NOTIFICATION_SUB_TYPE_FRIEND_PLANT":        3006,
		"NOTIFICATION_SUB_TYPE_DEPOSIT_SUCCESS":     4001,
		"NOTIFICATION_SUB_TYPE_WITHDRAW_AVAILABLE":  4002,
		"NOTIFICATION_SUB_TYPE_VIP_UPGRADE":         4003,
		"NOTIFICATION_SUB_TYPE_RANKING_BREAK":       4004,
	}
)

func (x NotificationSubType) Enum() *NotificationSubType {
	p := new(NotificationSubType)
	*p = x
	return p
}

func (x NotificationSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[10].Descriptor()
}

func (NotificationSubType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[10]
}

func (x NotificationSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationSubType.Descriptor instead.
func (NotificationSubType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{10}
}

// *
// MessageWrapper 消息包装结构
// 所有消息的外层包装，包含消息ID和消息内容
type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     MessageID `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3,enum=mqtt.v1.MessageID" json:"msg_id,omitempty"` // 消息ID
	Payload   []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`                                  // 消息内容，经过序列化的二进制数据
	Timestamp int64     `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // 消息时间戳
	SessionId string    `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`             // 会话ID
	Tags      []string  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`                                        // 消息标签
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{0}
}

func (x *MessageWrapper) GetMsgId() MessageID {
	if x != nil {
		return x.MsgId
	}
	return MessageID_MESSAGE_ID_UNSPECIFIED
}

func (x *MessageWrapper) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MessageWrapper) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MessageWrapper) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MessageWrapper) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// *
// MQTT请求消息基础结构
// 所有请求消息的基础结构，可根据需要扩展
type MsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReq) Reset() {
	*x = MsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReq) ProtoMessage() {}

func (x *MsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReq.ProtoReflect.Descriptor instead.
func (*MsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{1}
}

// *
// MQTT响应消息基础结构
// 所有响应消息的基础结构，可根据需要扩展
type MsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息
}

func (x *MsgReply) Reset() {
	*x = MsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReply) ProtoMessage() {}

func (x *MsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReply.ProtoReflect.Descriptor instead.
func (*MsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{2}
}

func (x *MsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 获取用户请求是否合法
// 用token校验用户身份
type UserAuthInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserAuthInfoMsgReq) Reset() {
	*x = UserAuthInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReq) ProtoMessage() {}

func (x *UserAuthInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{3}
}

func (x *UserAuthInfoMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserAuthInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	ParentId     int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`            // 上级ID（邀请用户的ID）
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"` // 语言代码
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码
	CurrentTime  int64  `protobuf:"varint,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`   // 当前服务器时间戳
}

func (x *UserAuthInfoMsgReply) Reset() {
	*x = UserAuthInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReply) ProtoMessage() {}

func (x *UserAuthInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{4}
}

func (x *UserAuthInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserAuthInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserAuthInfoMsgReply) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// *
// 获取用户请求是否合法心跳
// 用token校验用户身份心跳
type UserHeartBeatMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserHeartBeatMsgReq) Reset() {
	*x = UserHeartBeatMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHeartBeatMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHeartBeatMsgReq) ProtoMessage() {}

func (x *UserHeartBeatMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHeartBeatMsgReq.ProtoReflect.Descriptor instead.
func (*UserHeartBeatMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{5}
}

func (x *UserHeartBeatMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// 心跳响应
// 用token校验用户身份
type UserHeartBeatMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	ParentId     int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`            // 上级ID（邀请用户的ID）
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"` // 语言代码
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码
	CurrentTime  int64  `protobuf:"varint,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`   // 当前服务器时间戳
}

func (x *UserHeartBeatMsgReply) Reset() {
	*x = UserHeartBeatMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHeartBeatMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHeartBeatMsgReply) ProtoMessage() {}

func (x *UserHeartBeatMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHeartBeatMsgReply.ProtoReflect.Descriptor instead.
func (*UserHeartBeatMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{6}
}

func (x *UserHeartBeatMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserHeartBeatMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserHeartBeatMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserHeartBeatMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserHeartBeatMsgReply) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// *
// 获取用户请求是否合法心跳事件触发
// 用token校验用户身份心跳事件触发
type UserEventInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserEventInfoMsgReq) Reset() {
	*x = UserEventInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventInfoMsgReq) ProtoMessage() {}

func (x *UserEventInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEventInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{7}
}

func (x *UserEventInfoMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// 心跳响应事件触发
// 用token校验用户身份事件触发
type UserEventInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	ParentId     int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`            // 上级ID（邀请用户的ID）
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"` // 语言代码
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码
	CurrentTime  int64  `protobuf:"varint,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`   // 当前服务器时间戳
}

func (x *UserEventInfoMsgReply) Reset() {
	*x = UserEventInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventInfoMsgReply) ProtoMessage() {}

func (x *UserEventInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserEventInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{8}
}

func (x *UserEventInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEventInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserEventInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserEventInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserEventInfoMsgReply) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// *
// 获取用户个人信息请求
// 用于查询当前用户的基本个人信息
type UserPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserPersonalInfoMsgReq) Reset() {
	*x = UserPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{9}
}

func (x *UserPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户个人信息响应
// 包含用户的详细个人信息
type UserPersonalInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int64          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 用户ID
	ParentId           int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                                  // 上级ID（邀请用户的ID）
	Username           string         `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                                   // 账号名称
	LanguageCode       string         `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`                       // 语言代码
	CurrencyCode       string         `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                       // 币种代码
	VipInfo            *VipInfo       `protobuf:"bytes,6,opt,name=vip_info,json=vipInfo,proto3" json:"vip_info,omitempty"`                                      // 会员等级信息
	Remark             string         `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`                                                       // 用户备注--
	LastLoginTime      int64          `protobuf:"varint,10,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                // 最后登录时间（Unix时间戳）
	InvitationCode     string         `protobuf:"bytes,11,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`                // 用户的邀请码
	InviteAddr         string         `protobuf:"bytes,12,opt,name=invite_addr,json=inviteAddr,proto3" json:"invite_addr,omitempty"`                            // 用户的邀请链接
	Avatar             string         `protobuf:"bytes,13,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                      // 用户头像URL
	Phone              string         `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`                                                        // 用户手机号
	Email              string         `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`                                                        // 用户邮箱
	Wallets            []*UserWallet  `protobuf:"bytes,16,rep,name=wallets,proto3" json:"wallets,omitempty"`                                                    // 用户的钱包地址列表
	Balances           []*UserBalance `protobuf:"bytes,17,rep,name=balances,proto3" json:"balances,omitempty"`                                                  // 用户的各类钱包余额列表
	EnableSecondaryPwd int64          `protobuf:"varint,18,opt,name=enable_secondary_pwd,json=enableSecondaryPwd,proto3" json:"enable_secondary_pwd,omitempty"` // 是否设置二级密码（1：设置，2：未设置）
}

func (x *UserPersonalInfoMsgReply) Reset() {
	*x = UserPersonalInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReply) ProtoMessage() {}

func (x *UserPersonalInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{10}
}

func (x *UserPersonalInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetVipInfo() *VipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetInviteAddr() string {
	if x != nil {
		return x.InviteAddr
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetWallets() []*UserWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetBalances() []*UserBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetEnableSecondaryPwd() int64 {
	if x != nil {
		return x.EnableSecondaryPwd
	}
	return 0
}

type VipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VipLevelId   int64  `protobuf:"varint,1,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`      // 会员等级ID（关联user_vip_levels表）
	VipLevelVal  int64  `protobuf:"varint,2,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`   // 会员等级值
	VipLevelName string `protobuf:"bytes,3,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"` // 会员等级名称
	CurrentXp    int64  `protobuf:"varint,4,opt,name=current_xp,json=currentXp,proto3" json:"current_xp,omitempty"`           // 当前经验值
	NextLevelXp  int64  `protobuf:"varint,5,opt,name=next_level_xp,json=nextLevelXp,proto3" json:"next_level_xp,omitempty"`   // 升级需要的经验值
}

func (x *VipInfo) Reset() {
	*x = VipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfo) ProtoMessage() {}

func (x *VipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfo.ProtoReflect.Descriptor instead.
func (*VipInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{11}
}

func (x *VipInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *VipInfo) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *VipInfo) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *VipInfo) GetCurrentXp() int64 {
	if x != nil {
		return x.CurrentXp
	}
	return 0
}

func (x *VipInfo) GetNextLevelXp() int64 {
	if x != nil {
		return x.NextLevelXp
	}
	return 0
}

// *
// 编辑用户个人信息请求
// 用于更新用户的个人信息设置
type UserEditPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                        // 用户身份验证令牌，必填
	Avatar               string        `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                                                       // 用户形象(头像信息)
	FarmName             string        `protobuf:"bytes,3,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                   // 农场名称，可选，修改时使用
	HasCompletedTutorial BooleanStatus `protobuf:"varint,4,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=mqtt.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 新手教程状态（YES:已完成, NO:未完成）
	HasReceivedFreeGift  BooleanStatus `protobuf:"varint,5,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=mqtt.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`  // 是否领取免费种子（YES:已完成, NO:未完成）
	LanguageCode         string        `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`                                                       // 编辑语言
	CurrencyCode         string        `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                                                       // 编辑币种
}

func (x *UserEditPersonalInfoMsgReq) Reset() {
	*x = UserEditPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserEditPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEditPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{12}
}

func (x *UserEditPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEditPersonalInfoMsgReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserEditPersonalInfoMsgReq) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserEditPersonalInfoMsgReq) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type UserEditPersonalInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserEditPersonalInfoMsgReply) Reset() {
	*x = UserEditPersonalInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditPersonalInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditPersonalInfoMsgReply) ProtoMessage() {}

func (x *UserEditPersonalInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditPersonalInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserEditPersonalInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{13}
}

func (x *UserEditPersonalInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserEditPersonalInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 编辑用户个人信息请求
// 用于更新用户的个人敏感信息设置
type UserEditSensitiveInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category    int64  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`                         // 1：修改密码，2：修改设置二级密码 ，3：验证账号（传3单独验证账号，2：设置二级密码的时候必须验证账号，1：不用验证账号）
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 用户身份验证令牌，必填
	OldPassword string `protobuf:"bytes,3,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"` //旧密码
	NewPassword string `protobuf:"bytes,4,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"` //新密码
	Account     string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                            // 账号
	VerifyType  int64  `protobuf:"varint,6,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"`   // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Captcha     string `protobuf:"bytes,7,opt,name=captcha,proto3" json:"captcha,omitempty"`                            // 验证码
}

func (x *UserEditSensitiveInfoMsgReq) Reset() {
	*x = UserEditSensitiveInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditSensitiveInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditSensitiveInfoMsgReq) ProtoMessage() {}

func (x *UserEditSensitiveInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditSensitiveInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEditSensitiveInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{14}
}

func (x *UserEditSensitiveInfoMsgReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

type UserEditSensitiveInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserEditSensitiveInfoMsgReply) Reset() {
	*x = UserEditSensitiveInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditSensitiveInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditSensitiveInfoMsgReply) ProtoMessage() {}

func (x *UserEditSensitiveInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditSensitiveInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserEditSensitiveInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{15}
}

func (x *UserEditSensitiveInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 校验二级密码请求
type VerifySecondaryPasswordMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`            // 用户输入的二级密码
}

func (x *VerifySecondaryPasswordMsgReq) Reset() {
	*x = VerifySecondaryPasswordMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySecondaryPasswordMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySecondaryPasswordMsgReq) ProtoMessage() {}

func (x *VerifySecondaryPasswordMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySecondaryPasswordMsgReq.ProtoReflect.Descriptor instead.
func (*VerifySecondaryPasswordMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{16}
}

func (x *VerifySecondaryPasswordMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VerifySecondaryPasswordMsgReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 校验二级密码请求
type VerifySecondaryPasswordMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *VerifySecondaryPasswordMsgReply) Reset() {
	*x = VerifySecondaryPasswordMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySecondaryPasswordMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySecondaryPasswordMsgReply) ProtoMessage() {}

func (x *VerifySecondaryPasswordMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySecondaryPasswordMsgReply.ProtoReflect.Descriptor instead.
func (*VerifySecondaryPasswordMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{17}
}

func (x *VerifySecondaryPasswordMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VerifySecondaryPasswordMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 用户钱包地址信息
// 表示用户的各种加密货币钱包地址
type UserWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                           // 主键ID
	UserId              int64           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                     // 用户ID
	WalletAddress       string          `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`                                                 // 钱包地址
	WalletName          string          `protobuf:"bytes,4,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`                                                          // 钱包名称/备注
	WalletType          string          `protobuf:"bytes,5,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                                                          // 钱包类型(ETH/BTC等)
	UsageType           WalletUsageType `protobuf:"varint,6,opt,name=usage_type,json=usageType,proto3,enum=mqtt.v1.WalletUsageType" json:"usage_type,omitempty"`                               // 用途类型
	IsDefaultDeposit    BooleanStatus   `protobuf:"varint,7,opt,name=is_default_deposit,json=isDefaultDeposit,proto3,enum=mqtt.v1.BooleanStatus" json:"is_default_deposit,omitempty"`          // 是否默认存款地址
	IsDefaultWithdrawal BooleanStatus   `protobuf:"varint,8,opt,name=is_default_withdrawal,json=isDefaultWithdrawal,proto3,enum=mqtt.v1.BooleanStatus" json:"is_default_withdrawal,omitempty"` // 是否默认提款地址
}

func (x *UserWallet) Reset() {
	*x = UserWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWallet) ProtoMessage() {}

func (x *UserWallet) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWallet.ProtoReflect.Descriptor instead.
func (*UserWallet) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{18}
}

func (x *UserWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserWallet) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWallet) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *UserWallet) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *UserWallet) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *UserWallet) GetUsageType() WalletUsageType {
	if x != nil {
		return x.UsageType
	}
	return WalletUsageType_USAGE_TYPE_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultDeposit() BooleanStatus {
	if x != nil {
		return x.IsDefaultDeposit
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultWithdrawal() BooleanStatus {
	if x != nil {
		return x.IsDefaultWithdrawal
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 用户余额信息
// 表示用户在各类钱包中的余额状态
type UserBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 主键ID
	WalletType    WalletType `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=mqtt.v1.WalletType" json:"wallet_type,omitempty"` // 钱包类型
	UserId        int64      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                     // 用户ID
	Balance       int64      `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`                                                 // 可用余额
	LockedBalance int64      `protobuf:"varint,5,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`                // 锁定余额（如提现中等）
}

func (x *UserBalance) Reset() {
	*x = UserBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalance) ProtoMessage() {}

func (x *UserBalance) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalance.ProtoReflect.Descriptor instead.
func (*UserBalance) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{19}
}

func (x *UserBalance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBalance) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *UserBalance) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserBalance) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

// *
// 获取用户仓库信息请求
// 用于查询当前用户的仓库库存信息
type UserStorageInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户身份验证令牌，必填
	Page        int64       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                                           // 页码
	PageSize    int64       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                   // 每页项目数
	ProductType ProductType `protobuf:"varint,4,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"` // 商品类型筛选
}

func (x *UserStorageInfoMsgReq) Reset() {
	*x = UserStorageInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReq) ProtoMessage() {}

func (x *UserStorageInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{20}
}

func (x *UserStorageInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

// *
// 用户仓库信息响应
// 包含用户仓库中的所有物品
type UserStorageInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 当前页码
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页项目数
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          // 总项目数
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"` // 总页数
	Rows      []*UserStorageDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                             // 用户仓库物品列表
	Extend    string               `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`                         // 扩展信息
}

func (x *UserStorageInfoMsgReply) Reset() {
	*x = UserStorageInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReply) ProtoMessage() {}

func (x *UserStorageInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{21}
}

func (x *UserStorageInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetRows() []*UserStorageDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserStorageInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户仓库物品信息
// 表示用户仓库中的单个物品详细信息
type UserStorageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // 自增主键
	StorageId       int64       `protobuf:"varint,21,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                               // 仓库物品ID
	UserId          int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户ID，关联到用户表
	ProductType     ProductType `protobuf:"varint,3,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"` // 商品类型
	ProductId       int64       `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                // 商品ID，关联到对应产品配置表（商品ID）
	ProductName     string      `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 商品名称快照，保存购买时的名称
	ProductImageUrl string      `protobuf:"bytes,6,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`             // 商品图片地址快照，保存购买时的图片URL
	ProductQuantity int32       `protobuf:"varint,7,opt,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`              // 商品数量，表示用户拥有的该商品数量
	SkuId           int64       `protobuf:"varint,8,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                            // 商品SKU ID，关联到商品SKU配置表(对应作物ID)
	SkuName         string      `protobuf:"bytes,9,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                                       // SKU名称快照，保存购买时的SKU名称（对应作物名称）
	Price           int64       `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`                                                        // 商品价格快照，保存购买时的价格（单位：ustd）
	// 以下字段仅对种子类型有效
	GrowthTime           int64 `protobuf:"varint,11,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                               // 生长时间快照（单位：分钟）
	CoinReward           int64 `protobuf:"varint,12,opt,name=coin_reward,json=coinReward,proto3" json:"coin_reward,omitempty"`                               // 成熟后的收益快照（单位：代币）
	WateringFrequency    int64 `protobuf:"varint,22,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`          // 浇水频率（次/天）
	FertilizingFrequency int64 `protobuf:"varint,23,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"` // 施肥频率（次/天)
	// 自己操作相关字段
	SelfTimeReducedPerWater           int64 `protobuf:"varint,13,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 自己每次浇水减少的时间快照（单位：分钟）
	SelfWaterReductionPercentage      int64 `protobuf:"varint,14,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 自己浇水减少时间的百分比快照（0-100）
	SelfTimeReducedPerFertilizer      int64 `protobuf:"varint,15,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 自己每次施肥减少的时间快照（单位：分钟）
	SelfFertilizerReductionPercentage int64 `protobuf:"varint,16,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 自己施肥减少时间的百分比快照（0-100）
	// 好友操作相关字段
	FriendWaterTimeReduction      int64 `protobuf:"varint,17,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                // 好友每次浇水减少的时间快照（单位：分钟）
	FriendWaterPercentage         int64 `protobuf:"varint,18,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                           // 好友浇水减少时间的百分比快照（0-100）
	FriendFertilizerTimeReduction int64 `protobuf:"varint,19,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"` // 好友每次施肥减少的时间快照（单位：分钟）
	FriendFertilizerPercentage    int64 `protobuf:"varint,20,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`            // 好友施肥减少时间的百分比快照（0-100）
}

func (x *UserStorageDetail) Reset() {
	*x = UserStorageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageDetail) ProtoMessage() {}

func (x *UserStorageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageDetail.ProtoReflect.Descriptor instead.
func (*UserStorageDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{22}
}

func (x *UserStorageDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserStorageDetail) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *UserStorageDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageDetail) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *UserStorageDetail) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UserStorageDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UserStorageDetail) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *UserStorageDetail) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

func (x *UserStorageDetail) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *UserStorageDetail) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

func (x *UserStorageDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserStorageDetail) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *UserStorageDetail) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *UserStorageDetail) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *UserStorageDetail) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *UserStorageDetail) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

// *
// 获取用户商店信息请求
// 用于查询当前用户的商店相关信息
type FarmsStoreInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页项目数
}

func (x *FarmsStoreInfoMsgReq) Reset() {
	*x = FarmsStoreInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReq) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReq.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{23}
}

func (x *FarmsStoreInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 商店信息响应
// 包含商店内可购买的商品列表
type FarmsStoreInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 当前页码
	PageSize  int64        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页项目数
	Total     int64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          // 总项目数
	TotalPage int64        `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"` // 总页数
	Rows      []*StoreInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                             // 商品信息列表
	Extend    string       `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`                         // 扩展信息
}

func (x *FarmsStoreInfoMsgReply) Reset() {
	*x = FarmsStoreInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReply) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReply.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{24}
}

func (x *FarmsStoreInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetRows() []*StoreInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FarmsStoreInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 商店商品信息
// 表示商店中的单个商品信息
type StoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                   // 自增主键
	ProductType                         ProductType   `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"`                                                     // 商品类型
	ProductName                         string        `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                                               // 商品名称
	ProductImageUrl                     string        `protobuf:"bytes,4,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`                                                                 // 商品图片地址
	SkuId                               int64         `protobuf:"varint,5,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                                                                                // 物品ID
	Stock                               int64         `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                                                                                             // 库存数量，-1表示无限
	Sort                                int64         `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                                               // 排序字段
	IsFree                              BooleanStatus `protobuf:"varint,8,opt,name=is_free,json=isFree,proto3,enum=mqtt.v1.BooleanStatus" json:"is_free,omitempty"`                                                                  // 是否可以免费领取
	IsEnabled                           BooleanStatus `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,proto3,enum=mqtt.v1.BooleanStatus" json:"is_enabled,omitempty"`                                                         // 是否启用
	CropName                            string        `protobuf:"bytes,12,opt,name=crop_name,json=cropName,proto3" json:"crop_name,omitempty"`                                                                                       // 作物名称
	CropPrice                           int64         `protobuf:"varint,13,opt,name=crop_price,json=cropPrice,proto3" json:"crop_price,omitempty"`                                                                                   // 作物价格（单位：USTD）
	EstimatedValue                      int64         `protobuf:"varint,26,opt,name=estimated_value,json=estimatedValue,proto3" json:"estimated_value,omitempty"`                                                                    // 作物预估价值（作物代币*固定比例能换多少USTD 单位：USTD）
	MaturityIncome                      int64         `protobuf:"varint,14,opt,name=maturity_income,json=maturityIncome,proto3" json:"maturity_income,omitempty"`                                                                    // 成熟收益（代币）
	MaturityPeriod                      int64         `protobuf:"varint,15,opt,name=maturity_period,json=maturityPeriod,proto3" json:"maturity_period,omitempty"`                                                                    // 成熟周期（单位：分）
	WateringFrequency                   int64         `protobuf:"varint,16,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                           // 浇水频率（次/天）
	FertilizingFrequency                int64         `protobuf:"varint,17,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                                  // 施肥频率（次/天）
	SelfWateringDecreaseTime            int64         `protobuf:"varint,18,opt,name=self_watering_decrease_time,json=selfWateringDecreaseTime,proto3" json:"self_watering_decrease_time,omitempty"`                                  // 自己每次浇水减少时间（单位：分）
	SelfWateringDecreasePercentage      int64         `protobuf:"varint,19,opt,name=self_watering_decrease_percentage,json=selfWateringDecreasePercentage,proto3" json:"self_watering_decrease_percentage,omitempty"`                // 自己每次浇水减少百分比（0-100）
	SelfFertilizingDecreaseTime         int64         `protobuf:"varint,20,opt,name=self_fertilizing_decrease_time,json=selfFertilizingDecreaseTime,proto3" json:"self_fertilizing_decrease_time,omitempty"`                         // 自己每次施肥减少时间（单位：分）
	SelfFertilizingDecreasePercentage   int64         `protobuf:"varint,21,opt,name=self_fertilizing_decrease_percentage,json=selfFertilizingDecreasePercentage,proto3" json:"self_fertilizing_decrease_percentage,omitempty"`       // 自己每次施肥减少百分比（0-100）
	FriendWateringDecreaseTime          int64         `protobuf:"varint,22,opt,name=friend_watering_decrease_time,json=friendWateringDecreaseTime,proto3" json:"friend_watering_decrease_time,omitempty"`                            // 好友每次浇水减少时间（单位：分）
	FriendWateringDecreasePercentage    int64         `protobuf:"varint,23,opt,name=friend_watering_decrease_percentage,json=friendWateringDecreasePercentage,proto3" json:"friend_watering_decrease_percentage,omitempty"`          // 好友每次浇水减少百分比（0-100）
	FriendFertilizingDecreaseTime       int64         `protobuf:"varint,24,opt,name=friend_fertilizing_decrease_time,json=friendFertilizingDecreaseTime,proto3" json:"friend_fertilizing_decrease_time,omitempty"`                   // 好友每次施肥减少时间（单位：分）
	FriendFertilizingDecreasePercentage int64         `protobuf:"varint,25,opt,name=friend_fertilizing_decrease_percentage,json=friendFertilizingDecreasePercentage,proto3" json:"friend_fertilizing_decrease_percentage,omitempty"` // 好友每次施肥减少百分比（0-100）
}

func (x *StoreInfo) Reset() {
	*x = StoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreInfo) ProtoMessage() {}

func (x *StoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreInfo.ProtoReflect.Descriptor instead.
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{25}
}

func (x *StoreInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreInfo) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *StoreInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StoreInfo) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *StoreInfo) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *StoreInfo) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *StoreInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *StoreInfo) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreInfo) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreInfo) GetCropName() string {
	if x != nil {
		return x.CropName
	}
	return ""
}

func (x *StoreInfo) GetCropPrice() int64 {
	if x != nil {
		return x.CropPrice
	}
	return 0
}

func (x *StoreInfo) GetEstimatedValue() int64 {
	if x != nil {
		return x.EstimatedValue
	}
	return 0
}

func (x *StoreInfo) GetMaturityIncome() int64 {
	if x != nil {
		return x.MaturityIncome
	}
	return 0
}

func (x *StoreInfo) GetMaturityPeriod() int64 {
	if x != nil {
		return x.MaturityPeriod
	}
	return 0
}

func (x *StoreInfo) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *StoreInfo) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *StoreInfo) GetSelfWateringDecreaseTime() int64 {
	if x != nil {
		return x.SelfWateringDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetSelfWateringDecreasePercentage() int64 {
	if x != nil {
		return x.SelfWateringDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetSelfFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.SelfFertilizingDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetSelfFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.SelfFertilizingDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetFriendWateringDecreaseTime() int64 {
	if x != nil {
		return x.FriendWateringDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetFriendWateringDecreasePercentage() int64 {
	if x != nil {
		return x.FriendWateringDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetFriendFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.FriendFertilizingDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetFriendFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.FriendFertilizingDecreasePercentage
	}
	return 0
}

// *
// 购买商店商品信息请求
// 用于购买商店中的商品
type UserPurchaseGoodsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // 用户ID
	Id       int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                                  // 商品ID
	IsFree   BooleanStatus `protobuf:"varint,3,opt,name=is_free,json=isFree,proto3,enum=mqtt.v1.BooleanStatus" json:"is_free,omitempty"` // 是否为免费商品
	GoodsNum int64         `protobuf:"varint,4,opt,name=goods_num,json=goodsNum,proto3" json:"goods_num,omitempty"`                      // 购买数量
}

func (x *UserPurchaseGoodsMsgReq) Reset() {
	*x = UserPurchaseGoodsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPurchaseGoodsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPurchaseGoodsMsgReq) ProtoMessage() {}

func (x *UserPurchaseGoodsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPurchaseGoodsMsgReq.ProtoReflect.Descriptor instead.
func (*UserPurchaseGoodsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{26}
}

func (x *UserPurchaseGoodsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReq) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserPurchaseGoodsMsgReq) GetGoodsNum() int64 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type UserPurchaseGoodsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserPurchaseGoodsMsgReply) Reset() {
	*x = UserPurchaseGoodsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPurchaseGoodsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPurchaseGoodsMsgReply) ProtoMessage() {}

func (x *UserPurchaseGoodsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPurchaseGoodsMsgReply.ProtoReflect.Descriptor instead.
func (*UserPurchaseGoodsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{27}
}

func (x *UserPurchaseGoodsMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 获取系统种子相关信息请求
// 用于查询当前系统设置的种子相关信息
type CropsInfoListMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *CropsInfoListMsgReq) Reset() {
	*x = CropsInfoListMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsInfoListMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsInfoListMsgReq) ProtoMessage() {}

func (x *CropsInfoListMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsInfoListMsgReq.ProtoReflect.Descriptor instead.
func (*CropsInfoListMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{28}
}

func (x *CropsInfoListMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CropsInfoListMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 种子信息响应
// 包含系统可使用的种子列表
type CropsInfoListMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64               `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64               `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*CropsProductInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 种子信息列表
}

func (x *CropsInfoListMsgReply) Reset() {
	*x = CropsInfoListMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsInfoListMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsInfoListMsgReply) ProtoMessage() {}

func (x *CropsInfoListMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsInfoListMsgReply.ProtoReflect.Descriptor instead.
func (*CropsInfoListMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{29}
}

func (x *CropsInfoListMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CropsInfoListMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CropsInfoListMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CropsInfoListMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *CropsInfoListMsgReply) GetRows() []*CropsProductInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

// *
// 种子信息
// 包含系统可使用的单个种子的详细信息
type CropsProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                   // 作物ID
	Name                                string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                // 作物名称
	Price                               int64         `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`                                                                                                             // 作物价格（单位：ustd）
	MaturityIncome                      int64         `protobuf:"varint,4,opt,name=maturity_income,json=maturityIncome,proto3" json:"maturity_income,omitempty"`                                                                     // 成熟收益（代币）
	MaturityPeriod                      int64         `protobuf:"varint,5,opt,name=maturity_period,json=maturityPeriod,proto3" json:"maturity_period,omitempty"`                                                                     // 成熟周期（单位：分）
	WateringFrequency                   int64         `protobuf:"varint,6,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                            // 浇水频率（次/天）
	FertilizingFrequency                int64         `protobuf:"varint,7,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                                   // 施肥频率（次/天）
	SelfWateringDecreaseTime            int64         `protobuf:"varint,8,opt,name=self_watering_decrease_time,json=selfWateringDecreaseTime,proto3" json:"self_watering_decrease_time,omitempty"`                                   // 自己每次浇水减少时间（单位：分）
	SelfWateringDecreasePercentage      int64         `protobuf:"varint,9,opt,name=self_watering_decrease_percentage,json=selfWateringDecreasePercentage,proto3" json:"self_watering_decrease_percentage,omitempty"`                 // 自己每次浇水减少百分比（0-100）
	SelfFertilizingDecreaseTime         int64         `protobuf:"varint,10,opt,name=self_fertilizing_decrease_time,json=selfFertilizingDecreaseTime,proto3" json:"self_fertilizing_decrease_time,omitempty"`                         // 自己每次施肥减少时间（单位：分）
	SelfFertilizingDecreasePercentage   int64         `protobuf:"varint,11,opt,name=self_fertilizing_decrease_percentage,json=selfFertilizingDecreasePercentage,proto3" json:"self_fertilizing_decrease_percentage,omitempty"`       // 自己每次施肥减少百分比（0-100）
	FriendWateringDecreaseTime          int64         `protobuf:"varint,12,opt,name=friend_watering_decrease_time,json=friendWateringDecreaseTime,proto3" json:"friend_watering_decrease_time,omitempty"`                            // 好友每次浇水减少时间（单位：分）
	FriendWateringDecreasePercentage    int64         `protobuf:"varint,13,opt,name=friend_watering_decrease_percentage,json=friendWateringDecreasePercentage,proto3" json:"friend_watering_decrease_percentage,omitempty"`          // 好友每次浇水减少百分比（0-100）
	FriendFertilizingDecreaseTime       int64         `protobuf:"varint,14,opt,name=friend_fertilizing_decrease_time,json=friendFertilizingDecreaseTime,proto3" json:"friend_fertilizing_decrease_time,omitempty"`                   // 好友每次施肥减少时间（单位：分）
	FriendFertilizingDecreasePercentage int64         `protobuf:"varint,15,opt,name=friend_fertilizing_decrease_percentage,json=friendFertilizingDecreasePercentage,proto3" json:"friend_fertilizing_decrease_percentage,omitempty"` // 好友每次施肥减少百分比（0-100）
	IsAvailable                         BooleanStatus `protobuf:"varint,16,opt,name=is_available,json=isAvailable,proto3,enum=mqtt.v1.BooleanStatus" json:"is_available,omitempty"`                                                  // 是否上架（1 = 上架, 2 = 下架）
	Sort                                int64         `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                                              // 排序（用于显示顺序）
	IsEnabled                           BooleanStatus `protobuf:"varint,18,opt,name=is_enabled,json=isEnabled,proto3,enum=mqtt.v1.BooleanStatus" json:"is_enabled,omitempty"`                                                        // 是否启用（1 = 启用, 2 = 禁用）
}

func (x *CropsProductInfo) Reset() {
	*x = CropsProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsProductInfo) ProtoMessage() {}

func (x *CropsProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsProductInfo.ProtoReflect.Descriptor instead.
func (*CropsProductInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{30}
}

func (x *CropsProductInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CropsProductInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CropsProductInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CropsProductInfo) GetMaturityIncome() int64 {
	if x != nil {
		return x.MaturityIncome
	}
	return 0
}

func (x *CropsProductInfo) GetMaturityPeriod() int64 {
	if x != nil {
		return x.MaturityPeriod
	}
	return 0
}

func (x *CropsProductInfo) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *CropsProductInfo) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *CropsProductInfo) GetSelfWateringDecreaseTime() int64 {
	if x != nil {
		return x.SelfWateringDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetSelfWateringDecreasePercentage() int64 {
	if x != nil {
		return x.SelfWateringDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetSelfFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.SelfFertilizingDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetSelfFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.SelfFertilizingDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetFriendWateringDecreaseTime() int64 {
	if x != nil {
		return x.FriendWateringDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetFriendWateringDecreasePercentage() int64 {
	if x != nil {
		return x.FriendWateringDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetFriendFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.FriendFertilizingDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetFriendFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.FriendFertilizingDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetIsAvailable() BooleanStatus {
	if x != nil {
		return x.IsAvailable
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *CropsProductInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CropsProductInfo) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 获取用户农场信息请求
// 用于查询当前用户的农场状态信息
type UserFarmInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserFarmInfoMsgReq) Reset() {
	*x = UserFarmInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReq) ProtoMessage() {}

func (x *UserFarmInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{31}
}

func (x *UserFarmInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户农场信息响应
// 包含用户农场的基本信息
type UserFarmInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                               // 主键ID
	FarmId                int64         `protobuf:"varint,2,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                                                         // 农场ID
	UserId                int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                         // 用户ID
	FarmName              string        `protobuf:"bytes,4,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                    // 农场名称
	TotalLandCount        int64         `protobuf:"varint,5,opt,name=total_land_count,json=totalLandCount,proto3" json:"total_land_count,omitempty"`                                               // 农场总土地数量
	WaterLimitPerDay      int64         `protobuf:"varint,6,opt,name=water_limit_per_day,json=waterLimitPerDay,proto3" json:"water_limit_per_day,omitempty"`                                       // 每日浇水限制次数
	FertilizerLimitPerDay int64         `protobuf:"varint,7,opt,name=fertilizer_limit_per_day,json=fertilizerLimitPerDay,proto3" json:"fertilizer_limit_per_day,omitempty"`                        // 每日作物施肥限制次数
	TotalRewardCoins      int64         `protobuf:"varint,8,opt,name=total_reward_coins,json=totalRewardCoins,proto3" json:"total_reward_coins,omitempty"`                                         // 农场总收益金币
	HasReceivedFreeGift   BooleanStatus `protobuf:"varint,9,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=mqtt.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`   // 是否已领取新用户免费商品
	HasCompletedTutorial  BooleanStatus `protobuf:"varint,10,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=mqtt.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 是否已参加过新手教程
}

func (x *UserFarmInfoMsgReply) Reset() {
	*x = UserFarmInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReply) ProtoMessage() {}

func (x *UserFarmInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{32}
}

func (x *UserFarmInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserFarmInfoMsgReply) GetTotalLandCount() int64 {
	if x != nil {
		return x.TotalLandCount
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetWaterLimitPerDay() int64 {
	if x != nil {
		return x.WaterLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFertilizerLimitPerDay() int64 {
	if x != nil {
		return x.FertilizerLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetTotalRewardCoins() int64 {
	if x != nil {
		return x.TotalRewardCoins
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserFarmInfoMsgReply) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 获取用户土地信息请求
// 用于查询当前用户的土地信息
type UserLandInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页项目数
}

func (x *UserLandInfoMsgReq) Reset() {
	*x = UserLandInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReq) ProtoMessage() {}

func (x *UserLandInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{33}
}

func (x *UserLandInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 用户土地信息响应
// 包含用户所有土地的信息列表
type UserLandInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 当前页码
	PageSize  int64             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页项目数
	Total     int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          // 总项目数
	TotalPage int64             `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"` // 总页数
	Rows      []*UserLandDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                             // 用户土地信息列表
	Extend    string            `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`                         // 扩展信息
}

func (x *UserLandInfoMsgReply) Reset() {
	*x = UserLandInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReply) ProtoMessage() {}

func (x *UserLandInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{34}
}

func (x *UserLandInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetRows() []*UserLandDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserLandInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户土地详细信息
// 表示用户的单块土地的详细状态
type UserLandDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              //
	LandId       int64               `protobuf:"varint,2,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                        // 土地ID
	UserId       int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	FarmId       int64               `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                        // 农场ID
	PlantId      int64               `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                     // 种植记录ID
	Position     int64               `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`                                  // 土地位置编号（1-20暂时）
	Status       LandStatus          `protobuf:"varint,7,opt,name=status,proto3,enum=mqtt.v1.LandStatus" json:"status,omitempty"`              // 土地状态
	PlantedPlant *UserPlantingDetail `protobuf:"bytes,8,opt,name=planted_plant,json=plantedPlant,proto3,oneof" json:"planted_plant,omitempty"` // 种植信息，当status为PLANTED时才有值
	// 一些土地状态描述
	CropNeedWater     string `protobuf:"bytes,9,opt,name=crop_need_water,json=cropNeedWater,proto3" json:"crop_need_water,omitempty"`              // 农作物待浇水 (为空就是不展示)
	CropCanHarvest    string `protobuf:"bytes,10,opt,name=crop_can_harvest,json=cropCanHarvest,proto3" json:"crop_can_harvest,omitempty"`          // 农作物待收获 (为空就是不展示)
	SeedWaitPlant     string `protobuf:"bytes,11,opt,name=seed_wait_plant,json=seedWaitPlant,proto3" json:"seed_wait_plant,omitempty"`             // 种子待种植 (为空就是不展示)
	CropNeedFertilize string `protobuf:"bytes,12,opt,name=crop_need_fertilize,json=cropNeedFertilize,proto3" json:"crop_need_fertilize,omitempty"` // 农作物待施肥 (为空就是不展示)
	BuySeed           string `protobuf:"bytes,13,opt,name=buy_seed,json=buySeed,proto3" json:"buy_seed,omitempty"`                                 // 购买种子 (为空就是不展示)
	// 好友操作的描述
	FriendFarmName        string `protobuf:"bytes,14,opt,name=friend_farm_name,json=friendFarmName,proto3" json:"friend_farm_name,omitempty"`                       // 操作好友的农场名称
	WateringTimeReduction int64  `protobuf:"varint,15,opt,name=watering_time_reduction,json=wateringTimeReduction,proto3" json:"watering_time_reduction,omitempty"` // 浇水减少的时间 秒
}

func (x *UserLandDetail) Reset() {
	*x = UserLandDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandDetail) ProtoMessage() {}

func (x *UserLandDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandDetail.ProtoReflect.Descriptor instead.
func (*UserLandDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{35}
}

func (x *UserLandDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLandDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserLandDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserLandDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserLandDetail) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *UserLandDetail) GetStatus() LandStatus {
	if x != nil {
		return x.Status
	}
	return LandStatus_LAND_STATUS_UNSPECIFIED
}

func (x *UserLandDetail) GetPlantedPlant() *UserPlantingDetail {
	if x != nil {
		return x.PlantedPlant
	}
	return nil
}

func (x *UserLandDetail) GetCropNeedWater() string {
	if x != nil {
		return x.CropNeedWater
	}
	return ""
}

func (x *UserLandDetail) GetCropCanHarvest() string {
	if x != nil {
		return x.CropCanHarvest
	}
	return ""
}

func (x *UserLandDetail) GetSeedWaitPlant() string {
	if x != nil {
		return x.SeedWaitPlant
	}
	return ""
}

func (x *UserLandDetail) GetCropNeedFertilize() string {
	if x != nil {
		return x.CropNeedFertilize
	}
	return ""
}

func (x *UserLandDetail) GetBuySeed() string {
	if x != nil {
		return x.BuySeed
	}
	return ""
}

func (x *UserLandDetail) GetFriendFarmName() string {
	if x != nil {
		return x.FriendFarmName
	}
	return ""
}

func (x *UserLandDetail) GetWateringTimeReduction() int64 {
	if x != nil {
		return x.WateringTimeReduction
	}
	return 0
}

// *
// 用户种植记录详细信息
// 表示用户种植的单株作物的详细信息
type UserPlantingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                  // 自增ID
	PlantId         int64         `protobuf:"varint,2,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                                         // 种植记录ID
	UserId          int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                            // 用户ID
	FarmId          int64         `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                            // 农场ID
	LandId          int64         `protobuf:"varint,5,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                                            // 土地ID
	StorageId       int64         `protobuf:"varint,6,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                   // 用户的仓库物品ID
	PlantTime       int64         `protobuf:"varint,29,opt,name=plant_time,json=plantTime,proto3" json:"plant_time,omitempty"`                                  // 种植时间（Unix时间戳）
	WaterCount      int64         `protobuf:"varint,8,opt,name=water_count,json=waterCount,proto3" json:"water_count,omitempty"`                                // 已浇水总次数
	FertilizerCount int64         `protobuf:"varint,9,opt,name=fertilizer_count,json=fertilizerCount,proto3" json:"fertilizer_count,omitempty"`                 // 已施肥总次数
	IsHarvested     HarvestStatus `protobuf:"varint,10,opt,name=is_harvested,json=isHarvested,proto3,enum=mqtt.v1.HarvestStatus" json:"is_harvested,omitempty"` // 是否已收获
	HarvestedAt     int64         `protobuf:"varint,11,opt,name=harvested_at,json=harvestedAt,proto3" json:"harvested_at,omitempty"`                            // 收获时间（Unix时间戳）
	CoinsEarned     int64         `protobuf:"varint,12,opt,name=coins_earned,json=coinsEarned,proto3" json:"coins_earned,omitempty"`                            // 作物产生的金币数量
	Status          GrowthStatus  `protobuf:"varint,13,opt,name=status,proto3,enum=mqtt.v1.GrowthStatus" json:"status,omitempty"`                               // 生长状态
	// 快照字段
	ProductName                       string `protobuf:"bytes,28,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                                        // 种植时商品名称快照
	CropId                            int64  `protobuf:"varint,7,opt,name=crop_id,json=cropId,proto3" json:"crop_id,omitempty"`                                                                                       // 作物ID（对应商店信息中的sku_id或者种子信息中的id）
	CropName                          string `protobuf:"bytes,14,opt,name=crop_name,json=cropName,proto3" json:"crop_name,omitempty"`                                                                                 // 种植时作物的作物名称快照
	Price                             int64  `protobuf:"varint,15,opt,name=price,proto3" json:"price,omitempty"`                                                                                                      // 种植时作物的价格快照
	GrowthTime                        int64  `protobuf:"varint,16,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                                                                          // 种植时作物的生长时间快照
	CoinReward                        int64  `protobuf:"varint,17,opt,name=coin_reward,json=coinReward,proto3" json:"coin_reward,omitempty"`                                                                          // 种植时作物的金币奖励快照
	WateringFrequency                 int64  `protobuf:"varint,18,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                     // 种植时作物的浇水频率快照
	FertilizingFrequency              int64  `protobuf:"varint,19,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                            // 种植时作物的施肥频率快照
	SelfTimeReducedPerWater           int64  `protobuf:"varint,20,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 种植时每次自己浇水减少的时间快照
	SelfWaterReductionPercentage      int64  `protobuf:"varint,21,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 种植时自己浇水减少时间的百分比快照
	SelfTimeReducedPerFertilizer      int64  `protobuf:"varint,22,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 种植时每次自己施肥减少的时间快照
	SelfFertilizerReductionPercentage int64  `protobuf:"varint,23,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 种植时自己施肥减少时间的百分比快照
	FriendWaterTimeReduction          int64  `protobuf:"varint,24,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                            // 种植时好友浇水减少的时间快照
	FriendWaterPercentage             int64  `protobuf:"varint,25,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                                       // 种植时好友浇水百分比快照
	FriendFertilizerTimeReduction     int64  `protobuf:"varint,26,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"`             // 种植时好友施肥减少的时间快照
	FriendFertilizerPercentage        int64  `protobuf:"varint,27,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`                        // 种植时好友施肥百分比快照
}

func (x *UserPlantingDetail) Reset() {
	*x = UserPlantingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPlantingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPlantingDetail) ProtoMessage() {}

func (x *UserPlantingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPlantingDetail.ProtoReflect.Descriptor instead.
func (*UserPlantingDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{36}
}

func (x *UserPlantingDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPlantingDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserPlantingDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPlantingDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserPlantingDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserPlantingDetail) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *UserPlantingDetail) GetPlantTime() int64 {
	if x != nil {
		return x.PlantTime
	}
	return 0
}

func (x *UserPlantingDetail) GetWaterCount() int64 {
	if x != nil {
		return x.WaterCount
	}
	return 0
}

func (x *UserPlantingDetail) GetFertilizerCount() int64 {
	if x != nil {
		return x.FertilizerCount
	}
	return 0
}

func (x *UserPlantingDetail) GetIsHarvested() HarvestStatus {
	if x != nil {
		return x.IsHarvested
	}
	return HarvestStatus_HARVEST_STATUS_UNSPECIFIED
}

func (x *UserPlantingDetail) GetHarvestedAt() int64 {
	if x != nil {
		return x.HarvestedAt
	}
	return 0
}

func (x *UserPlantingDetail) GetCoinsEarned() int64 {
	if x != nil {
		return x.CoinsEarned
	}
	return 0
}

func (x *UserPlantingDetail) GetStatus() GrowthStatus {
	if x != nil {
		return x.Status
	}
	return GrowthStatus_GROWTH_STATUS_UNSPECIFIED
}

func (x *UserPlantingDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UserPlantingDetail) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *UserPlantingDetail) GetCropName() string {
	if x != nil {
		return x.CropName
	}
	return ""
}

func (x *UserPlantingDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserPlantingDetail) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *UserPlantingDetail) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *UserPlantingDetail) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *UserPlantingDetail) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

// *
// 用户农场操作请求
// 用于对自己或他人的农场进行各种操作
type UserFarmOpsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                               // 用户身份验证令牌，必填
	OperateType    FarmOperationType `protobuf:"varint,2,opt,name=operate_type,json=operateType,proto3,enum=mqtt.v1.FarmOperationType" json:"operate_type,omitempty"` // 操作类型，必填
	OpToUserId     int64             `protobuf:"varint,3,opt,name=op_to_user_id,json=opToUserId,proto3" json:"op_to_user_id,omitempty"`                               // 被操作的用户ID，必填（可以是自己或好友ID）
	OpToFarmId     int64             `protobuf:"varint,4,opt,name=op_to_farm_id,json=opToFarmId,proto3" json:"op_to_farm_id,omitempty"`                               // 被操作的农场ID，必填
	OpToLandId     int64             `protobuf:"varint,5,opt,name=op_to_land_id,json=opToLandId,proto3" json:"op_to_land_id,omitempty"`                               // 被操作的土地ID，必填
	OpLandPosition int64             `protobuf:"varint,6,opt,name=op_land_position,json=opLandPosition,proto3" json:"op_land_position,omitempty"`                     // 被操作的土地位置编号，必填
	StorageId      int64             `protobuf:"varint,7,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                      // 仓库物品ID（里面包含操作的作物详情）
}

func (x *UserFarmOpsMsgReq) Reset() {
	*x = UserFarmOpsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmOpsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmOpsMsgReq) ProtoMessage() {}

func (x *UserFarmOpsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmOpsMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmOpsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{37}
}

func (x *UserFarmOpsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOperateType() FarmOperationType {
	if x != nil {
		return x.OperateType
	}
	return FarmOperationType_OPERATION_UNSPECIFIED
}

func (x *UserFarmOpsMsgReq) GetOpToUserId() int64 {
	if x != nil {
		return x.OpToUserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToFarmId() int64 {
	if x != nil {
		return x.OpToFarmId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToLandId() int64 {
	if x != nil {
		return x.OpToLandId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpLandPosition() int64 {
	if x != nil {
		return x.OpLandPosition
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

// *
// 用户农场操作响应
// 用于对自己或他人的农场进行各种操作
type UserFarmOpsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserFarmOpsMsgReply) Reset() {
	*x = UserFarmOpsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmOpsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmOpsMsgReply) ProtoMessage() {}

func (x *UserFarmOpsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmOpsMsgReply.ProtoReflect.Descriptor instead.
func (*UserFarmOpsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{38}
}

func (x *UserFarmOpsMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserFarmOpsMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 批量生成农场名称
type GenerateFarmsNameMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GenerateFarmsNameMsgReq) Reset() {
	*x = GenerateFarmsNameMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFarmsNameMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFarmsNameMsgReq) ProtoMessage() {}

func (x *GenerateFarmsNameMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFarmsNameMsgReq.ProtoReflect.Descriptor instead.
func (*GenerateFarmsNameMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{39}
}

func (x *GenerateFarmsNameMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GenerateFarmsNameMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FarmsName []string `protobuf:"bytes,1,rep,name=farms_name,json=farmsName,proto3" json:"farms_name,omitempty"`
}

func (x *GenerateFarmsNameMsgReply) Reset() {
	*x = GenerateFarmsNameMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFarmsNameMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFarmsNameMsgReply) ProtoMessage() {}

func (x *GenerateFarmsNameMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFarmsNameMsgReply.ProtoReflect.Descriptor instead.
func (*GenerateFarmsNameMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{40}
}

func (x *GenerateFarmsNameMsgReply) GetFarmsName() []string {
	if x != nil {
		return x.FarmsName
	}
	return nil
}

// *
// 用户产看他人农场的操作请求
// 表示查看他人的信息
type LookUserFarmsInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 查看用户ID
	ViewedUserId int64 `protobuf:"varint,2,opt,name=viewed_user_id,json=viewedUserId,proto3" json:"viewed_user_id,omitempty"` // 被查看用户ID
}

func (x *LookUserFarmsInfoMsgReq) Reset() {
	*x = LookUserFarmsInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUserFarmsInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUserFarmsInfoMsgReq) ProtoMessage() {}

func (x *LookUserFarmsInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUserFarmsInfoMsgReq.ProtoReflect.Descriptor instead.
func (*LookUserFarmsInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{41}
}

func (x *LookUserFarmsInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReq) GetViewedUserId() int64 {
	if x != nil {
		return x.ViewedUserId
	}
	return 0
}

// *
// 查看他人农场信息响应
// 包含他人农场的详细信息
type LookUserFarmsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户相关信息
	UserId        int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	ParentId      int64    `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                  // 上级ID（邀请用户的ID）
	Username      string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                   // 账号名称
	LanguageCode  string   `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`       // 语言代码
	CurrencyCode  string   `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`       // 币种代码
	VipInfo       *VipInfo `protobuf:"bytes,6,opt,name=vip_info,json=vipInfo,proto3" json:"vip_info,omitempty"`                      // 会员等级信息
	Remark        string   `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`                                       // 用户备注
	LastLoginTime int64    `protobuf:"varint,8,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` // 最后登录时间（Unix时间戳）
	Avatar        string   `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`                                       // 用户头像URL
	// 农场相关信息
	FarmId                int64  `protobuf:"varint,10,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                                  // 农场ID
	FarmName              string `protobuf:"bytes,11,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                             // 农场名称
	TotalLandCount        int64  `protobuf:"varint,12,opt,name=total_land_count,json=totalLandCount,proto3" json:"total_land_count,omitempty"`                        // 农场总土地数量
	WaterLimitPerDay      int64  `protobuf:"varint,13,opt,name=water_limit_per_day,json=waterLimitPerDay,proto3" json:"water_limit_per_day,omitempty"`                // 每日浇水限制次数
	FertilizerLimitPerDay int64  `protobuf:"varint,14,opt,name=fertilizer_limit_per_day,json=fertilizerLimitPerDay,proto3" json:"fertilizer_limit_per_day,omitempty"` // 每日作物施肥限制次数
	TotalRewardCoins      int64  `protobuf:"varint,15,opt,name=total_reward_coins,json=totalRewardCoins,proto3" json:"total_reward_coins,omitempty"`                  // 农场总收益金币
	// 土地信息
	LandDetail []*UserLandDetail `protobuf:"bytes,16,rep,name=land_detail,json=landDetail,proto3" json:"land_detail,omitempty"` // 用户土地信息列表
	// 发财树信息
	FortuneTree *UserFortuneTreeInfo `protobuf:"bytes,17,opt,name=fortune_tree,json=fortuneTree,proto3" json:"fortune_tree,omitempty"` // 用户的发财树信息
}

func (x *LookUserFarmsInfoMsgReply) Reset() {
	*x = LookUserFarmsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUserFarmsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUserFarmsInfoMsgReply) ProtoMessage() {}

func (x *LookUserFarmsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUserFarmsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*LookUserFarmsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{42}
}

func (x *LookUserFarmsInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetVipInfo() *VipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

func (x *LookUserFarmsInfoMsgReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetTotalLandCount() int64 {
	if x != nil {
		return x.TotalLandCount
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetWaterLimitPerDay() int64 {
	if x != nil {
		return x.WaterLimitPerDay
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetFertilizerLimitPerDay() int64 {
	if x != nil {
		return x.FertilizerLimitPerDay
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetTotalRewardCoins() int64 {
	if x != nil {
		return x.TotalRewardCoins
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetLandDetail() []*UserLandDetail {
	if x != nil {
		return x.LandDetail
	}
	return nil
}

func (x *LookUserFarmsInfoMsgReply) GetFortuneTree() *UserFortuneTreeInfo {
	if x != nil {
		return x.FortuneTree
	}
	return nil
}

// *
// 用户发财树详细信息
// 表示用户的发财树详细信息
type UserFortuneTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 发财树唯一标识ID
	UserId             int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户ID，唯一约束保证每个用户只有一棵树
	VipLevelId         int64 `protobuf:"varint,3,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                         // VIP等级ID，影响金币产出和生产周期
	CycleStartTime     int64 `protobuf:"varint,4,opt,name=cycle_start_time,json=cycleStartTime,proto3" json:"cycle_start_time,omitempty"`             // 当前周期开始时间（时间戳，秒）
	IsReadyToHarvest   int32 `protobuf:"varint,5,opt,name=is_ready_to_harvest,json=isReadyToHarvest,proto3" json:"is_ready_to_harvest,omitempty"`     // 是否可以收获标志：1-不可收获，2-可收获
	LastHarvestTime    int64 `protobuf:"varint,6,opt,name=last_harvest_time,json=lastHarvestTime,proto3" json:"last_harvest_time,omitempty"`          // 上次收获时间（时间戳，秒）
	NextHarvestTime    int64 `protobuf:"varint,7,opt,name=next_harvest_time,json=nextHarvestTime,proto3" json:"next_harvest_time,omitempty"`          // 下次可收获时间（时间戳，秒）
	CycleHarvestedIcon int64 `protobuf:"varint,8,opt,name=cycle_harvested_icon,json=cycleHarvestedIcon,proto3" json:"cycle_harvested_icon,omitempty"` // 当前周期可收获的金币
	TotalHarvested     int64 `protobuf:"varint,9,opt,name=total_harvested,json=totalHarvested,proto3" json:"total_harvested,omitempty"`               // 历史总收获金币数量统计
	CreatedAt          int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 发财树创建时间（时间戳，秒）
	UpdatedAt          int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                             // 发财树信息最后更新时间（时间戳，秒）
}

func (x *UserFortuneTreeInfo) Reset() {
	*x = UserFortuneTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfo) ProtoMessage() {}

func (x *UserFortuneTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfo.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{43}
}

func (x *UserFortuneTreeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCycleStartTime() int64 {
	if x != nil {
		return x.CycleStartTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetIsReadyToHarvest() int32 {
	if x != nil {
		return x.IsReadyToHarvest
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetLastHarvestTime() int64 {
	if x != nil {
		return x.LastHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetNextHarvestTime() int64 {
	if x != nil {
		return x.NextHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCycleHarvestedIcon() int64 {
	if x != nil {
		return x.CycleHarvestedIcon
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetTotalHarvested() int64 {
	if x != nil {
		return x.TotalHarvested
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// *
// 用户全局排名请求
// 展示所有用户的排名和自己的排名
type AllUserRankingInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 请求用户的ID
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码，从1开始
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
}

func (x *AllUserRankingInfoMsgReq) Reset() {
	*x = AllUserRankingInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserRankingInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserRankingInfoMsgReq) ProtoMessage() {}

func (x *AllUserRankingInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserRankingInfoMsgReq.ProtoReflect.Descriptor instead.
func (*AllUserRankingInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{44}
}

func (x *AllUserRankingInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AllUserRankingInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllUserRankingInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 用户排名列表响应
// 包含全局排名和自己的排名
type AllUserRankingInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 当前页码
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页项目数
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          // 总项目数
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"` // 总页数
	Rows      []*FriendRankingInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                             // 用户排名列表
	MyRanking *MyRankingInfo       `protobuf:"bytes,6,opt,name=my_ranking,json=myRanking,proto3" json:"my_ranking,omitempty"`  // 我的排名信息
}

func (x *AllUserRankingInfoMsgReply) Reset() {
	*x = AllUserRankingInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserRankingInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserRankingInfoMsgReply) ProtoMessage() {}

func (x *AllUserRankingInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserRankingInfoMsgReply.ProtoReflect.Descriptor instead.
func (*AllUserRankingInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{45}
}

func (x *AllUserRankingInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetRows() []*FriendRankingInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *AllUserRankingInfoMsgReply) GetMyRanking() *MyRankingInfo {
	if x != nil {
		return x.MyRanking
	}
	return nil
}

// *
// 用户好友排名请求
// 展示所有好友的排名和自己的排名
type UserFriendRankingInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 请求用户的ID
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码，从1开始
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
}

func (x *UserFriendRankingInfoMsgReq) Reset() {
	*x = UserFriendRankingInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriendRankingInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriendRankingInfoMsgReq) ProtoMessage() {}

func (x *UserFriendRankingInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriendRankingInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFriendRankingInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{46}
}

func (x *UserFriendRankingInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 好友排名列表响应
// 包含所有好友的排名和自己的排名
type UserFriendRankingInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 当前页码
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页项目数
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                          // 总项目数
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"` // 总页数
	Rows      []*FriendRankingInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                             // 好友排名列表
	MyRanking *MyRankingInfo       `protobuf:"bytes,6,opt,name=my_ranking,json=myRanking,proto3" json:"my_ranking,omitempty"`  // 我的排名信息
}

func (x *UserFriendRankingInfoMsgReply) Reset() {
	*x = UserFriendRankingInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriendRankingInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriendRankingInfoMsgReply) ProtoMessage() {}

func (x *UserFriendRankingInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriendRankingInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFriendRankingInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{47}
}

func (x *UserFriendRankingInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetRows() []*FriendRankingInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserFriendRankingInfoMsgReply) GetMyRanking() *MyRankingInfo {
	if x != nil {
		return x.MyRanking
	}
	return nil
}

// *
// 单个好友排名信息
// 表示单个好友在排名中的详细信息
type FriendRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                    // 用户ID
	FriendId               int64  `protobuf:"varint,3,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`                                              // 好友ID
	Username               string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                                               // 用户名
	AvatarUrl              string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                            // 头像URL
	VipLevelId             int64  `protobuf:"varint,6,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                                      // VIP等级ID
	VipLevelVal            int64  `protobuf:"varint,7,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`                                   // 会员等级值
	VipLevelName           string `protobuf:"bytes,8,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`                                 // 会员等级名称
	Coin                   int64  `protobuf:"varint,9,opt,name=coin,proto3" json:"coin,omitempty"`                                                                      // 金币数量
	UpdatedAt              int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                          // 更新时间戳
	Rank                   int64  `protobuf:"varint,11,opt,name=rank,proto3" json:"rank,omitempty"`                                                                     // 排名位置
	FarmName               string `protobuf:"bytes,12,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                              // 农场名称
	WaterInteractionStatus int64  `protobuf:"varint,13,opt,name=water_interaction_status,json=waterInteractionStatus,proto3" json:"water_interaction_status,omitempty"` // 互动浇水状态 0：未任何操作，1：帮他人浇水，2：他人帮自己浇水，3：互相浇水
	CanWaterNum            int64  `protobuf:"varint,14,opt,name=can_water_num,json=canWaterNum,proto3" json:"can_water_num,omitempty"`                                  // 可浇水次数
}

func (x *FriendRankingInfo) Reset() {
	*x = FriendRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRankingInfo) ProtoMessage() {}

func (x *FriendRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRankingInfo.ProtoReflect.Descriptor instead.
func (*FriendRankingInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{48}
}

func (x *FriendRankingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FriendRankingInfo) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

func (x *FriendRankingInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FriendRankingInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *FriendRankingInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *FriendRankingInfo) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *FriendRankingInfo) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *FriendRankingInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *FriendRankingInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FriendRankingInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FriendRankingInfo) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *FriendRankingInfo) GetWaterInteractionStatus() int64 {
	if x != nil {
		return x.WaterInteractionStatus
	}
	return 0
}

func (x *FriendRankingInfo) GetCanWaterNum() int64 {
	if x != nil {
		return x.CanWaterNum
	}
	return 0
}

// *
// 我的排名信息
// 表示当前用户在排名中的详细信息
type MyRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                               // 我的用户ID
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                          // 我的用户名
	AvatarUrl       string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                       // 我的头像URL
	VipLevelId      int64  `protobuf:"varint,4,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                 // 我的VIP等级ID
	VipLevelVal     int64  `protobuf:"varint,5,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`              // 会员等级值
	VipLevelName    string `protobuf:"bytes,6,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`            // 会员等级名称
	Coin            int64  `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`                                                 // 我的金币数量
	Rank            int64  `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`                                                 // 我在好友中的排名位置
	TotalFriends    int64  `protobuf:"varint,9,opt,name=total_friends,json=totalFriends,proto3" json:"total_friends,omitempty"`             // 好友总数
	TotalWaterCount int64  `protobuf:"varint,10,opt,name=total_water_count,json=totalWaterCount,proto3" json:"total_water_count,omitempty"` // 总共浇水次数
	DailyWaterLimit int64  `protobuf:"varint,11,opt,name=daily_water_limit,json=dailyWaterLimit,proto3" json:"daily_water_limit,omitempty"` // 可浇水次数
}

func (x *MyRankingInfo) Reset() {
	*x = MyRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyRankingInfo) ProtoMessage() {}

func (x *MyRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyRankingInfo.ProtoReflect.Descriptor instead.
func (*MyRankingInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{49}
}

func (x *MyRankingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MyRankingInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MyRankingInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *MyRankingInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *MyRankingInfo) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *MyRankingInfo) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *MyRankingInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MyRankingInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MyRankingInfo) GetTotalFriends() int64 {
	if x != nil {
		return x.TotalFriends
	}
	return 0
}

func (x *MyRankingInfo) GetTotalWaterCount() int64 {
	if x != nil {
		return x.TotalWaterCount
	}
	return 0
}

func (x *MyRankingInfo) GetDailyWaterLimit() int64 {
	if x != nil {
		return x.DailyWaterLimit
	}
	return 0
}

// *
// 用户发财树请求
// 展示用户的发财树信息
type UserFortuneTreeInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 请求用户的ID
}

func (x *UserFortuneTreeInfoMsgReq) Reset() {
	*x = UserFortuneTreeInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfoMsgReq) ProtoMessage() {}

func (x *UserFortuneTreeInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{50}
}

func (x *UserFortuneTreeInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户发财树响应
// 包含用户的发财树信息
type UserFortuneTreeInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 发财树唯一标识ID
	UserId             int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户ID，唯一约束保证每个用户只有一棵树
	VipLevelId         int64 `protobuf:"varint,3,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                         // VIP等级ID，影响金币产出和生产周期
	CycleStartTime     int64 `protobuf:"varint,4,opt,name=cycle_start_time,json=cycleStartTime,proto3" json:"cycle_start_time,omitempty"`             // 当前周期开始时间（时间戳，秒）
	IsReadyToHarvest   int32 `protobuf:"varint,5,opt,name=is_ready_to_harvest,json=isReadyToHarvest,proto3" json:"is_ready_to_harvest,omitempty"`     // 是否可以收获标志：1-不可收获，2-可收获
	LastHarvestTime    int64 `protobuf:"varint,6,opt,name=last_harvest_time,json=lastHarvestTime,proto3" json:"last_harvest_time,omitempty"`          // 上次收获时间（时间戳，秒）
	NextHarvestTime    int64 `protobuf:"varint,7,opt,name=next_harvest_time,json=nextHarvestTime,proto3" json:"next_harvest_time,omitempty"`          // 下次可收获时间（时间戳，秒）
	CycleHarvestedIcon int64 `protobuf:"varint,8,opt,name=cycle_harvested_icon,json=cycleHarvestedIcon,proto3" json:"cycle_harvested_icon,omitempty"` // 当前周期可收获的金币
	TotalHarvested     int64 `protobuf:"varint,9,opt,name=total_harvested,json=totalHarvested,proto3" json:"total_harvested,omitempty"`               // 历史总收获金币数量统计
	CreatedAt          int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 发财树创建时间（时间戳，秒）
	UpdatedAt          int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                             // 发财树信息最后更新时间（时间戳，秒）
}

func (x *UserFortuneTreeInfoMsgReply) Reset() {
	*x = UserFortuneTreeInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfoMsgReply) ProtoMessage() {}

func (x *UserFortuneTreeInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{51}
}

func (x *UserFortuneTreeInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCycleStartTime() int64 {
	if x != nil {
		return x.CycleStartTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetIsReadyToHarvest() int32 {
	if x != nil {
		return x.IsReadyToHarvest
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetLastHarvestTime() int64 {
	if x != nil {
		return x.LastHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetNextHarvestTime() int64 {
	if x != nil {
		return x.NextHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCycleHarvestedIcon() int64 {
	if x != nil {
		return x.CycleHarvestedIcon
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetTotalHarvested() int64 {
	if x != nil {
		return x.TotalHarvested
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UserOpsFortuneTreeMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       // 发财树唯一标识ID
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID，唯一约束保证每个用户只有一棵树
}

func (x *UserOpsFortuneTreeMsgReq) Reset() {
	*x = UserOpsFortuneTreeMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOpsFortuneTreeMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOpsFortuneTreeMsgReq) ProtoMessage() {}

func (x *UserOpsFortuneTreeMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOpsFortuneTreeMsgReq.ProtoReflect.Descriptor instead.
func (*UserOpsFortuneTreeMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{52}
}

func (x *UserOpsFortuneTreeMsgReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserOpsFortuneTreeMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserOpsFortuneTreeMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                        // 响应状态码  200 正常
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                           // 响应消息    success 成功
	HarvestedIcon int64  `protobuf:"varint,3,opt,name=harvested_icon,json=harvestedIcon,proto3" json:"harvested_icon,omitempty"` // 收获的金币
}

func (x *UserOpsFortuneTreeMsgReply) Reset() {
	*x = UserOpsFortuneTreeMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOpsFortuneTreeMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOpsFortuneTreeMsgReply) ProtoMessage() {}

func (x *UserOpsFortuneTreeMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOpsFortuneTreeMsgReply.ProtoReflect.Descriptor instead.
func (*UserOpsFortuneTreeMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{53}
}

func (x *UserOpsFortuneTreeMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserOpsFortuneTreeMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserOpsFortuneTreeMsgReply) GetHarvestedIcon() int64 {
	if x != nil {
		return x.HarvestedIcon
	}
	return 0
}

// *
// VIP等级信息请求
// 包含系统中所有VIP等级的配置信息
type VipLevelInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VipLevelInfoMsgReq) Reset() {
	*x = VipLevelInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevelInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevelInfoMsgReq) ProtoMessage() {}

func (x *VipLevelInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevelInfoMsgReq.ProtoReflect.Descriptor instead.
func (*VipLevelInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{54}
}

// *
// VIP等级信息响应
// 包含系统中所有VIP等级的配置信息
type VipLevelInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*VIPLevelInfo `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"` // VIP等级信息列表
}

func (x *VipLevelInfoMsgReply) Reset() {
	*x = VipLevelInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevelInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevelInfoMsgReply) ProtoMessage() {}

func (x *VipLevelInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevelInfoMsgReply.ProtoReflect.Descriptor instead.
func (*VipLevelInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{55}
}

func (x *VipLevelInfoMsgReply) GetRows() []*VIPLevelInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

// *
// VIP等级详细信息
// 表示单个VIP等级的配置和奖励信息
type VIPLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                        // 等级ID
	LevelName                       string `protobuf:"bytes,2,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`                                                                          // 等级名称
	LevelVal                        int64  `protobuf:"varint,3,opt,name=level_val,json=levelVal,proto3" json:"level_val,omitempty"`                                                                            // 等级值
	IsDefaultLevel                  int64  `protobuf:"varint,4,opt,name=is_default_level,json=isDefaultLevel,proto3" json:"is_default_level,omitempty"`                                                        // 是否为默认等级
	GrowthValue                     int64  `protobuf:"varint,5,opt,name=growth_value,json=growthValue,proto3" json:"growth_value,omitempty"`                                                                   // 升级所需成长值
	UpgradeRewardFertilizerNum      int64  `protobuf:"varint,6,opt,name=upgrade_reward_fertilizer_num,json=upgradeRewardFertilizerNum,proto3" json:"upgrade_reward_fertilizer_num,omitempty"`                  // 升级奖励肥料数量
	UpgradeRewardTreeMaturityPeriod int64  `protobuf:"varint,7,opt,name=upgrade_reward_tree_maturity_period,json=upgradeRewardTreeMaturityPeriod,proto3" json:"upgrade_reward_tree_maturity_period,omitempty"` // 升级奖励树木成熟周期 单位小时
	UpgradeRewardTreeNum            int64  `protobuf:"varint,8,opt,name=upgrade_reward_tree_num,json=upgradeRewardTreeNum,proto3" json:"upgrade_reward_tree_num,omitempty"`                                    // 升级奖励树木成熟周期 产生的金币数量
	Remarks                         string `protobuf:"bytes,9,opt,name=remarks,proto3" json:"remarks,omitempty"`                                                                                               // 备注说明
	IsEnabled                       int64  `protobuf:"varint,10,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                                                        // 是否启用
}

func (x *VIPLevelInfo) Reset() {
	*x = VIPLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VIPLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPLevelInfo) ProtoMessage() {}

func (x *VIPLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPLevelInfo.ProtoReflect.Descriptor instead.
func (*VIPLevelInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{56}
}

func (x *VIPLevelInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VIPLevelInfo) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *VIPLevelInfo) GetLevelVal() int64 {
	if x != nil {
		return x.LevelVal
	}
	return 0
}

func (x *VIPLevelInfo) GetIsDefaultLevel() int64 {
	if x != nil {
		return x.IsDefaultLevel
	}
	return 0
}

func (x *VIPLevelInfo) GetGrowthValue() int64 {
	if x != nil {
		return x.GrowthValue
	}
	return 0
}

func (x *VIPLevelInfo) GetUpgradeRewardFertilizerNum() int64 {
	if x != nil {
		return x.UpgradeRewardFertilizerNum
	}
	return 0
}

func (x *VIPLevelInfo) GetUpgradeRewardTreeMaturityPeriod() int64 {
	if x != nil {
		return x.UpgradeRewardTreeMaturityPeriod
	}
	return 0
}

func (x *VIPLevelInfo) GetUpgradeRewardTreeNum() int64 {
	if x != nil {
		return x.UpgradeRewardTreeNum
	}
	return 0
}

func (x *VIPLevelInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *VIPLevelInfo) GetIsEnabled() int64 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

// 获取币商列表请求
type GetMerchantListMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 请求用户的ID
	Page         int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                    // 页码，从1开始
	PageSize     int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 每页数量
	MerchantName string `protobuf:"bytes,4,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"` // 币商名称（可选过滤条件）
}

func (x *GetMerchantListMsgReq) Reset() {
	*x = GetMerchantListMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantListMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantListMsgReq) ProtoMessage() {}

func (x *GetMerchantListMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantListMsgReq.ProtoReflect.Descriptor instead.
func (*GetMerchantListMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{57}
}

func (x *GetMerchantListMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMerchantListMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMerchantListMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMerchantListMsgReq) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

// 获取币商列表响应
type GetMerchantListMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64           `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64           `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64           `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64           `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*MerchantInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 用户排名列表
}

func (x *GetMerchantListMsgReply) Reset() {
	*x = GetMerchantListMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerchantListMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantListMsgReply) ProtoMessage() {}

func (x *GetMerchantListMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantListMsgReply.ProtoReflect.Descriptor instead.
func (*GetMerchantListMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{58}
}

func (x *GetMerchantListMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMerchantListMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMerchantListMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMerchantListMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetMerchantListMsgReply) GetRows() []*MerchantInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 币商信息
type MerchantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 币商ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      // 币商名称
	Logo         string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                      // 币商LOGO
	ExchangeRate int64  `protobuf:"varint,4,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // 汇率(代币->USDT)
	Protocol     string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`                              // 币商协议
	Balance      int64  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`                               // 库存余额(USDT)
}

func (x *MerchantInfo) Reset() {
	*x = MerchantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantInfo) ProtoMessage() {}

func (x *MerchantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantInfo.ProtoReflect.Descriptor instead.
func (*MerchantInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{59}
}

func (x *MerchantInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MerchantInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerchantInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MerchantInfo) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *MerchantInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *MerchantInfo) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 币商汇率请求
type MerchantExchangeRateMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId int64 `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 币商ID
	UserIcon   int64 `protobuf:"varint,2,opt,name=user_icon,json=userIcon,proto3" json:"user_icon,omitempty"`       // 平台金币
	UserId     int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
}

func (x *MerchantExchangeRateMsgReq) Reset() {
	*x = MerchantExchangeRateMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantExchangeRateMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantExchangeRateMsgReq) ProtoMessage() {}

func (x *MerchantExchangeRateMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantExchangeRateMsgReq.ProtoReflect.Descriptor instead.
func (*MerchantExchangeRateMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{60}
}

func (x *MerchantExchangeRateMsgReq) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *MerchantExchangeRateMsgReq) GetUserIcon() int64 {
	if x != nil {
		return x.UserIcon
	}
	return 0
}

func (x *MerchantExchangeRateMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 币商汇率响应
type MerchantExchangeRateMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverUstd   int64 `protobuf:"varint,1,opt,name=cover_ustd,json=coverUstd,proto3" json:"cover_ustd,omitempty"`       // 换成的ustd
	CurrentUstd int64 `protobuf:"varint,2,opt,name=current_ustd,json=currentUstd,proto3" json:"current_ustd,omitempty"` // 总ustd
}

func (x *MerchantExchangeRateMsgReply) Reset() {
	*x = MerchantExchangeRateMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantExchangeRateMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantExchangeRateMsgReply) ProtoMessage() {}

func (x *MerchantExchangeRateMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantExchangeRateMsgReply.ProtoReflect.Descriptor instead.
func (*MerchantExchangeRateMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{61}
}

func (x *MerchantExchangeRateMsgReply) GetCoverUstd() int64 {
	if x != nil {
		return x.CoverUstd
	}
	return 0
}

func (x *MerchantExchangeRateMsgReply) GetCurrentUstd() int64 {
	if x != nil {
		return x.CurrentUstd
	}
	return 0
}

type SubmitForRedemptionMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId int64 `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 币商ID
	UserIcon   int64 `protobuf:"varint,2,opt,name=user_icon,json=userIcon,proto3" json:"user_icon,omitempty"`       // 平台金币
	CoverUstd  int64 `protobuf:"varint,3,opt,name=cover_ustd,json=coverUstd,proto3" json:"cover_ustd,omitempty"`    // 兑换成的ustd
	UserId     int64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
}

func (x *SubmitForRedemptionMsgReq) Reset() {
	*x = SubmitForRedemptionMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitForRedemptionMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitForRedemptionMsgReq) ProtoMessage() {}

func (x *SubmitForRedemptionMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitForRedemptionMsgReq.ProtoReflect.Descriptor instead.
func (*SubmitForRedemptionMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{62}
}

func (x *SubmitForRedemptionMsgReq) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *SubmitForRedemptionMsgReq) GetUserIcon() int64 {
	if x != nil {
		return x.UserIcon
	}
	return 0
}

func (x *SubmitForRedemptionMsgReq) GetCoverUstd() int64 {
	if x != nil {
		return x.CoverUstd
	}
	return 0
}

func (x *SubmitForRedemptionMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SubmitForRedemptionMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *SubmitForRedemptionMsgReply) Reset() {
	*x = SubmitForRedemptionMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitForRedemptionMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitForRedemptionMsgReply) ProtoMessage() {}

func (x *SubmitForRedemptionMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitForRedemptionMsgReply.ProtoReflect.Descriptor instead.
func (*SubmitForRedemptionMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{63}
}

func (x *SubmitForRedemptionMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubmitForRedemptionMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 充值通道列表响应
type RechargeChannelsInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // 用户ID
	PaymentConfigId int64 `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"` // 支付配置ID
}

func (x *RechargeChannelsInfoMsgReq) Reset() {
	*x = RechargeChannelsInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannelsInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannelsInfoMsgReq) ProtoMessage() {}

func (x *RechargeChannelsInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannelsInfoMsgReq.ProtoReflect.Descriptor instead.
func (*RechargeChannelsInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{64}
}

func (x *RechargeChannelsInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RechargeChannelsInfoMsgReq) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

// 充值通道列表响应
type RechargeChannelsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*RechargeChannel `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"` // 充值通道列表
}

func (x *RechargeChannelsInfoMsgReply) Reset() {
	*x = RechargeChannelsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannelsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannelsInfoMsgReply) ProtoMessage() {}

func (x *RechargeChannelsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannelsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*RechargeChannelsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{65}
}

func (x *RechargeChannelsInfoMsgReply) GetRows() []*RechargeChannel {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 充值通道信息
type RechargeChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // 充值通道ID
	PaymentConfigId       int64  `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"`                   // 支付配置ID
	CurrencyCode          string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                               // 币种
	RechargeChannelName   string `protobuf:"bytes,4,opt,name=recharge_channel_name,json=rechargeChannelName,proto3" json:"recharge_channel_name,omitempty"`        // 充值通道名称
	RechargeChannelCode   string `protobuf:"bytes,5,opt,name=recharge_channel_code,json=rechargeChannelCode,proto3" json:"recharge_channel_code,omitempty"`        // 充值通道编码
	RechargeChannelLogo   string `protobuf:"bytes,6,opt,name=recharge_channel_logo,json=rechargeChannelLogo,proto3" json:"recharge_channel_logo,omitempty"`        // 充值通道logo
	RechargeChannelType   int64  `protobuf:"varint,7,opt,name=recharge_channel_type,json=rechargeChannelType,proto3" json:"recharge_channel_type,omitempty"`       // 充值通道类型 1:USDT虚拟货币 2:银行卡 3: 快捷支付
	RechargeMerchantId    int64  `protobuf:"varint,8,opt,name=recharge_merchant_id,json=rechargeMerchantId,proto3" json:"recharge_merchant_id,omitempty"`          // 充值商户ID
	BankId                int64  `protobuf:"varint,9,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                                // 银行ID
	BankName              string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                                          // 银行名称
	BankBranch            string `protobuf:"bytes,11,opt,name=bank_branch,json=bankBranch,proto3" json:"bank_branch,omitempty"`                                    // 银行支行名称
	ReceiveAccount        string `protobuf:"bytes,12,opt,name=receive_account,json=receiveAccount,proto3" json:"receive_account,omitempty"`                        // 收款账号
	ReceiveName           string `protobuf:"bytes,13,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`                                 // 收款人姓名
	Ifsc                  string `protobuf:"bytes,14,opt,name=ifsc,proto3" json:"ifsc,omitempty"`                                                                  // IFSC
	CryptoAddress         string `protobuf:"bytes,15,opt,name=crypto_address,json=cryptoAddress,proto3" json:"crypto_address,omitempty"`                           //  公链地址
	CryptoNetwork         string `protobuf:"bytes,16,opt,name=crypto_network,json=cryptoNetwork,proto3" json:"crypto_network,omitempty"`                           // 公链名称
	MinLimitAmount        int64  `protobuf:"varint,17,opt,name=min_limit_amount,json=minLimitAmount,proto3" json:"min_limit_amount,omitempty"`                     // 单笔充值最小限额
	MaxLimitAmount        int64  `protobuf:"varint,18,opt,name=max_limit_amount,json=maxLimitAmount,proto3" json:"max_limit_amount,omitempty"`                     // 单笔充值最大限额
	RecommendAmountConfig string `protobuf:"bytes,19,opt,name=recommend_amount_config,json=recommendAmountConfig,proto3" json:"recommend_amount_config,omitempty"` // 推荐金额配置
	Hint                  string `protobuf:"bytes,20,opt,name=hint,proto3" json:"hint,omitempty"`                                                                  // 提示语
	ExchangeRate          int64  `protobuf:"varint,21,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                             // 兑换比例 1 USDT 兑换目标货币的汇率 1usdt兑换0.998美元 那么exchange_rate=0.998*1000000
	FixedFee              int64  `protobuf:"varint,22,opt,name=fixed_fee,json=fixedFee,proto3" json:"fixed_fee,omitempty"`                                         // 固定手续费
	PercentageFee         int64  `protobuf:"varint,23,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty"`                          // 百分比手续费 以1000000为单位，例如 20%=0.20=0.20×1,000,000=200,000
}

func (x *RechargeChannel) Reset() {
	*x = RechargeChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannel) ProtoMessage() {}

func (x *RechargeChannel) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannel.ProtoReflect.Descriptor instead.
func (*RechargeChannel) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{66}
}

func (x *RechargeChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RechargeChannel) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

func (x *RechargeChannel) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelName() string {
	if x != nil {
		return x.RechargeChannelName
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelCode() string {
	if x != nil {
		return x.RechargeChannelCode
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelLogo() string {
	if x != nil {
		return x.RechargeChannelLogo
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelType() int64 {
	if x != nil {
		return x.RechargeChannelType
	}
	return 0
}

func (x *RechargeChannel) GetRechargeMerchantId() int64 {
	if x != nil {
		return x.RechargeMerchantId
	}
	return 0
}

func (x *RechargeChannel) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *RechargeChannel) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *RechargeChannel) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *RechargeChannel) GetReceiveAccount() string {
	if x != nil {
		return x.ReceiveAccount
	}
	return ""
}

func (x *RechargeChannel) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *RechargeChannel) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

func (x *RechargeChannel) GetCryptoAddress() string {
	if x != nil {
		return x.CryptoAddress
	}
	return ""
}

func (x *RechargeChannel) GetCryptoNetwork() string {
	if x != nil {
		return x.CryptoNetwork
	}
	return ""
}

func (x *RechargeChannel) GetMinLimitAmount() int64 {
	if x != nil {
		return x.MinLimitAmount
	}
	return 0
}

func (x *RechargeChannel) GetMaxLimitAmount() int64 {
	if x != nil {
		return x.MaxLimitAmount
	}
	return 0
}

func (x *RechargeChannel) GetRecommendAmountConfig() string {
	if x != nil {
		return x.RecommendAmountConfig
	}
	return ""
}

func (x *RechargeChannel) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *RechargeChannel) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *RechargeChannel) GetFixedFee() int64 {
	if x != nil {
		return x.FixedFee
	}
	return 0
}

func (x *RechargeChannel) GetPercentageFee() int64 {
	if x != nil {
		return x.PercentageFee
	}
	return 0
}

type UserRechargeInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	RechargeChannelId int64  `protobuf:"varint,2,opt,name=recharge_channel_id,json=rechargeChannelId,proto3" json:"recharge_channel_id,omitempty"` // 充值通道id
	Amount            int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                  // 充值金额(金额*1000000)
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	ExchangeRate      int64  `protobuf:"varint,5,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                  // USDT兑换比例（1u=>多少指定货币）
}

func (x *UserRechargeInfoMsgReq) Reset() {
	*x = UserRechargeInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeInfoMsgReq) ProtoMessage() {}

func (x *UserRechargeInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserRechargeInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{67}
}

func (x *UserRechargeInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetRechargeChannelId() int64 {
	if x != nil {
		return x.RechargeChannelId
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserRechargeInfoMsgReq) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

type UserRechargeInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                    // 响应状态码  200 正常
	Msg          string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                       // 响应消息    success 成功
	PayUrl       string        `protobuf:"bytes,3,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"`                   // 支付URL  银行卡充值 返回的是空
	RechargeInfo *RechargeInfo `protobuf:"bytes,4,opt,name=recharge_info,json=rechargeInfo,proto3" json:"recharge_info,omitempty"` // 充值信息
}

func (x *UserRechargeInfoMsgReply) Reset() {
	*x = UserRechargeInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeInfoMsgReply) ProtoMessage() {}

func (x *UserRechargeInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserRechargeInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{68}
}

func (x *UserRechargeInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRechargeInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRechargeInfoMsgReply) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *UserRechargeInfoMsgReply) GetRechargeInfo() *RechargeInfo {
	if x != nil {
		return x.RechargeInfo
	}
	return nil
}

type RechargeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber    string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`           // 订单号
	OrderTime      int64  `protobuf:"varint,2,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`                // 订单时间
	PaymentAmount  int64  `protobuf:"varint,3,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`    // 付款金额
	ReceivedAmount int64  `protobuf:"varint,4,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"` // 接收金额
	CardName       string `protobuf:"bytes,5,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`                    // 银行卡名称
	AccountName    string `protobuf:"bytes,6,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`           // 账户名称
	CardNumber     string `protobuf:"bytes,7,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`              // 银行卡号
	OrderStatus    int64  `protobuf:"varint,8,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`          // 订单状态 1 待支付 2 支付成功 3 支付超时 4 支付失败 5 补单审核中 6 二次审核中 7 待审核 8 已取消
}

func (x *RechargeInfo) Reset() {
	*x = RechargeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeInfo) ProtoMessage() {}

func (x *RechargeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeInfo.ProtoReflect.Descriptor instead.
func (*RechargeInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{69}
}

func (x *RechargeInfo) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *RechargeInfo) GetOrderTime() int64 {
	if x != nil {
		return x.OrderTime
	}
	return 0
}

func (x *RechargeInfo) GetPaymentAmount() int64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *RechargeInfo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *RechargeInfo) GetCardName() string {
	if x != nil {
		return x.CardName
	}
	return ""
}

func (x *RechargeInfo) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RechargeInfo) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *RechargeInfo) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

type UserRechargeConfirmMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	OrderNumber     string `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`             // 订单号
	TransferVoucher string `protobuf:"bytes,3,opt,name=transfer_voucher,json=transferVoucher,proto3" json:"transfer_voucher,omitempty"` // 转账凭证（上传图片后使用半路径请求）
	RealName        string `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                      // 用户备注姓名
	FrontRemark     string `protobuf:"bytes,5,opt,name=front_remark,json=frontRemark,proto3" json:"front_remark,omitempty"`             // 用户备注
}

func (x *UserRechargeConfirmMsgReq) Reset() {
	*x = UserRechargeConfirmMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeConfirmMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeConfirmMsgReq) ProtoMessage() {}

func (x *UserRechargeConfirmMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeConfirmMsgReq.ProtoReflect.Descriptor instead.
func (*UserRechargeConfirmMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{70}
}

func (x *UserRechargeConfirmMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRechargeConfirmMsgReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *UserRechargeConfirmMsgReq) GetTransferVoucher() string {
	if x != nil {
		return x.TransferVoucher
	}
	return ""
}

func (x *UserRechargeConfirmMsgReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserRechargeConfirmMsgReq) GetFrontRemark() string {
	if x != nil {
		return x.FrontRemark
	}
	return ""
}

type UserRechargeConfirmMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                    // 响应状态码  200 正常
	Msg          string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                       // 响应消息    success 成功
	RechargeInfo *RechargeInfo `protobuf:"bytes,4,opt,name=recharge_info,json=rechargeInfo,proto3" json:"recharge_info,omitempty"` // 充值信息
}

func (x *UserRechargeConfirmMsgReply) Reset() {
	*x = UserRechargeConfirmMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeConfirmMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeConfirmMsgReply) ProtoMessage() {}

func (x *UserRechargeConfirmMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeConfirmMsgReply.ProtoReflect.Descriptor instead.
func (*UserRechargeConfirmMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{71}
}

func (x *UserRechargeConfirmMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRechargeConfirmMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRechargeConfirmMsgReply) GetRechargeInfo() *RechargeInfo {
	if x != nil {
		return x.RechargeInfo
	}
	return nil
}

type UserWithdrawInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	Amount            int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                  // 提现金额(金额*1000000)
	WithdrawId        int64  `protobuf:"varint,3,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty"`                        //提现账号id
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	WithdrawChannelId int64  `protobuf:"varint,5,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"` // 提现通道id
	Remark            string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
}

func (x *UserWithdrawInfoMsgReq) Reset() {
	*x = UserWithdrawInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawInfoMsgReq) ProtoMessage() {}

func (x *UserWithdrawInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserWithdrawInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{72}
}

func (x *UserWithdrawInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetWithdrawId() int64 {
	if x != nil {
		return x.WithdrawId
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserWithdrawInfoMsgReq) GetWithdrawChannelId() int64 {
	if x != nil {
		return x.WithdrawChannelId
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type UserWithdrawInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                    // 响应状态码  200 正常
	Msg          string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                       // 响应消息    success 成功
	WithdrawInfo *WithdrawInfo `protobuf:"bytes,4,opt,name=withdraw_info,json=withdrawInfo,proto3" json:"withdraw_info,omitempty"` // 提现信息
}

func (x *UserWithdrawInfoMsgReply) Reset() {
	*x = UserWithdrawInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawInfoMsgReply) ProtoMessage() {}

func (x *UserWithdrawInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserWithdrawInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{73}
}

func (x *UserWithdrawInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserWithdrawInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserWithdrawInfoMsgReply) GetWithdrawInfo() *WithdrawInfo {
	if x != nil {
		return x.WithdrawInfo
	}
	return nil
}

type WithdrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber    string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`           // 订单号
	OrderTime      int64  `protobuf:"varint,2,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`                // 订单时间
	PaymentAmount  int64  `protobuf:"varint,3,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`    // 提现金额
	ReceivedAmount int64  `protobuf:"varint,4,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"` // 实际金额
	CardName       string `protobuf:"bytes,5,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`                    // 银行卡名称
	AccountName    string `protobuf:"bytes,6,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`           // 账户名称
	CardNumber     string `protobuf:"bytes,7,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`              // 银行卡号
	FeeAmount      int64  `protobuf:"varint,8,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`                // 手续费
	OrderStatus    int64  `protobuf:"varint,9,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`          // 订单状态 1 - 待出款 2-待风控审核  3 - 待三方付款  4 - 付款失败 5 - 付款失败 6 - 已取消  7 - 已付款  8 - 已强制付款
}

func (x *WithdrawInfo) Reset() {
	*x = WithdrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawInfo) ProtoMessage() {}

func (x *WithdrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawInfo.ProtoReflect.Descriptor instead.
func (*WithdrawInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{74}
}

func (x *WithdrawInfo) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *WithdrawInfo) GetOrderTime() int64 {
	if x != nil {
		return x.OrderTime
	}
	return 0
}

func (x *WithdrawInfo) GetPaymentAmount() int64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *WithdrawInfo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *WithdrawInfo) GetCardName() string {
	if x != nil {
		return x.CardName
	}
	return ""
}

func (x *WithdrawInfo) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *WithdrawInfo) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *WithdrawInfo) GetFeeAmount() int64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *WithdrawInfo) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

type UserWithdrawAccountInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *UserWithdrawAccountInfoMsgReq) Reset() {
	*x = UserWithdrawAccountInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawAccountInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawAccountInfoMsgReq) ProtoMessage() {}

func (x *UserWithdrawAccountInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawAccountInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserWithdrawAccountInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{75}
}

func (x *UserWithdrawAccountInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserWithdrawAccountInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*WithdrawAccount `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"` // 提现通道列表
}

func (x *UserWithdrawAccountInfoMsgReply) Reset() {
	*x = UserWithdrawAccountInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawAccountInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawAccountInfoMsgReply) ProtoMessage() {}

func (x *UserWithdrawAccountInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawAccountInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserWithdrawAccountInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{76}
}

func (x *UserWithdrawAccountInfoMsgReply) GetRows() []*WithdrawAccount {
	if x != nil {
		return x.Rows
	}
	return nil
}

type WithdrawAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // 主键
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种编码
	BankId       int64  `protobuf:"varint,4,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                  // 银行ID
	Account      string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                               // 提现账号/地址
	RealName     string `protobuf:"bytes,6,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`             // 真实姓名
	Identity     string `protobuf:"bytes,7,opt,name=identity,proto3" json:"identity,omitempty"`                             // 身份证号/证件号
	AccountType  int64  `protobuf:"varint,8,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`   // 账号类型：1手机号，2银行卡，3PIX，4电子钱包
	CountryCode  string `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`    // 国家/地区编码
	Ifsc         string `protobuf:"bytes,10,opt,name=ifsc,proto3" json:"ifsc,omitempty"`                                    // 开户行/IFSC
	Branch       string `protobuf:"bytes,11,opt,name=branch,proto3" json:"branch,omitempty"`                                // 支行名称
	IsDefault    int64  `protobuf:"varint,12,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`        // 是否默认账户：1是，2否
	Remark       string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
}

func (x *WithdrawAccount) Reset() {
	*x = WithdrawAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawAccount) ProtoMessage() {}

func (x *WithdrawAccount) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawAccount.ProtoReflect.Descriptor instead.
func (*WithdrawAccount) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{77}
}

func (x *WithdrawAccount) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithdrawAccount) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WithdrawAccount) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WithdrawAccount) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *WithdrawAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *WithdrawAccount) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *WithdrawAccount) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *WithdrawAccount) GetAccountType() int64 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *WithdrawAccount) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *WithdrawAccount) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

func (x *WithdrawAccount) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *WithdrawAccount) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *WithdrawAccount) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 提现通道信息
type WithdrawChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // 提现通道ID
	PaymentConfigId       int64  `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"`                   // 支付配置ID
	CurrencyCode          string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                               // 币种
	WithdrawChannelName   string `protobuf:"bytes,4,opt,name=withdraw_channel_name,json=withdrawChannelName,proto3" json:"withdraw_channel_name,omitempty"`        // 提现通道名称
	WithdrawChannelCode   string `protobuf:"bytes,5,opt,name=withdraw_channel_code,json=withdrawChannelCode,proto3" json:"withdraw_channel_code,omitempty"`        // 提现通道编码
	WithdrawChannelLogo   string `protobuf:"bytes,6,opt,name=withdraw_channel_logo,json=withdrawChannelLogo,proto3" json:"withdraw_channel_logo,omitempty"`        // 提现通道logo
	WithdrawChannelType   int64  `protobuf:"varint,7,opt,name=withdraw_channel_type,json=withdrawChannelType,proto3" json:"withdraw_channel_type,omitempty"`       // 提现通道类型 1:USDT虚拟货币 2:银行卡 3: 快捷支付
	WithdrawMerchantId    int64  `protobuf:"varint,8,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"`          // 提现商户ID
	BankId                int64  `protobuf:"varint,9,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                                // 银行ID
	BankName              string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                                          // 银行名称
	BankBranch            string `protobuf:"bytes,11,opt,name=bank_branch,json=bankBranch,proto3" json:"bank_branch,omitempty"`                                    // 银行支行名称
	BankAccount           string `protobuf:"bytes,12,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`                                 // 银行账号
	BankAccountName       string `protobuf:"bytes,13,opt,name=bank_account_name,json=bankAccountName,proto3" json:"bank_account_name,omitempty"`                   // 账户名
	CryptoAddress         string `protobuf:"bytes,15,opt,name=crypto_address,json=cryptoAddress,proto3" json:"crypto_address,omitempty"`                           //  公链地址
	CryptoNetwork         string `protobuf:"bytes,16,opt,name=crypto_network,json=cryptoNetwork,proto3" json:"crypto_network,omitempty"`                           // 公链名称
	MinLimitAmount        int64  `protobuf:"varint,17,opt,name=min_limit_amount,json=minLimitAmount,proto3" json:"min_limit_amount,omitempty"`                     // 单笔充值最小限额
	MaxLimitAmount        int64  `protobuf:"varint,18,opt,name=max_limit_amount,json=maxLimitAmount,proto3" json:"max_limit_amount,omitempty"`                     // 单笔充值最大限额
	RecommendAmountConfig string `protobuf:"bytes,19,opt,name=recommend_amount_config,json=recommendAmountConfig,proto3" json:"recommend_amount_config,omitempty"` // 推荐金额配置
	Hint                  string `protobuf:"bytes,20,opt,name=hint,proto3" json:"hint,omitempty"`                                                                  // 提示语
	ExchangeRate          int64  `protobuf:"varint,21,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                             // 兑换比例 1 USDT 兑换目标货币的汇率 1usdt兑换0.998美元 那么exchange_rate=0.998*1000000
	FixedFee              int64  `protobuf:"varint,22,opt,name=fixed_fee,json=fixedFee,proto3" json:"fixed_fee,omitempty"`                                         // 固定手续费
	PercentageFee         int64  `protobuf:"varint,23,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty"`                          // 百分比手续费 以1000000为单位，例如 20%=0.20=0.20×1,000,000=200,000
}

func (x *WithdrawChannel) Reset() {
	*x = WithdrawChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawChannel) ProtoMessage() {}

func (x *WithdrawChannel) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawChannel.ProtoReflect.Descriptor instead.
func (*WithdrawChannel) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{78}
}

func (x *WithdrawChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithdrawChannel) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

func (x *WithdrawChannel) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelName() string {
	if x != nil {
		return x.WithdrawChannelName
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelCode() string {
	if x != nil {
		return x.WithdrawChannelCode
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelLogo() string {
	if x != nil {
		return x.WithdrawChannelLogo
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelType() int64 {
	if x != nil {
		return x.WithdrawChannelType
	}
	return 0
}

func (x *WithdrawChannel) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *WithdrawChannel) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *WithdrawChannel) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *WithdrawChannel) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *WithdrawChannel) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *WithdrawChannel) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *WithdrawChannel) GetCryptoAddress() string {
	if x != nil {
		return x.CryptoAddress
	}
	return ""
}

func (x *WithdrawChannel) GetCryptoNetwork() string {
	if x != nil {
		return x.CryptoNetwork
	}
	return ""
}

func (x *WithdrawChannel) GetMinLimitAmount() int64 {
	if x != nil {
		return x.MinLimitAmount
	}
	return 0
}

func (x *WithdrawChannel) GetMaxLimitAmount() int64 {
	if x != nil {
		return x.MaxLimitAmount
	}
	return 0
}

func (x *WithdrawChannel) GetRecommendAmountConfig() string {
	if x != nil {
		return x.RecommendAmountConfig
	}
	return ""
}

func (x *WithdrawChannel) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *WithdrawChannel) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *WithdrawChannel) GetFixedFee() int64 {
	if x != nil {
		return x.FixedFee
	}
	return 0
}

func (x *WithdrawChannel) GetPercentageFee() int64 {
	if x != nil {
		return x.PercentageFee
	}
	return 0
}

type UserSetWithdrawChannelMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	AccountType       int64  `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`                  // 账号类型 1:手机号 2:银行卡 3:PIX 4:电子钱包
	BankId            int64  `protobuf:"varint,3,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                 // 银行卡ID
	RealName          string `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                            //  银行账户名---公链网络
	Account           string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                                              //  银行账号---公链地址
	IsDefault         int64  `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                        //  是否默认账户 1:是 2:否
	OperateType       int64  `protobuf:"varint,7,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`                  // 操作类型，必填 1:新增 2:修改 3:删除
	Remark            string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                                                // 备注
	SecondaryPassword string `protobuf:"bytes,9,opt,name=secondary_password,json=secondaryPassword,proto3" json:"secondary_password,omitempty"` // 验证二级密码
	WithdrawId        int64  `protobuf:"varint,10,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty"`                    //提现账号ID
}

func (x *UserSetWithdrawChannelMsgReq) Reset() {
	*x = UserSetWithdrawChannelMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetWithdrawChannelMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetWithdrawChannelMsgReq) ProtoMessage() {}

func (x *UserSetWithdrawChannelMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetWithdrawChannelMsgReq.ProtoReflect.Descriptor instead.
func (*UserSetWithdrawChannelMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{79}
}

func (x *UserSetWithdrawChannelMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetAccountType() int64 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetOperateType() int64 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetWithdrawId() int64 {
	if x != nil {
		return x.WithdrawId
	}
	return 0
}

type UserSetWithdrawChannelMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserSetWithdrawChannelMsgReply) Reset() {
	*x = UserSetWithdrawChannelMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetWithdrawChannelMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetWithdrawChannelMsgReply) ProtoMessage() {}

func (x *UserSetWithdrawChannelMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetWithdrawChannelMsgReply.ProtoReflect.Descriptor instead.
func (*UserSetWithdrawChannelMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{80}
}

func (x *UserSetWithdrawChannelMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetBankListInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户身份验证令牌，必填
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种编码
}

func (x *GetBankListInfoMsgReq) Reset() {
	*x = GetBankListInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListInfoMsgReq) ProtoMessage() {}

func (x *GetBankListInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListInfoMsgReq.ProtoReflect.Descriptor instead.
func (*GetBankListInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{81}
}

func (x *GetBankListInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBankListInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetBankListInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*BankConfig `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetBankListInfoMsgReply) Reset() {
	*x = GetBankListInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListInfoMsgReply) ProtoMessage() {}

func (x *GetBankListInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListInfoMsgReply.ProtoReflect.Descriptor instead.
func (*GetBankListInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{82}
}

func (x *GetBankListInfoMsgReply) GetRows() []*BankConfig {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 银行信息
type BankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 主键
	CountryCode  string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`      // 国家/地区代码
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`   // 币种
	BankName     string `protobuf:"bytes,5,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`               // 银行名称
	BankShowName string `protobuf:"bytes,6,opt,name=bank_show_name,json=bankShowName,proto3" json:"bank_show_name,omitempty"` // 银行显示名称
	BankIcon     string `protobuf:"bytes,7,opt,name=bank_icon,json=bankIcon,proto3" json:"bank_icon,omitempty"`               // 银行图标
	Fee          int64  `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`                                        // 手续费
	Description  string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`                         // 银行描述
	Code         string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`                                      // 银行编码
}

func (x *BankConfig) Reset() {
	*x = BankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankConfig) ProtoMessage() {}

func (x *BankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankConfig.ProtoReflect.Descriptor instead.
func (*BankConfig) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{83}
}

func (x *BankConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *BankConfig) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *BankConfig) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BankConfig) GetBankShowName() string {
	if x != nil {
		return x.BankShowName
	}
	return ""
}

func (x *BankConfig) GetBankIcon() string {
	if x != nil {
		return x.BankIcon
	}
	return ""
}

func (x *BankConfig) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BankConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BankConfig) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPaymentConfListMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户身份验证令牌，必填
	CurrencyCode      string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种编码
	PaymentConfigType int64  `protobuf:"varint,3,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 支付配置类型 1: 充值 2: 提现
}

func (x *GetPaymentConfListMsgReq) Reset() {
	*x = GetPaymentConfListMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentConfListMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentConfListMsgReq) ProtoMessage() {}

func (x *GetPaymentConfListMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentConfListMsgReq.ProtoReflect.Descriptor instead.
func (*GetPaymentConfListMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{84}
}

func (x *GetPaymentConfListMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPaymentConfListMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetPaymentConfListMsgReq) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

type GetPaymentConfListMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*PaymentConfInfo `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetPaymentConfListMsgReply) Reset() {
	*x = GetPaymentConfListMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentConfListMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentConfListMsgReply) ProtoMessage() {}

func (x *GetPaymentConfListMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentConfListMsgReply.ProtoReflect.Descriptor instead.
func (*GetPaymentConfListMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{85}
}

func (x *GetPaymentConfListMsgReply) GetRows() []*PaymentConfInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type PaymentConfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentConfigType int64              `protobuf:"varint,2,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 存款方式渠道类型，1:USDT虚拟货币  2:银行卡  3:快捷支付
	Name              string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                       // 名称
	CurrencyCode      string             `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	LogoUrl           string             `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                  // 图标
	ExchangeRate      int64              `protobuf:"varint,6,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                  // 兑换比例 1 USDT 兑换目标货币的汇率 1usdt兑换0.998美元 那么exchange_rate=0.998*1000000
	RechargeChannel   []*RechargeChannel `protobuf:"bytes,7,rep,name=recharge_channel,json=rechargeChannel,proto3" json:"recharge_channel,omitempty"`          // 充值通道列表
	WithdrawChannel   []*WithdrawChannel `protobuf:"bytes,8,rep,name=withdraw_channel,json=withdrawChannel,proto3" json:"withdraw_channel,omitempty"`          // 提现通道列表
}

func (x *PaymentConfInfo) Reset() {
	*x = PaymentConfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentConfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentConfInfo) ProtoMessage() {}

func (x *PaymentConfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentConfInfo.ProtoReflect.Descriptor instead.
func (*PaymentConfInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{86}
}

func (x *PaymentConfInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentConfInfo) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

func (x *PaymentConfInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentConfInfo) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PaymentConfInfo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PaymentConfInfo) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *PaymentConfInfo) GetRechargeChannel() []*RechargeChannel {
	if x != nil {
		return x.RechargeChannel
	}
	return nil
}

func (x *PaymentConfInfo) GetWithdrawChannel() []*WithdrawChannel {
	if x != nil {
		return x.WithdrawChannel
	}
	return nil
}

type GetPendingOrderMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	PaymentConfigType int64 `protobuf:"varint,2,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 支付配置类型 1: 充值 2: 提现
	Page              int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize          int64 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetPendingOrderMsgReq) Reset() {
	*x = GetPendingOrderMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingOrderMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingOrderMsgReq) ProtoMessage() {}

func (x *GetPendingOrderMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingOrderMsgReq.ProtoReflect.Descriptor instead.
func (*GetPendingOrderMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{87}
}

func (x *GetPendingOrderMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPendingOrderMsgReq) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

func (x *GetPendingOrderMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPendingOrderMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 响应
type GetPendingOrderMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64        `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*OrderInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 通用订单信息
}

func (x *GetPendingOrderMsgReply) Reset() {
	*x = GetPendingOrderMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingOrderMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingOrderMsgReply) ProtoMessage() {}

func (x *GetPendingOrderMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingOrderMsgReply.ProtoReflect.Descriptor instead.
func (*GetPendingOrderMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{88}
}

func (x *GetPendingOrderMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPendingOrderMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPendingOrderMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPendingOrderMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetPendingOrderMsgReply) GetRows() []*OrderInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 通用订单结构
type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber       string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	UserId            int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyCode      string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PaymentAmount     int64  `protobuf:"varint,4,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`                // 付款金额
	ReceivedAmount    int64  `protobuf:"varint,5,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`             // 接收金额
	OrderTime         int64  `protobuf:"varint,6,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`                            // 订单时间
	SuccessTime       int64  `protobuf:"varint,7,opt,name=success_time,json=successTime,proto3" json:"success_time,omitempty"`                      // 成功时间
	PaymentMethod     int64  `protobuf:"varint,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`                // 支付方式  1:USDT虚拟货币 2:银行卡 3: 快捷支付
	Status            int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                                   // 订单状态
	CardName          string `protobuf:"bytes,10,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`                               // 银行卡名称
	AccountName       string `protobuf:"bytes,11,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`                      // 账户名称
	CardNumber        string `protobuf:"bytes,12,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`                         // 银行卡号
	TransferVoucher   string `protobuf:"bytes,13,opt,name=transfer_voucher,json=transferVoucher,proto3" json:"transfer_voucher,omitempty"`          // 转账凭证
	PaymentConfigType int64  `protobuf:"varint,14,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 支付配置类型 1: 充值 2: 提现
	ChannelId         int64  `protobuf:"varint,15,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                           // 渠道ID
	BankId            int64  `protobuf:"varint,16,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                    // 银行ID
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{89}
}

func (x *OrderInfo) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *OrderInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderInfo) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *OrderInfo) GetPaymentAmount() int64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *OrderInfo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *OrderInfo) GetOrderTime() int64 {
	if x != nil {
		return x.OrderTime
	}
	return 0
}

func (x *OrderInfo) GetSuccessTime() int64 {
	if x != nil {
		return x.SuccessTime
	}
	return 0
}

func (x *OrderInfo) GetPaymentMethod() int64 {
	if x != nil {
		return x.PaymentMethod
	}
	return 0
}

func (x *OrderInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderInfo) GetCardName() string {
	if x != nil {
		return x.CardName
	}
	return ""
}

func (x *OrderInfo) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *OrderInfo) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *OrderInfo) GetTransferVoucher() string {
	if x != nil {
		return x.TransferVoucher
	}
	return ""
}

func (x *OrderInfo) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

func (x *OrderInfo) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *OrderInfo) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

// =========================================
// 通知相关消息
// =========================================
// UserNotification 用户通知结构---公告信息body
// UserNotification represents user notification structure USER_NOTIFICATION_INFO_MSG
type UserNotificationInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*UserNotificationInfo `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UserNotificationInfoMsgReply) Reset() {
	*x = UserNotificationInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNotificationInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationInfoMsgReply) ProtoMessage() {}

func (x *UserNotificationInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserNotificationInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{90}
}

func (x *UserNotificationInfoMsgReply) GetRows() []*UserNotificationInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type UserNotificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64               `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                          // 用户ID | User ID
	Type      NotificationType    `protobuf:"varint,2,opt,name=type,proto3,enum=mqtt.v1.NotificationType" json:"type,omitempty"`                                                              // 通知类型 | Notification type
	SubType   NotificationSubType `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3,enum=mqtt.v1.NotificationSubType" json:"sub_type,omitempty"`                                      // 通知子类型 | Notification subtype
	Title     string              `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                                                                           // 通知标题 | Notification title
	Content   string              `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                                                                       // 通知内容 | Notification content
	Params    map[string]string   `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 通知参数 | Notification parameters
	CreatedAt int64               `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                 // 创建时间 | Creation timestamp
}

func (x *UserNotificationInfo) Reset() {
	*x = UserNotificationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationInfo) ProtoMessage() {}

func (x *UserNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationInfo.ProtoReflect.Descriptor instead.
func (*UserNotificationInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{91}
}

func (x *UserNotificationInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserNotificationInfo) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *UserNotificationInfo) GetSubType() NotificationSubType {
	if x != nil {
		return x.SubType
	}
	return NotificationSubType_NOTIFICATION_SUB_TYPE_UNSPECIFIED
}

func (x *UserNotificationInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserNotificationInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserNotificationInfo) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UserNotificationInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// UserNotification 用户通知用户余额变动结构
type UserBalanceInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 主键ID
	WalletType    WalletType `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=mqtt.v1.WalletType" json:"wallet_type,omitempty"` // 钱包类型
	UserId        int64      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                     // 用户ID
	Balance       int64      `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`                                                 // 可用余额
	LockedBalance int64      `protobuf:"varint,5,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`                // 锁定余额（如提现中等）
}

func (x *UserBalanceInfoMsgReply) Reset() {
	*x = UserBalanceInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBalanceInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalanceInfoMsgReply) ProtoMessage() {}

func (x *UserBalanceInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalanceInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserBalanceInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{92}
}

func (x *UserBalanceInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBalanceInfoMsgReply) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *UserBalanceInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBalanceInfoMsgReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserBalanceInfoMsgReply) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

// UserLandStatusInfoMsgReply 用户通知用户土地变动结构
type UserLandStatusInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                           // 用户ID
	LandId       int64         `protobuf:"varint,2,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                                           // 土地ID
	LandStatus   int64         `protobuf:"varint,3,opt,name=land_status,json=landStatus,proto3" json:"land_status,omitempty"`                               // 土地状态
	LandPosition int64         `protobuf:"varint,4,opt,name=land_position,json=landPosition,proto3" json:"land_position,omitempty"`                         // 土地坐标
	PlantId      int64         `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                                        // 种植ID
	IsHarvested  HarvestStatus `protobuf:"varint,6,opt,name=is_harvested,json=isHarvested,proto3,enum=mqtt.v1.HarvestStatus" json:"is_harvested,omitempty"` // 是否已收获
	HarvestedAt  int64         `protobuf:"varint,7,opt,name=harvested_at,json=harvestedAt,proto3" json:"harvested_at,omitempty"`                            // 收获时间（Unix时间戳）
	CoinsEarned  int64         `protobuf:"varint,8,opt,name=coins_earned,json=coinsEarned,proto3" json:"coins_earned,omitempty"`                            // 作物产生的金币数量
	Status       GrowthStatus  `protobuf:"varint,9,opt,name=status,proto3,enum=mqtt.v1.GrowthStatus" json:"status,omitempty"`                               // 生长状态
}

func (x *UserLandStatusInfoMsgReply) Reset() {
	*x = UserLandStatusInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandStatusInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandStatusInfoMsgReply) ProtoMessage() {}

func (x *UserLandStatusInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandStatusInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserLandStatusInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{93}
}

func (x *UserLandStatusInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetLandStatus() int64 {
	if x != nil {
		return x.LandStatus
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetLandPosition() int64 {
	if x != nil {
		return x.LandPosition
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetIsHarvested() HarvestStatus {
	if x != nil {
		return x.IsHarvested
	}
	return HarvestStatus_HARVEST_STATUS_UNSPECIFIED
}

func (x *UserLandStatusInfoMsgReply) GetHarvestedAt() int64 {
	if x != nil {
		return x.HarvestedAt
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetCoinsEarned() int64 {
	if x != nil {
		return x.CoinsEarned
	}
	return 0
}

func (x *UserLandStatusInfoMsgReply) GetStatus() GrowthStatus {
	if x != nil {
		return x.Status
	}
	return GrowthStatus_GROWTH_STATUS_UNSPECIFIED
}

// UserFortuneTreeStatusMsgReply 通知用户发财树变动结构
type UserFortuneTreeStatusMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                              // 用户ID
	IsReadyToHarvest   HarvestStatus `protobuf:"varint,6,opt,name=is_ready_to_harvest,json=isReadyToHarvest,proto3,enum=mqtt.v1.HarvestStatus" json:"is_ready_to_harvest,omitempty"` // 是否可收获
	CycleHarvestedIcon int64         `protobuf:"varint,7,opt,name=cycle_harvested_icon,json=cycleHarvestedIcon,proto3" json:"cycle_harvested_icon,omitempty"`                        // 可产生的金币数量
	NextHarvestTime    int64         `protobuf:"varint,8,opt,name=next_harvest_time,json=nextHarvestTime,proto3" json:"next_harvest_time,omitempty"`                                 //  下次收获时间（Unix时间戳）
}

func (x *UserFortuneTreeStatusMsgReply) Reset() {
	*x = UserFortuneTreeStatusMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeStatusMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeStatusMsgReply) ProtoMessage() {}

func (x *UserFortuneTreeStatusMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeStatusMsgReply.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeStatusMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{94}
}

func (x *UserFortuneTreeStatusMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFortuneTreeStatusMsgReply) GetIsReadyToHarvest() HarvestStatus {
	if x != nil {
		return x.IsReadyToHarvest
	}
	return HarvestStatus_HARVEST_STATUS_UNSPECIFIED
}

func (x *UserFortuneTreeStatusMsgReply) GetCycleHarvestedIcon() int64 {
	if x != nil {
		return x.CycleHarvestedIcon
	}
	return 0
}

func (x *UserFortuneTreeStatusMsgReply) GetNextHarvestTime() int64 {
	if x != nil {
		return x.NextHarvestTime
	}
	return 0
}

// UserLandCropCanOpsInfoMsgReply 用户通知用户土地可操作消息
type UserLandCropCanOpsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	LandId            int64  `protobuf:"varint,2,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                                    // 土地ID
	LandStatus        int64  `protobuf:"varint,3,opt,name=land_status,json=landStatus,proto3" json:"land_status,omitempty"`                        // 土地状态
	LandPosition      int64  `protobuf:"varint,4,opt,name=land_position,json=landPosition,proto3" json:"land_position,omitempty"`                  // 土地坐标
	PlantId           int64  `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                                 // 种植ID
	CropCanHarvest    string `protobuf:"bytes,10,opt,name=crop_can_harvest,json=cropCanHarvest,proto3" json:"crop_can_harvest,omitempty"`          // 农作物待收获 (为空就是不展示)
	SeedWaitPlant     string `protobuf:"bytes,11,opt,name=seed_wait_plant,json=seedWaitPlant,proto3" json:"seed_wait_plant,omitempty"`             // 种子待种植 (为空就是不展示)
	CropNeedFertilize string `protobuf:"bytes,12,opt,name=crop_need_fertilize,json=cropNeedFertilize,proto3" json:"crop_need_fertilize,omitempty"` // 农作物待施肥 (为空就是不展示)
	CropNeedWater     string `protobuf:"bytes,13,opt,name=crop_need_water,json=cropNeedWater,proto3" json:"crop_need_water,omitempty"`             // 农作物待浇水 (为空就是不展示)
}

func (x *UserLandCropCanOpsInfoMsgReply) Reset() {
	*x = UserLandCropCanOpsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandCropCanOpsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandCropCanOpsInfoMsgReply) ProtoMessage() {}

func (x *UserLandCropCanOpsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandCropCanOpsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserLandCropCanOpsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{95}
}

func (x *UserLandCropCanOpsInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandCropCanOpsInfoMsgReply) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserLandCropCanOpsInfoMsgReply) GetLandStatus() int64 {
	if x != nil {
		return x.LandStatus
	}
	return 0
}

func (x *UserLandCropCanOpsInfoMsgReply) GetLandPosition() int64 {
	if x != nil {
		return x.LandPosition
	}
	return 0
}

func (x *UserLandCropCanOpsInfoMsgReply) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserLandCropCanOpsInfoMsgReply) GetCropCanHarvest() string {
	if x != nil {
		return x.CropCanHarvest
	}
	return ""
}

func (x *UserLandCropCanOpsInfoMsgReply) GetSeedWaitPlant() string {
	if x != nil {
		return x.SeedWaitPlant
	}
	return ""
}

func (x *UserLandCropCanOpsInfoMsgReply) GetCropNeedFertilize() string {
	if x != nil {
		return x.CropNeedFertilize
	}
	return ""
}

func (x *UserLandCropCanOpsInfoMsgReply) GetCropNeedWater() string {
	if x != nil {
		return x.CropNeedWater
	}
	return ""
}

// UserVipInfoMsgReply 通知用户VIP消息
type UserVipInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VipBeforeUpgrade *VIPLevelInfo `protobuf:"bytes,1,opt,name=vip_before_upgrade,json=vipBeforeUpgrade,proto3" json:"vip_before_upgrade,omitempty"` // 升级之前的vip信息
	VipAfterUpgrade  *VIPLevelInfo `protobuf:"bytes,2,opt,name=vip_after_upgrade,json=vipAfterUpgrade,proto3" json:"vip_after_upgrade,omitempty"`    // 升级之后的vip信息
}

func (x *UserVipInfoMsgReply) Reset() {
	*x = UserVipInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVipInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVipInfoMsgReply) ProtoMessage() {}

func (x *UserVipInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVipInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserVipInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{96}
}

func (x *UserVipInfoMsgReply) GetVipBeforeUpgrade() *VIPLevelInfo {
	if x != nil {
		return x.VipBeforeUpgrade
	}
	return nil
}

func (x *UserVipInfoMsgReply) GetVipAfterUpgrade() *VIPLevelInfo {
	if x != nil {
		return x.VipAfterUpgrade
	}
	return nil
}

// UserSubRegisterNotifyMsgReply 通知用户有好友(下级)注册成功消息
type UserSubRegisterNotifyMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo    *UserSimpleInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`            // 本人的信息
	UserSubInfo *UserSimpleInfo `protobuf:"bytes,2,opt,name=user_sub_info,json=userSubInfo,proto3" json:"user_sub_info,omitempty"` // 好友(下级)的信息
}

func (x *UserSubRegisterNotifyMsgReply) Reset() {
	*x = UserSubRegisterNotifyMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSubRegisterNotifyMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubRegisterNotifyMsgReply) ProtoMessage() {}

func (x *UserSubRegisterNotifyMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubRegisterNotifyMsgReply.ProtoReflect.Descriptor instead.
func (*UserSubRegisterNotifyMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{97}
}

func (x *UserSubRegisterNotifyMsgReply) GetUserInfo() *UserSimpleInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UserSubRegisterNotifyMsgReply) GetUserSubInfo() *UserSimpleInfo {
	if x != nil {
		return x.UserSubInfo
	}
	return nil
}

type UserSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FarmName string `protobuf:"bytes,3,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`
}

func (x *UserSimpleInfo) Reset() {
	*x = UserSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSimpleInfo) ProtoMessage() {}

func (x *UserSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSimpleInfo.ProtoReflect.Descriptor instead.
func (*UserSimpleInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{98}
}

func (x *UserSimpleInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSimpleInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserSimpleInfo) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

// 远程异地登录通知请求
type UserForeignLoginNotifyMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                // 用户ID
	PreviousDeviceId string `protobuf:"bytes,2,opt,name=previous_device_id,json=previousDeviceId,proto3" json:"previous_device_id,omitempty"` // 之前登录的设备ID
	PreviousIp       string `protobuf:"bytes,3,opt,name=previous_ip,json=previousIp,proto3" json:"previous_ip,omitempty"`                     // 之前登录的IP地址
	CurrentDeviceId  string `protobuf:"bytes,4,opt,name=current_device_id,json=currentDeviceId,proto3" json:"current_device_id,omitempty"`    // 当前登录的设备ID
	CurrentIp        string `protobuf:"bytes,5,opt,name=current_ip,json=currentIp,proto3" json:"current_ip,omitempty"`                        // 当前登录的IP地址
	LoginTime        int64  `protobuf:"varint,6,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`                       // 登录时间戳
	Platform         string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`                                           // 登录平台
}

func (x *UserForeignLoginNotifyMsgReply) Reset() {
	*x = UserForeignLoginNotifyMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserForeignLoginNotifyMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserForeignLoginNotifyMsgReply) ProtoMessage() {}

func (x *UserForeignLoginNotifyMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserForeignLoginNotifyMsgReply.ProtoReflect.Descriptor instead.
func (*UserForeignLoginNotifyMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{99}
}

func (x *UserForeignLoginNotifyMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserForeignLoginNotifyMsgReply) GetPreviousDeviceId() string {
	if x != nil {
		return x.PreviousDeviceId
	}
	return ""
}

func (x *UserForeignLoginNotifyMsgReply) GetPreviousIp() string {
	if x != nil {
		return x.PreviousIp
	}
	return ""
}

func (x *UserForeignLoginNotifyMsgReply) GetCurrentDeviceId() string {
	if x != nil {
		return x.CurrentDeviceId
	}
	return ""
}

func (x *UserForeignLoginNotifyMsgReply) GetCurrentIp() string {
	if x != nil {
		return x.CurrentIp
	}
	return ""
}

func (x *UserForeignLoginNotifyMsgReply) GetLoginTime() int64 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

func (x *UserForeignLoginNotifyMsgReply) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// SendMessage 代表消息结构
type SendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64   `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`  // 消息ID
	UserIds   []int64 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` // 目标用户ID列表
	Body      []byte  `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`                              // Proto序列化后的数据
}

func (x *SendMessage) Reset() {
	*x = SendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessage) ProtoMessage() {}

func (x *SendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessage.ProtoReflect.Descriptor instead.
func (*SendMessage) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{100}
}

func (x *SendMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SendMessage) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SendMessage) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type UserAnnouncementsInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	UserId   int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *UserAnnouncementsInfoMsgReq) Reset() {
	*x = UserAnnouncementsInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnnouncementsInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnnouncementsInfoMsgReq) ProtoMessage() {}

func (x *UserAnnouncementsInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnnouncementsInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserAnnouncementsInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{101}
}

func (x *UserAnnouncementsInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 公告列表响应
type UserAnnouncementsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*AnnouncementsInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UserAnnouncementsInfoMsgReply) Reset() {
	*x = UserAnnouncementsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnnouncementsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnnouncementsInfoMsgReply) ProtoMessage() {}

func (x *UserAnnouncementsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnnouncementsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserAnnouncementsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{102}
}

func (x *UserAnnouncementsInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserAnnouncementsInfoMsgReply) GetRows() []*AnnouncementsInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type AnnouncementsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AnnouncementsInfo) Reset() {
	*x = AnnouncementsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncementsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncementsInfo) ProtoMessage() {}

func (x *AnnouncementsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncementsInfo.ProtoReflect.Descriptor instead.
func (*AnnouncementsInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{103}
}

func (x *AnnouncementsInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnnouncementsInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type FarmAgreementInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FarmAgreementInfoMsgReq) Reset() {
	*x = FarmAgreementInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmAgreementInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmAgreementInfoMsgReq) ProtoMessage() {}

func (x *FarmAgreementInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmAgreementInfoMsgReq.ProtoReflect.Descriptor instead.
func (*FarmAgreementInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{104}
}

type FarmAgreementInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgreement   string `protobuf:"bytes,1,opt,name=user_agreement,json=userAgreement,proto3" json:"user_agreement,omitempty"`       // 用户协议
	PrivacyNotice   string `protobuf:"bytes,2,opt,name=privacy_notice,json=privacyNotice,proto3" json:"privacy_notice,omitempty"`       // 隐私声明
	AboutUs         string `protobuf:"bytes,3,opt,name=about_us,json=aboutUs,proto3" json:"about_us,omitempty"`                         // 关于我们
	CustomerService string `protobuf:"bytes,4,opt,name=customer_service,json=customerService,proto3" json:"customer_service,omitempty"` // 客服&faq
}

func (x *FarmAgreementInfoMsgReply) Reset() {
	*x = FarmAgreementInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmAgreementInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmAgreementInfoMsgReply) ProtoMessage() {}

func (x *FarmAgreementInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmAgreementInfoMsgReply.ProtoReflect.Descriptor instead.
func (*FarmAgreementInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{105}
}

func (x *FarmAgreementInfoMsgReply) GetUserAgreement() string {
	if x != nil {
		return x.UserAgreement
	}
	return ""
}

func (x *FarmAgreementInfoMsgReply) GetPrivacyNotice() string {
	if x != nil {
		return x.PrivacyNotice
	}
	return ""
}

func (x *FarmAgreementInfoMsgReply) GetAboutUs() string {
	if x != nil {
		return x.AboutUs
	}
	return ""
}

func (x *FarmAgreementInfoMsgReply) GetCustomerService() string {
	if x != nil {
		return x.CustomerService
	}
	return ""
}

type UserTransactionRecordsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Category int64 `protobuf:"varint,4,opt,name=category,proto3" json:"category,omitempty"` // 交易类型 (1 充值、2 提现、3 换汇)
}

func (x *UserTransactionRecordsMsgReq) Reset() {
	*x = UserTransactionRecordsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransactionRecordsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransactionRecordsMsgReq) ProtoMessage() {}

func (x *UserTransactionRecordsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransactionRecordsMsgReq.ProtoReflect.Descriptor instead.
func (*UserTransactionRecordsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{106}
}

func (x *UserTransactionRecordsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

type UserTransactionRecordsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*TransactionRecord `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UserTransactionRecordsMsgReply) Reset() {
	*x = UserTransactionRecordsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransactionRecordsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransactionRecordsMsgReply) ProtoMessage() {}

func (x *UserTransactionRecordsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransactionRecordsMsgReply.ProtoReflect.Descriptor instead.
func (*UserTransactionRecordsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{107}
}

func (x *UserTransactionRecordsMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetRows() []*TransactionRecord {
	if x != nil {
		return x.Rows
	}
	return nil
}

type TransactionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                   // 主键，自动增长
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                        // 用户账号
	OrderNo         string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                           // 订单编号
	CurrencyCode    string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`            // 币种编码
	Category        int64  `protobuf:"varint,5,opt,name=category,proto3" json:"category,omitempty"`                                       // 交易类型 (1 充值、2 提现、3 换汇)
	AmountIcon      int64  `protobuf:"varint,6,opt,name=amount_icon,json=amountIcon,proto3" json:"amount_icon,omitempty"`                 // 金币变动金额, 单位:微
	AmountUsdt      int64  `protobuf:"varint,7,opt,name=amount_usdt,json=amountUsdt,proto3" json:"amount_usdt,omitempty"`                 // USDT变动金额 单位:微
	FeeAmount       int64  `protobuf:"varint,8,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`                    // 手续费金额, 单位:微
	Address         string `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`                                          // 钱包地址
	Protocol        string `protobuf:"bytes,10,opt,name=protocol,proto3" json:"protocol,omitempty"`                                       // 网络协议
	MerchantId      int64  `protobuf:"varint,11,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`                // 币商ID
	MerchantName    string `protobuf:"bytes,12,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`           // 币商名字
	Status          int64  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                          // 订单状态：1-处理中，2-成功，3-失败
	Remark          string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`                                           // 备注信息
	TransactionTime int64  `protobuf:"varint,15,opt,name=transaction_time,json=transactionTime,proto3" json:"transaction_time,omitempty"` // 交易时间
	RelatedId       string `protobuf:"bytes,16,opt,name=related_id,json=relatedId,proto3" json:"related_id,omitempty"`                    // 关联ID，如游戏ID，商品ID，活动ID
}

func (x *TransactionRecord) Reset() {
	*x = TransactionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRecord) ProtoMessage() {}

func (x *TransactionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRecord.ProtoReflect.Descriptor instead.
func (*TransactionRecord) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{108}
}

func (x *TransactionRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionRecord) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TransactionRecord) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TransactionRecord) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *TransactionRecord) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *TransactionRecord) GetAmountIcon() int64 {
	if x != nil {
		return x.AmountIcon
	}
	return 0
}

func (x *TransactionRecord) GetAmountUsdt() int64 {
	if x != nil {
		return x.AmountUsdt
	}
	return 0
}

func (x *TransactionRecord) GetFeeAmount() int64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *TransactionRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransactionRecord) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TransactionRecord) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *TransactionRecord) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *TransactionRecord) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionRecord) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TransactionRecord) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *TransactionRecord) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

type FarmTransactionRecordsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Category int64 `protobuf:"varint,4,opt,name=category,proto3" json:"category,omitempty"` // 操作类型：1-收获种植 2-购买种子 3-收获发财树
}

func (x *FarmTransactionRecordsMsgReq) Reset() {
	*x = FarmTransactionRecordsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmTransactionRecordsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmTransactionRecordsMsgReq) ProtoMessage() {}

func (x *FarmTransactionRecordsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmTransactionRecordsMsgReq.ProtoReflect.Descriptor instead.
func (*FarmTransactionRecordsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{109}
}

func (x *FarmTransactionRecordsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

type FarmTransactionRecordsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                    `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*FarmTransactionRecord `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *FarmTransactionRecordsMsgReply) Reset() {
	*x = FarmTransactionRecordsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmTransactionRecordsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmTransactionRecordsMsgReply) ProtoMessage() {}

func (x *FarmTransactionRecordsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmTransactionRecordsMsgReply.ProtoReflect.Descriptor instead.
func (*FarmTransactionRecordsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{110}
}

func (x *FarmTransactionRecordsMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *FarmTransactionRecordsMsgReply) GetRows() []*FarmTransactionRecord {
	if x != nil {
		return x.Rows
	}
	return nil
}

type FarmTransactionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 记录ID
	OrderNo    string `protobuf:"bytes,8,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"` // 订单编号
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   // 用户ID
	Username   string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	FarmId     int64  `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`             // 农场ID
	WalletType int64  `protobuf:"varint,6,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"` // 账变钱包 1:用户钱包 2:代理钱包 3:奖励钱包 4:USTD钱包
	Category   int64  `protobuf:"varint,7,opt,name=category,proto3" json:"category,omitempty"`                       // 操作类型：1-收获种植 2-购买种子 3-收获发财树
	OperatedAt int64  `protobuf:"varint,9,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"` // 操作时间（Unix 时间戳）
	Amount     int64  `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`                          // 变动金额, 单位:微
}

func (x *FarmTransactionRecord) Reset() {
	*x = FarmTransactionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmTransactionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmTransactionRecord) ProtoMessage() {}

func (x *FarmTransactionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmTransactionRecord.ProtoReflect.Descriptor instead.
func (*FarmTransactionRecord) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{111}
}

func (x *FarmTransactionRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FarmTransactionRecord) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *FarmTransactionRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FarmTransactionRecord) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FarmTransactionRecord) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *FarmTransactionRecord) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *FarmTransactionRecord) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *FarmTransactionRecord) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

func (x *FarmTransactionRecord) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CurrencyInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *CurrencyInfoMsgReq) Reset() {
	*x = CurrencyInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfoMsgReq) ProtoMessage() {}

func (x *CurrencyInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfoMsgReq.ProtoReflect.Descriptor instead.
func (*CurrencyInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{112}
}

func (x *CurrencyInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 货币列表响应
type CurrencyInfoMsgReqReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*CurrencyInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *CurrencyInfoMsgReqReply) Reset() {
	*x = CurrencyInfoMsgReqReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfoMsgReqReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfoMsgReqReply) ProtoMessage() {}

func (x *CurrencyInfoMsgReqReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfoMsgReqReply.ProtoReflect.Descriptor instead.
func (*CurrencyInfoMsgReqReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{113}
}

func (x *CurrencyInfoMsgReqReply) GetRows() []*CurrencyInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode    string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CurrencyFlagUrl string `protobuf:"bytes,2,opt,name=currency_flag_url,json=currencyFlagUrl,proto3" json:"currency_flag_url,omitempty"`
	ExchangeRate    string `protobuf:"bytes,3,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // 货币兑换USDT率
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{114}
}

func (x *CurrencyInfo) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CurrencyInfo) GetCurrencyFlagUrl() string {
	if x != nil {
		return x.CurrencyFlagUrl
	}
	return ""
}

func (x *CurrencyInfo) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

// AgentOverviewService相关消息
type GetAgentIncomeOverviewMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId int64 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // 代理ID
}

func (x *GetAgentIncomeOverviewMsgReq) Reset() {
	*x = GetAgentIncomeOverviewMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentIncomeOverviewMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentIncomeOverviewMsgReq) ProtoMessage() {}

func (x *GetAgentIncomeOverviewMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentIncomeOverviewMsgReq.ProtoReflect.Descriptor instead.
func (*GetAgentIncomeOverviewMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{115}
}

func (x *GetAgentIncomeOverviewMsgReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetAgentIncomeOverviewMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodayIncome int64  `protobuf:"varint,1,opt,name=today_income,json=todayIncome,proto3" json:"today_income,omitempty"` // 今日收入
	TotalIncome int64  `protobuf:"varint,2,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"` // 总收入
	AgentLevel  int64  `protobuf:"varint,3,opt,name=agent_level,json=agentLevel,proto3" json:"agent_level,omitempty"`    // 代理等级
	Avatar      string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                               // 代理头像URL
}

func (x *GetAgentIncomeOverviewMsgReply) Reset() {
	*x = GetAgentIncomeOverviewMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentIncomeOverviewMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentIncomeOverviewMsgReply) ProtoMessage() {}

func (x *GetAgentIncomeOverviewMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentIncomeOverviewMsgReply.ProtoReflect.Descriptor instead.
func (*GetAgentIncomeOverviewMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{116}
}

func (x *GetAgentIncomeOverviewMsgReply) GetTodayIncome() int64 {
	if x != nil {
		return x.TodayIncome
	}
	return 0
}

func (x *GetAgentIncomeOverviewMsgReply) GetTotalIncome() int64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *GetAgentIncomeOverviewMsgReply) GetAgentLevel() int64 {
	if x != nil {
		return x.AgentLevel
	}
	return 0
}

func (x *GetAgentIncomeOverviewMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// AgentDownlineStatService相关消息
type GetAgentDownlineStatsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId int64 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // 代理ID
}

func (x *GetAgentDownlineStatsMsgReq) Reset() {
	*x = GetAgentDownlineStatsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentDownlineStatsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentDownlineStatsMsgReq) ProtoMessage() {}

func (x *GetAgentDownlineStatsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentDownlineStatsMsgReq.ProtoReflect.Descriptor instead.
func (*GetAgentDownlineStatsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{117}
}

func (x *GetAgentDownlineStatsMsgReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetAgentDownlineStatsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier1Total int64 `protobuf:"varint,1,opt,name=tier1_total,json=tier1Total,proto3" json:"tier1_total,omitempty"` // 一级下线总数
	Tier1Today int64 `protobuf:"varint,2,opt,name=tier1_today,json=tier1Today,proto3" json:"tier1_today,omitempty"` // 今日新增一级下线
	Tier2Total int64 `protobuf:"varint,3,opt,name=tier2_total,json=tier2Total,proto3" json:"tier2_total,omitempty"` // 二级下线总数
	Tier2Today int64 `protobuf:"varint,4,opt,name=tier2_today,json=tier2Today,proto3" json:"tier2_today,omitempty"` // 今日新增二级下线
}

func (x *GetAgentDownlineStatsMsgReply) Reset() {
	*x = GetAgentDownlineStatsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentDownlineStatsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentDownlineStatsMsgReply) ProtoMessage() {}

func (x *GetAgentDownlineStatsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentDownlineStatsMsgReply.ProtoReflect.Descriptor instead.
func (*GetAgentDownlineStatsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{118}
}

func (x *GetAgentDownlineStatsMsgReply) GetTier1Total() int64 {
	if x != nil {
		return x.Tier1Total
	}
	return 0
}

func (x *GetAgentDownlineStatsMsgReply) GetTier1Today() int64 {
	if x != nil {
		return x.Tier1Today
	}
	return 0
}

func (x *GetAgentDownlineStatsMsgReply) GetTier2Total() int64 {
	if x != nil {
		return x.Tier2Total
	}
	return 0
}

func (x *GetAgentDownlineStatsMsgReply) GetTier2Today() int64 {
	if x != nil {
		return x.Tier2Today
	}
	return 0
}

type GetAgentDownlineListMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId    int64 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`          // 代理ID
	FilterType int64 `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"` // 筛选类型，例如0="ALL" 1="TIER1" 2="TIER2"
	Page       int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                               // 页码
	PageSize   int64 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 每页大小
	SortField  int64 `protobuf:"varint,5,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`    // 排序字段 1=存款贡献，2=收获贡献，3=总贡献
	SortOrder  int64 `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`    // 排序顺序 1=ASC，2=DESC
}

func (x *GetAgentDownlineListMsgReq) Reset() {
	*x = GetAgentDownlineListMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentDownlineListMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentDownlineListMsgReq) ProtoMessage() {}

func (x *GetAgentDownlineListMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentDownlineListMsgReq.ProtoReflect.Descriptor instead.
func (*GetAgentDownlineListMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{119}
}

func (x *GetAgentDownlineListMsgReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *GetAgentDownlineListMsgReq) GetFilterType() int64 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *GetAgentDownlineListMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAgentDownlineListMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAgentDownlineListMsgReq) GetSortField() int64 {
	if x != nil {
		return x.SortField
	}
	return 0
}

func (x *GetAgentDownlineListMsgReq) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

type GetAgentDownlineListMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64             `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*DownlineMember `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 下线成员列表
}

func (x *GetAgentDownlineListMsgReply) Reset() {
	*x = GetAgentDownlineListMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentDownlineListMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentDownlineListMsgReply) ProtoMessage() {}

func (x *GetAgentDownlineListMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentDownlineListMsgReply.ProtoReflect.Descriptor instead.
func (*GetAgentDownlineListMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{120}
}

func (x *GetAgentDownlineListMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAgentDownlineListMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAgentDownlineListMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAgentDownlineListMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetAgentDownlineListMsgReply) GetRows() []*DownlineMember {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DownlineMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 用户ID
	Username            string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                                   // 用户名
	DepositContribution int64  `protobuf:"varint,3,opt,name=deposit_contribution,json=depositContribution,proto3" json:"deposit_contribution,omitempty"` // 存款贡献
	HarvestContribution int64  `protobuf:"varint,4,opt,name=harvest_contribution,json=harvestContribution,proto3" json:"harvest_contribution,omitempty"` // 收获贡献
	TotalContribution   int64  `protobuf:"varint,5,opt,name=total_contribution,json=totalContribution,proto3" json:"total_contribution,omitempty"`       // 总贡献
	Tier                int64  `protobuf:"varint,6,opt,name=tier,proto3" json:"tier,omitempty"`                                                          // 层级：1=一级下线，2=二级下线
	RegisterTime        int64  `protobuf:"varint,7,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`                      // 注册时间
}

func (x *DownlineMember) Reset() {
	*x = DownlineMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlineMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlineMember) ProtoMessage() {}

func (x *DownlineMember) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlineMember.ProtoReflect.Descriptor instead.
func (*DownlineMember) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{121}
}

func (x *DownlineMember) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownlineMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DownlineMember) GetDepositContribution() int64 {
	if x != nil {
		return x.DepositContribution
	}
	return 0
}

func (x *DownlineMember) GetHarvestContribution() int64 {
	if x != nil {
		return x.HarvestContribution
	}
	return 0
}

func (x *DownlineMember) GetTotalContribution() int64 {
	if x != nil {
		return x.TotalContribution
	}
	return 0
}

func (x *DownlineMember) GetTier() int64 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *DownlineMember) GetRegisterTime() int64 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

type GetAgentIncomeDetailsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId        int64 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                        // 代理ID
	TimeSearchType int64 `protobuf:"varint,2,opt,name=time_search_type,json=timeSearchType,proto3" json:"time_search_type,omitempty"` // 时间搜索类型：0-全部，1-今日，2-昨日，3-本周，4-上周，5-本月，6-上月，7-自定义
	StartTime      int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                  // 开始时间戳
	EndTime        int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                        // 结束时间戳
	Page           int64 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                                             // 页码
	PageSize       int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                     // 每页大小
}

func (x *GetAgentIncomeDetailsMsgReq) Reset() {
	*x = GetAgentIncomeDetailsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentIncomeDetailsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentIncomeDetailsMsgReq) ProtoMessage() {}

func (x *GetAgentIncomeDetailsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentIncomeDetailsMsgReq.ProtoReflect.Descriptor instead.
func (*GetAgentIncomeDetailsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{122}
}

func (x *GetAgentIncomeDetailsMsgReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReq) GetTimeSearchType() int64 {
	if x != nil {
		return x.TimeSearchType
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetAgentIncomeDetailsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalIncome     int64           `protobuf:"varint,1,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`             // 总收入
	DepositorsCount int64           `protobuf:"varint,2,opt,name=depositors_count,json=depositorsCount,proto3" json:"depositors_count,omitempty"` // 存款人数
	HarvestersCount int64           `protobuf:"varint,3,opt,name=harvesters_count,json=harvestersCount,proto3" json:"harvesters_count,omitempty"` // 收获人数
	Page            int64           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize        int64           `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total           int64           `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage       int64           `protobuf:"varint,7,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows            []*IncomeDetail `protobuf:"bytes,8,rep,name=rows,proto3" json:"rows,omitempty"` // 收入明细列表
}

func (x *GetAgentIncomeDetailsMsgReply) Reset() {
	*x = GetAgentIncomeDetailsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentIncomeDetailsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentIncomeDetailsMsgReply) ProtoMessage() {}

func (x *GetAgentIncomeDetailsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentIncomeDetailsMsgReply.ProtoReflect.Descriptor instead.
func (*GetAgentIncomeDetailsMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{123}
}

func (x *GetAgentIncomeDetailsMsgReply) GetTotalIncome() int64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetDepositorsCount() int64 {
	if x != nil {
		return x.DepositorsCount
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetHarvestersCount() int64 {
	if x != nil {
		return x.HarvestersCount
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetAgentIncomeDetailsMsgReply) GetRows() []*IncomeDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

type IncomeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date          string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                         // 日期
	DepositRebate int64  `protobuf:"varint,2,opt,name=deposit_rebate,json=depositRebate,proto3" json:"deposit_rebate,omitempty"` // 存款返利
	HarvestRebate int64  `protobuf:"varint,3,opt,name=harvest_rebate,json=harvestRebate,proto3" json:"harvest_rebate,omitempty"` // 收获返利
	TotalIncome   int64  `protobuf:"varint,4,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`       // 总收入
}

func (x *IncomeDetail) Reset() {
	*x = IncomeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeDetail) ProtoMessage() {}

func (x *IncomeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeDetail.ProtoReflect.Descriptor instead.
func (*IncomeDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{124}
}

func (x *IncomeDetail) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *IncomeDetail) GetDepositRebate() int64 {
	if x != nil {
		return x.DepositRebate
	}
	return 0
}

func (x *IncomeDetail) GetHarvestRebate() int64 {
	if x != nil {
		return x.HarvestRebate
	}
	return 0
}

func (x *IncomeDetail) GetTotalIncome() int64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

type AgentRuleInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *AgentRuleInfoMsgReq) Reset() {
	*x = AgentRuleInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRuleInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRuleInfoMsgReq) ProtoMessage() {}

func (x *AgentRuleInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRuleInfoMsgReq.ProtoReflect.Descriptor instead.
func (*AgentRuleInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{125}
}

func (x *AgentRuleInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AgentRuleInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositRules *DepositRewards    `protobuf:"bytes,1,opt,name=deposit_rules,json=depositRules,proto3" json:"deposit_rules,omitempty"` // 存款返佣规则
	HarvestRules *CollectionRewards `protobuf:"bytes,2,opt,name=harvest_rules,json=harvestRules,proto3" json:"harvest_rules,omitempty"` // 收获返佣规则
}

func (x *AgentRuleInfoMsgReply) Reset() {
	*x = AgentRuleInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRuleInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRuleInfoMsgReply) ProtoMessage() {}

func (x *AgentRuleInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRuleInfoMsgReply.ProtoReflect.Descriptor instead.
func (*AgentRuleInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{126}
}

func (x *AgentRuleInfoMsgReply) GetDepositRules() *DepositRewards {
	if x != nil {
		return x.DepositRules
	}
	return nil
}

func (x *AgentRuleInfoMsgReply) GetHarvestRules() *CollectionRewards {
	if x != nil {
		return x.HarvestRules
	}
	return nil
}

// DepositRewards 代表存款奖励配置
type DepositRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          int64 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                           // 是否启用存款奖励（1-启用，2-禁用）
	Level1Percentage int64 `protobuf:"varint,2,opt,name=level1_percentage,json=level1Percentage,proto3" json:"level1_percentage,omitempty"` // 等级1存款奖励百分比
	Level2Percentage int64 `protobuf:"varint,3,opt,name=level2_percentage,json=level2Percentage,proto3" json:"level2_percentage,omitempty"` // 等级2存款奖励百分比
}

func (x *DepositRewards) Reset() {
	*x = DepositRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRewards) ProtoMessage() {}

func (x *DepositRewards) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRewards.ProtoReflect.Descriptor instead.
func (*DepositRewards) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{127}
}

func (x *DepositRewards) GetEnabled() int64 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DepositRewards) GetLevel1Percentage() int64 {
	if x != nil {
		return x.Level1Percentage
	}
	return 0
}

func (x *DepositRewards) GetLevel2Percentage() int64 {
	if x != nil {
		return x.Level2Percentage
	}
	return 0
}

// CollectionRewards 代表收集奖励配置
type CollectionRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          int64 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                           // 是否启用收集奖励（1-启用，2-禁用）
	Level1Percentage int64 `protobuf:"varint,2,opt,name=level1_percentage,json=level1Percentage,proto3" json:"level1_percentage,omitempty"` // 等级1收集奖励百分比
	Level2Percentage int64 `protobuf:"varint,3,opt,name=level2_percentage,json=level2Percentage,proto3" json:"level2_percentage,omitempty"` // 等级2收集奖励百分比
}

func (x *CollectionRewards) Reset() {
	*x = CollectionRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRewards) ProtoMessage() {}

func (x *CollectionRewards) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRewards.ProtoReflect.Descriptor instead.
func (*CollectionRewards) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{128}
}

func (x *CollectionRewards) GetEnabled() int64 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *CollectionRewards) GetLevel1Percentage() int64 {
	if x != nil {
		return x.Level1Percentage
	}
	return 0
}

func (x *CollectionRewards) GetLevel2Percentage() int64 {
	if x != nil {
		return x.Level2Percentage
	}
	return 0
}

var File_mqtt_v1_mqtt_proto protoreflect.FileDescriptor

var file_mqtt_v1_mqtt_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x71, 0x74, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x08, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x22, 0x30, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9,
	0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x31,
	0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xc4, 0x04, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x76, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x76, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x77, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x77, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69,
	0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x58, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x78, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x58, 0x70, 0x22, 0xcf, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4b,
	0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x68, 0x61, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x1b,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x22, 0x45, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x54, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xe9, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x10, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x4a, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x22, 0xad, 0x01,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x22, 0xbb, 0x08, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a,
	0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x73,
	0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xb7, 0x09, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x73, 0x65, 0x6c, 0x66, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f,
	0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65,
	0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x75, 0x6d, 0x22, 0x41, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x46, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xd8, 0x07, 0x0a,
	0x10, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15,
	0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x73, 0x65, 0x6c,
	0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21,
	0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x26,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd0, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x4b,
	0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x68, 0x61, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xcf, 0x04,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x70, 0x43, 0x61,
	0x6e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x72, 0x6f, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x72,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22,
	0xf9, 0x09, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x46, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x70, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d,
	0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54, 0x6f, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54, 0x6f, 0x4c, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70,
	0x4c, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x32, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x72,
	0x6d, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x61, 0x72, 0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x17, 0x4c, 0x6f, 0x6f, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xad, 0x05, 0x0a, 0x19, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x76, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x76, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x64, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x79,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x22, 0x67, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xb2, 0x03, 0x0a, 0x11, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x77, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xf4,
	0x02, 0x0a, 0x0d, 0x4d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69,
	0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2, 0x03, 0x0a, 0x1b,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x43, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x73,
	0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e,
	0x22, 0x14, 0x0a, 0x12, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a, 0x14, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x49, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0c, 0x56, 0x49,
	0x50, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x23, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73,
	0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x74,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73,
	0x74, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x74, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x74, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x74, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x74, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1b, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x61,
	0x0a, 0x1a, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0x82, 0x07, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x66, 0x73,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x66, 0x73, 0x63, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x65, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x7f,
	0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xd7, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x7c, 0x0a, 0x18, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x02, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a,
	0x1d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x66, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x66, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xf1, 0x06, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x46, 0x65, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x8c, 0x02,
	0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1c,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0xe4, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x48,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e,
	0x64, 0x43, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x4f, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72,
	0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x48, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x65, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x6f, 0x70, 0x4e,
	0x65, 0x65, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x12,
	0x76, 0x69, 0x70, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x49, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x76, 0x69, 0x70, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x11, 0x76, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x49, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x76, 0x69, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x02,
	0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5b,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x66, 0x0a, 0x1b, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x19, 0x0a, 0x17, 0x46, 0x61, 0x72, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0xaf, 0x01, 0x0a, 0x19,
	0x46, 0x61, 0x72, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x55, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xf2, 0x03,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x64, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x64, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x46, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x1e, 0x46, 0x61,
	0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x46, 0x61, 0x72, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x2d, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x31,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72,
	0x31, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x72, 0x32, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x65,
	0x72, 0x32, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x72, 0x32,
	0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69,
	0x65, 0x72, 0x32, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x02, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x2e,
	0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2a, 0xf2, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4d, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53,
	0x47, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55,
	0x4e, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x65, 0x12, 0x19, 0x0a, 0x14, 0x46,
	0x41, 0x52, 0x4d, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0xc9, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x52, 0x4f, 0x50, 0x53,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xca,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xac, 0x02, 0x12, 0x18, 0x0a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0xad, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0xae, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41,
	0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x90, 0x03, 0x12, 0x17,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x91, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x92, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x4f, 0x50, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x93, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x4c, 0x4f,
	0x4f, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x53, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x94, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5f, 0x54, 0x52,
	0x45, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x95, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x96, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x56, 0x49, 0x50, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xd8, 0x04,
	0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xd9,
	0x04, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xda, 0x04, 0x12, 0x1b,
	0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xdb, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xdc, 0x04,
	0x12, 0x1a, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xdd, 0x04, 0x12, 0x1f, 0x0a, 0x1a,
	0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xde, 0x04, 0x12, 0x22, 0x0a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xdf,
	0x04, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xe0, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xe1, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xe2, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xe3, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0xe4, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xbc, 0x05, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xbd, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xbe, 0x05, 0x12, 0x21, 0x0a, 0x1c, 0x47,
	0x45, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xbf, 0x05, 0x12, 0x18,
	0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xc0, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa0, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0xa1, 0x06, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0xa2, 0x06, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f,
	0x52, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0xa4, 0x06, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56,
	0x49, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa5, 0x06, 0x12, 0x21,
	0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa6,
	0x06, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0xa7, 0x06, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xb8, 0x45, 0x12,
	0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x8f, 0x4e, 0x12, 0x10, 0x0a, 0x0a, 0x45, 0x52, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x94, 0xc6, 0x1e, 0x12, 0x10, 0x0a, 0x0a, 0x45,
	0x52, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x95, 0xc6, 0x1e, 0x12, 0x0f, 0x0a,
	0x09, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x96, 0xc6, 0x1e, 0x12, 0x18,
	0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x97, 0xc6, 0x1e, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x98, 0xc6, 0x1e, 0x2a, 0x5e, 0x0a,
	0x0a, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x55,
	0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55,
	0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x65, 0x0a,
	0x0d, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f,
	0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x55, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x06, 0x2a, 0x7d, 0x0a, 0x11, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x71, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x44, 0x54, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0d, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x59, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0xe8, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x50, 0x10, 0xd0, 0x0f, 0x12, 0x22, 0x0a, 0x1d,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xb8, 0x17,
	0x12, 0x22, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0xa0, 0x1f, 0x2a, 0xd6, 0x06, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0xe9, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4f, 0x4e, 0x10, 0xea, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xeb, 0x07, 0x12, 0x28, 0x0a, 0x23,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0xec, 0x07, 0x12, 0x2a, 0x0a, 0x25, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10,
	0xd1, 0x0f, 0x12, 0x2b, 0x0a, 0x26, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x50,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x10, 0xd2, 0x0f, 0x12,
	0x2a, 0x0a, 0x25, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0xd3, 0x0f, 0x12, 0x2e, 0x0a, 0x29, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x46,
	0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0xd4, 0x0f, 0x12, 0x23, 0x0a, 0x1e, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0xd5, 0x0f,
	0x12, 0x2a, 0x0a, 0x25, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0xb9, 0x17, 0x12, 0x29, 0x0a, 0x24,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0xba, 0x17, 0x12, 0x27, 0x0a, 0x22, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x10, 0xbb, 0x17,
	0x12, 0x29, 0x0a, 0x24, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x10, 0xbc, 0x17, 0x12, 0x2a, 0x0a, 0x25, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x5f,
	0x53, 0x45, 0x45, 0x44, 0x10, 0xbd, 0x17, 0x12, 0x27, 0x0a, 0x22, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0xbe, 0x17,
	0x12, 0x2a, 0x0a, 0x25, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xa1, 0x1f, 0x12, 0x2d, 0x0a, 0x28,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa2, 0x1f, 0x12, 0x26, 0x0a, 0x21, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0xa3, 0x1f, 0x12, 0x28, 0x0a, 0x23, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0xa4, 0x1f, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mqtt_v1_mqtt_proto_rawDescOnce sync.Once
	file_mqtt_v1_mqtt_proto_rawDescData = file_mqtt_v1_mqtt_proto_rawDesc
)

func file_mqtt_v1_mqtt_proto_rawDescGZIP() []byte {
	file_mqtt_v1_mqtt_proto_rawDescOnce.Do(func() {
		file_mqtt_v1_mqtt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mqtt_v1_mqtt_proto_rawDescData)
	})
	return file_mqtt_v1_mqtt_proto_rawDescData
}

var file_mqtt_v1_mqtt_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_mqtt_v1_mqtt_proto_msgTypes = make([]protoimpl.MessageInfo, 130)
var file_mqtt_v1_mqtt_proto_goTypes = []interface{}{
	(MessageID)(0),                          // 0: mqtt.v1.MessageID
	(LandStatus)(0),                         // 1: mqtt.v1.LandStatus
	(HarvestStatus)(0),                      // 2: mqtt.v1.HarvestStatus
	(GrowthStatus)(0),                       // 3: mqtt.v1.GrowthStatus
	(FarmOperationType)(0),                  // 4: mqtt.v1.FarmOperationType
	(WalletType)(0),                         // 5: mqtt.v1.WalletType
	(WalletUsageType)(0),                    // 6: mqtt.v1.WalletUsageType
	(BooleanStatus)(0),                      // 7: mqtt.v1.BooleanStatus
	(ProductType)(0),                        // 8: mqtt.v1.ProductType
	(NotificationType)(0),                   // 9: mqtt.v1.NotificationType
	(NotificationSubType)(0),                // 10: mqtt.v1.NotificationSubType
	(*MessageWrapper)(nil),                  // 11: mqtt.v1.MessageWrapper
	(*MsgReq)(nil),                          // 12: mqtt.v1.MsgReq
	(*MsgReply)(nil),                        // 13: mqtt.v1.MsgReply
	(*UserAuthInfoMsgReq)(nil),              // 14: mqtt.v1.UserAuthInfoMsgReq
	(*UserAuthInfoMsgReply)(nil),            // 15: mqtt.v1.UserAuthInfoMsgReply
	(*UserHeartBeatMsgReq)(nil),             // 16: mqtt.v1.UserHeartBeatMsgReq
	(*UserHeartBeatMsgReply)(nil),           // 17: mqtt.v1.UserHeartBeatMsgReply
	(*UserEventInfoMsgReq)(nil),             // 18: mqtt.v1.UserEventInfoMsgReq
	(*UserEventInfoMsgReply)(nil),           // 19: mqtt.v1.UserEventInfoMsgReply
	(*UserPersonalInfoMsgReq)(nil),          // 20: mqtt.v1.UserPersonalInfoMsgReq
	(*UserPersonalInfoMsgReply)(nil),        // 21: mqtt.v1.UserPersonalInfoMsgReply
	(*VipInfo)(nil),                         // 22: mqtt.v1.VipInfo
	(*UserEditPersonalInfoMsgReq)(nil),      // 23: mqtt.v1.UserEditPersonalInfoMsgReq
	(*UserEditPersonalInfoMsgReply)(nil),    // 24: mqtt.v1.UserEditPersonalInfoMsgReply
	(*UserEditSensitiveInfoMsgReq)(nil),     // 25: mqtt.v1.UserEditSensitiveInfoMsgReq
	(*UserEditSensitiveInfoMsgReply)(nil),   // 26: mqtt.v1.UserEditSensitiveInfoMsgReply
	(*VerifySecondaryPasswordMsgReq)(nil),   // 27: mqtt.v1.VerifySecondaryPasswordMsgReq
	(*VerifySecondaryPasswordMsgReply)(nil), // 28: mqtt.v1.VerifySecondaryPasswordMsgReply
	(*UserWallet)(nil),                      // 29: mqtt.v1.UserWallet
	(*UserBalance)(nil),                     // 30: mqtt.v1.UserBalance
	(*UserStorageInfoMsgReq)(nil),           // 31: mqtt.v1.UserStorageInfoMsgReq
	(*UserStorageInfoMsgReply)(nil),         // 32: mqtt.v1.UserStorageInfoMsgReply
	(*UserStorageDetail)(nil),               // 33: mqtt.v1.UserStorageDetail
	(*FarmsStoreInfoMsgReq)(nil),            // 34: mqtt.v1.FarmsStoreInfoMsgReq
	(*FarmsStoreInfoMsgReply)(nil),          // 35: mqtt.v1.FarmsStoreInfoMsgReply
	(*StoreInfo)(nil),                       // 36: mqtt.v1.StoreInfo
	(*UserPurchaseGoodsMsgReq)(nil),         // 37: mqtt.v1.UserPurchaseGoodsMsgReq
	(*UserPurchaseGoodsMsgReply)(nil),       // 38: mqtt.v1.UserPurchaseGoodsMsgReply
	(*CropsInfoListMsgReq)(nil),             // 39: mqtt.v1.CropsInfoListMsgReq
	(*CropsInfoListMsgReply)(nil),           // 40: mqtt.v1.CropsInfoListMsgReply
	(*CropsProductInfo)(nil),                // 41: mqtt.v1.CropsProductInfo
	(*UserFarmInfoMsgReq)(nil),              // 42: mqtt.v1.UserFarmInfoMsgReq
	(*UserFarmInfoMsgReply)(nil),            // 43: mqtt.v1.UserFarmInfoMsgReply
	(*UserLandInfoMsgReq)(nil),              // 44: mqtt.v1.UserLandInfoMsgReq
	(*UserLandInfoMsgReply)(nil),            // 45: mqtt.v1.UserLandInfoMsgReply
	(*UserLandDetail)(nil),                  // 46: mqtt.v1.UserLandDetail
	(*UserPlantingDetail)(nil),              // 47: mqtt.v1.UserPlantingDetail
	(*UserFarmOpsMsgReq)(nil),               // 48: mqtt.v1.UserFarmOpsMsgReq
	(*UserFarmOpsMsgReply)(nil),             // 49: mqtt.v1.UserFarmOpsMsgReply
	(*GenerateFarmsNameMsgReq)(nil),         // 50: mqtt.v1.GenerateFarmsNameMsgReq
	(*GenerateFarmsNameMsgReply)(nil),       // 51: mqtt.v1.GenerateFarmsNameMsgReply
	(*LookUserFarmsInfoMsgReq)(nil),         // 52: mqtt.v1.LookUserFarmsInfoMsgReq
	(*LookUserFarmsInfoMsgReply)(nil),       // 53: mqtt.v1.LookUserFarmsInfoMsgReply
	(*UserFortuneTreeInfo)(nil),             // 54: mqtt.v1.UserFortuneTreeInfo
	(*AllUserRankingInfoMsgReq)(nil),        // 55: mqtt.v1.AllUserRankingInfoMsgReq
	(*AllUserRankingInfoMsgReply)(nil),      // 56: mqtt.v1.AllUserRankingInfoMsgReply
	(*UserFriendRankingInfoMsgReq)(nil),     // 57: mqtt.v1.UserFriendRankingInfoMsgReq
	(*UserFriendRankingInfoMsgReply)(nil),   // 58: mqtt.v1.UserFriendRankingInfoMsgReply
	(*FriendRankingInfo)(nil),               // 59: mqtt.v1.FriendRankingInfo
	(*MyRankingInfo)(nil),                   // 60: mqtt.v1.MyRankingInfo
	(*UserFortuneTreeInfoMsgReq)(nil),       // 61: mqtt.v1.UserFortuneTreeInfoMsgReq
	(*UserFortuneTreeInfoMsgReply)(nil),     // 62: mqtt.v1.UserFortuneTreeInfoMsgReply
	(*UserOpsFortuneTreeMsgReq)(nil),        // 63: mqtt.v1.UserOpsFortuneTreeMsgReq
	(*UserOpsFortuneTreeMsgReply)(nil),      // 64: mqtt.v1.UserOpsFortuneTreeMsgReply
	(*VipLevelInfoMsgReq)(nil),              // 65: mqtt.v1.VipLevelInfoMsgReq
	(*VipLevelInfoMsgReply)(nil),            // 66: mqtt.v1.VipLevelInfoMsgReply
	(*VIPLevelInfo)(nil),                    // 67: mqtt.v1.VIPLevelInfo
	(*GetMerchantListMsgReq)(nil),           // 68: mqtt.v1.GetMerchantListMsgReq
	(*GetMerchantListMsgReply)(nil),         // 69: mqtt.v1.GetMerchantListMsgReply
	(*MerchantInfo)(nil),                    // 70: mqtt.v1.MerchantInfo
	(*MerchantExchangeRateMsgReq)(nil),      // 71: mqtt.v1.MerchantExchangeRateMsgReq
	(*MerchantExchangeRateMsgReply)(nil),    // 72: mqtt.v1.MerchantExchangeRateMsgReply
	(*SubmitForRedemptionMsgReq)(nil),       // 73: mqtt.v1.SubmitForRedemptionMsgReq
	(*SubmitForRedemptionMsgReply)(nil),     // 74: mqtt.v1.SubmitForRedemptionMsgReply
	(*RechargeChannelsInfoMsgReq)(nil),      // 75: mqtt.v1.RechargeChannelsInfoMsgReq
	(*RechargeChannelsInfoMsgReply)(nil),    // 76: mqtt.v1.RechargeChannelsInfoMsgReply
	(*RechargeChannel)(nil),                 // 77: mqtt.v1.RechargeChannel
	(*UserRechargeInfoMsgReq)(nil),          // 78: mqtt.v1.UserRechargeInfoMsgReq
	(*UserRechargeInfoMsgReply)(nil),        // 79: mqtt.v1.UserRechargeInfoMsgReply
	(*RechargeInfo)(nil),                    // 80: mqtt.v1.RechargeInfo
	(*UserRechargeConfirmMsgReq)(nil),       // 81: mqtt.v1.UserRechargeConfirmMsgReq
	(*UserRechargeConfirmMsgReply)(nil),     // 82: mqtt.v1.UserRechargeConfirmMsgReply
	(*UserWithdrawInfoMsgReq)(nil),          // 83: mqtt.v1.UserWithdrawInfoMsgReq
	(*UserWithdrawInfoMsgReply)(nil),        // 84: mqtt.v1.UserWithdrawInfoMsgReply
	(*WithdrawInfo)(nil),                    // 85: mqtt.v1.WithdrawInfo
	(*UserWithdrawAccountInfoMsgReq)(nil),   // 86: mqtt.v1.UserWithdrawAccountInfoMsgReq
	(*UserWithdrawAccountInfoMsgReply)(nil), // 87: mqtt.v1.UserWithdrawAccountInfoMsgReply
	(*WithdrawAccount)(nil),                 // 88: mqtt.v1.WithdrawAccount
	(*WithdrawChannel)(nil),                 // 89: mqtt.v1.WithdrawChannel
	(*UserSetWithdrawChannelMsgReq)(nil),    // 90: mqtt.v1.UserSetWithdrawChannelMsgReq
	(*UserSetWithdrawChannelMsgReply)(nil),  // 91: mqtt.v1.UserSetWithdrawChannelMsgReply
	(*GetBankListInfoMsgReq)(nil),           // 92: mqtt.v1.GetBankListInfoMsgReq
	(*GetBankListInfoMsgReply)(nil),         // 93: mqtt.v1.GetBankListInfoMsgReply
	(*BankConfig)(nil),                      // 94: mqtt.v1.BankConfig
	(*GetPaymentConfListMsgReq)(nil),        // 95: mqtt.v1.GetPaymentConfListMsgReq
	(*GetPaymentConfListMsgReply)(nil),      // 96: mqtt.v1.GetPaymentConfListMsgReply
	(*PaymentConfInfo)(nil),                 // 97: mqtt.v1.PaymentConfInfo
	(*GetPendingOrderMsgReq)(nil),           // 98: mqtt.v1.GetPendingOrderMsgReq
	(*GetPendingOrderMsgReply)(nil),         // 99: mqtt.v1.GetPendingOrderMsgReply
	(*OrderInfo)(nil),                       // 100: mqtt.v1.OrderInfo
	(*UserNotificationInfoMsgReply)(nil),    // 101: mqtt.v1.UserNotificationInfoMsgReply
	(*UserNotificationInfo)(nil),            // 102: mqtt.v1.UserNotificationInfo
	(*UserBalanceInfoMsgReply)(nil),         // 103: mqtt.v1.UserBalanceInfoMsgReply
	(*UserLandStatusInfoMsgReply)(nil),      // 104: mqtt.v1.UserLandStatusInfoMsgReply
	(*UserFortuneTreeStatusMsgReply)(nil),   // 105: mqtt.v1.UserFortuneTreeStatusMsgReply
	(*UserLandCropCanOpsInfoMsgReply)(nil),  // 106: mqtt.v1.UserLandCropCanOpsInfoMsgReply
	(*UserVipInfoMsgReply)(nil),             // 107: mqtt.v1.UserVipInfoMsgReply
	(*UserSubRegisterNotifyMsgReply)(nil),   // 108: mqtt.v1.UserSubRegisterNotifyMsgReply
	(*UserSimpleInfo)(nil),                  // 109: mqtt.v1.UserSimpleInfo
	(*UserForeignLoginNotifyMsgReply)(nil),  // 110: mqtt.v1.UserForeignLoginNotifyMsgReply
	(*SendMessage)(nil),                     // 111: mqtt.v1.SendMessage
	(*UserAnnouncementsInfoMsgReq)(nil),     // 112: mqtt.v1.UserAnnouncementsInfoMsgReq
	(*UserAnnouncementsInfoMsgReply)(nil),   // 113: mqtt.v1.UserAnnouncementsInfoMsgReply
	(*AnnouncementsInfo)(nil),               // 114: mqtt.v1.AnnouncementsInfo
	(*FarmAgreementInfoMsgReq)(nil),         // 115: mqtt.v1.FarmAgreementInfoMsgReq
	(*FarmAgreementInfoMsgReply)(nil),       // 116: mqtt.v1.FarmAgreementInfoMsgReply
	(*UserTransactionRecordsMsgReq)(nil),    // 117: mqtt.v1.UserTransactionRecordsMsgReq
	(*UserTransactionRecordsMsgReply)(nil),  // 118: mqtt.v1.UserTransactionRecordsMsgReply
	(*TransactionRecord)(nil),               // 119: mqtt.v1.TransactionRecord
	(*FarmTransactionRecordsMsgReq)(nil),    // 120: mqtt.v1.FarmTransactionRecordsMsgReq
	(*FarmTransactionRecordsMsgReply)(nil),  // 121: mqtt.v1.FarmTransactionRecordsMsgReply
	(*FarmTransactionRecord)(nil),           // 122: mqtt.v1.FarmTransactionRecord
	(*CurrencyInfoMsgReq)(nil),              // 123: mqtt.v1.CurrencyInfoMsgReq
	(*CurrencyInfoMsgReqReply)(nil),         // 124: mqtt.v1.CurrencyInfoMsgReqReply
	(*CurrencyInfo)(nil),                    // 125: mqtt.v1.CurrencyInfo
	(*GetAgentIncomeOverviewMsgReq)(nil),    // 126: mqtt.v1.GetAgentIncomeOverviewMsgReq
	(*GetAgentIncomeOverviewMsgReply)(nil),  // 127: mqtt.v1.GetAgentIncomeOverviewMsgReply
	(*GetAgentDownlineStatsMsgReq)(nil),     // 128: mqtt.v1.GetAgentDownlineStatsMsgReq
	(*GetAgentDownlineStatsMsgReply)(nil),   // 129: mqtt.v1.GetAgentDownlineStatsMsgReply
	(*GetAgentDownlineListMsgReq)(nil),      // 130: mqtt.v1.GetAgentDownlineListMsgReq
	(*GetAgentDownlineListMsgReply)(nil),    // 131: mqtt.v1.GetAgentDownlineListMsgReply
	(*DownlineMember)(nil),                  // 132: mqtt.v1.DownlineMember
	(*GetAgentIncomeDetailsMsgReq)(nil),     // 133: mqtt.v1.GetAgentIncomeDetailsMsgReq
	(*GetAgentIncomeDetailsMsgReply)(nil),   // 134: mqtt.v1.GetAgentIncomeDetailsMsgReply
	(*IncomeDetail)(nil),                    // 135: mqtt.v1.IncomeDetail
	(*AgentRuleInfoMsgReq)(nil),             // 136: mqtt.v1.AgentRuleInfoMsgReq
	(*AgentRuleInfoMsgReply)(nil),           // 137: mqtt.v1.AgentRuleInfoMsgReply
	(*DepositRewards)(nil),                  // 138: mqtt.v1.DepositRewards
	(*CollectionRewards)(nil),               // 139: mqtt.v1.CollectionRewards
	nil,                                     // 140: mqtt.v1.UserNotificationInfo.ParamsEntry
}
var file_mqtt_v1_mqtt_proto_depIdxs = []int32{
	0,   // 0: mqtt.v1.MessageWrapper.msg_id:type_name -> mqtt.v1.MessageID
	22,  // 1: mqtt.v1.UserPersonalInfoMsgReply.vip_info:type_name -> mqtt.v1.VipInfo
	29,  // 2: mqtt.v1.UserPersonalInfoMsgReply.wallets:type_name -> mqtt.v1.UserWallet
	30,  // 3: mqtt.v1.UserPersonalInfoMsgReply.balances:type_name -> mqtt.v1.UserBalance
	7,   // 4: mqtt.v1.UserEditPersonalInfoMsgReq.has_completed_tutorial:type_name -> mqtt.v1.BooleanStatus
	7,   // 5: mqtt.v1.UserEditPersonalInfoMsgReq.has_received_free_gift:type_name -> mqtt.v1.BooleanStatus
	6,   // 6: mqtt.v1.UserWallet.usage_type:type_name -> mqtt.v1.WalletUsageType
	7,   // 7: mqtt.v1.UserWallet.is_default_deposit:type_name -> mqtt.v1.BooleanStatus
	7,   // 8: mqtt.v1.UserWallet.is_default_withdrawal:type_name -> mqtt.v1.BooleanStatus
	5,   // 9: mqtt.v1.UserBalance.wallet_type:type_name -> mqtt.v1.WalletType
	8,   // 10: mqtt.v1.UserStorageInfoMsgReq.product_type:type_name -> mqtt.v1.ProductType
	33,  // 11: mqtt.v1.UserStorageInfoMsgReply.rows:type_name -> mqtt.v1.UserStorageDetail
	8,   // 12: mqtt.v1.UserStorageDetail.product_type:type_name -> mqtt.v1.ProductType
	36,  // 13: mqtt.v1.FarmsStoreInfoMsgReply.rows:type_name -> mqtt.v1.StoreInfo
	8,   // 14: mqtt.v1.StoreInfo.product_type:type_name -> mqtt.v1.ProductType
	7,   // 15: mqtt.v1.StoreInfo.is_free:type_name -> mqtt.v1.BooleanStatus
	7,   // 16: mqtt.v1.StoreInfo.is_enabled:type_name -> mqtt.v1.BooleanStatus
	7,   // 17: mqtt.v1.UserPurchaseGoodsMsgReq.is_free:type_name -> mqtt.v1.BooleanStatus
	41,  // 18: mqtt.v1.CropsInfoListMsgReply.rows:type_name -> mqtt.v1.CropsProductInfo
	7,   // 19: mqtt.v1.CropsProductInfo.is_available:type_name -> mqtt.v1.BooleanStatus
	7,   // 20: mqtt.v1.CropsProductInfo.is_enabled:type_name -> mqtt.v1.BooleanStatus
	7,   // 21: mqtt.v1.UserFarmInfoMsgReply.has_received_free_gift:type_name -> mqtt.v1.BooleanStatus
	7,   // 22: mqtt.v1.UserFarmInfoMsgReply.has_completed_tutorial:type_name -> mqtt.v1.BooleanStatus
	46,  // 23: mqtt.v1.UserLandInfoMsgReply.rows:type_name -> mqtt.v1.UserLandDetail
	1,   // 24: mqtt.v1.UserLandDetail.status:type_name -> mqtt.v1.LandStatus
	47,  // 25: mqtt.v1.UserLandDetail.planted_plant:type_name -> mqtt.v1.UserPlantingDetail
	2,   // 26: mqtt.v1.UserPlantingDetail.is_harvested:type_name -> mqtt.v1.HarvestStatus
	3,   // 27: mqtt.v1.UserPlantingDetail.status:type_name -> mqtt.v1.GrowthStatus
	4,   // 28: mqtt.v1.UserFarmOpsMsgReq.operate_type:type_name -> mqtt.v1.FarmOperationType
	22,  // 29: mqtt.v1.LookUserFarmsInfoMsgReply.vip_info:type_name -> mqtt.v1.VipInfo
	46,  // 30: mqtt.v1.LookUserFarmsInfoMsgReply.land_detail:type_name -> mqtt.v1.UserLandDetail
	54,  // 31: mqtt.v1.LookUserFarmsInfoMsgReply.fortune_tree:type_name -> mqtt.v1.UserFortuneTreeInfo
	59,  // 32: mqtt.v1.AllUserRankingInfoMsgReply.rows:type_name -> mqtt.v1.FriendRankingInfo
	60,  // 33: mqtt.v1.AllUserRankingInfoMsgReply.my_ranking:type_name -> mqtt.v1.MyRankingInfo
	59,  // 34: mqtt.v1.UserFriendRankingInfoMsgReply.rows:type_name -> mqtt.v1.FriendRankingInfo
	60,  // 35: mqtt.v1.UserFriendRankingInfoMsgReply.my_ranking:type_name -> mqtt.v1.MyRankingInfo
	67,  // 36: mqtt.v1.VipLevelInfoMsgReply.rows:type_name -> mqtt.v1.VIPLevelInfo
	70,  // 37: mqtt.v1.GetMerchantListMsgReply.rows:type_name -> mqtt.v1.MerchantInfo
	77,  // 38: mqtt.v1.RechargeChannelsInfoMsgReply.rows:type_name -> mqtt.v1.RechargeChannel
	80,  // 39: mqtt.v1.UserRechargeInfoMsgReply.recharge_info:type_name -> mqtt.v1.RechargeInfo
	80,  // 40: mqtt.v1.UserRechargeConfirmMsgReply.recharge_info:type_name -> mqtt.v1.RechargeInfo
	85,  // 41: mqtt.v1.UserWithdrawInfoMsgReply.withdraw_info:type_name -> mqtt.v1.WithdrawInfo
	88,  // 42: mqtt.v1.UserWithdrawAccountInfoMsgReply.rows:type_name -> mqtt.v1.WithdrawAccount
	94,  // 43: mqtt.v1.GetBankListInfoMsgReply.rows:type_name -> mqtt.v1.BankConfig
	97,  // 44: mqtt.v1.GetPaymentConfListMsgReply.rows:type_name -> mqtt.v1.PaymentConfInfo
	77,  // 45: mqtt.v1.PaymentConfInfo.recharge_channel:type_name -> mqtt.v1.RechargeChannel
	89,  // 46: mqtt.v1.PaymentConfInfo.withdraw_channel:type_name -> mqtt.v1.WithdrawChannel
	100, // 47: mqtt.v1.GetPendingOrderMsgReply.rows:type_name -> mqtt.v1.OrderInfo
	102, // 48: mqtt.v1.UserNotificationInfoMsgReply.rows:type_name -> mqtt.v1.UserNotificationInfo
	9,   // 49: mqtt.v1.UserNotificationInfo.type:type_name -> mqtt.v1.NotificationType
	10,  // 50: mqtt.v1.UserNotificationInfo.sub_type:type_name -> mqtt.v1.NotificationSubType
	140, // 51: mqtt.v1.UserNotificationInfo.params:type_name -> mqtt.v1.UserNotificationInfo.ParamsEntry
	5,   // 52: mqtt.v1.UserBalanceInfoMsgReply.wallet_type:type_name -> mqtt.v1.WalletType
	2,   // 53: mqtt.v1.UserLandStatusInfoMsgReply.is_harvested:type_name -> mqtt.v1.HarvestStatus
	3,   // 54: mqtt.v1.UserLandStatusInfoMsgReply.status:type_name -> mqtt.v1.GrowthStatus
	2,   // 55: mqtt.v1.UserFortuneTreeStatusMsgReply.is_ready_to_harvest:type_name -> mqtt.v1.HarvestStatus
	67,  // 56: mqtt.v1.UserVipInfoMsgReply.vip_before_upgrade:type_name -> mqtt.v1.VIPLevelInfo
	67,  // 57: mqtt.v1.UserVipInfoMsgReply.vip_after_upgrade:type_name -> mqtt.v1.VIPLevelInfo
	109, // 58: mqtt.v1.UserSubRegisterNotifyMsgReply.user_info:type_name -> mqtt.v1.UserSimpleInfo
	109, // 59: mqtt.v1.UserSubRegisterNotifyMsgReply.user_sub_info:type_name -> mqtt.v1.UserSimpleInfo
	114, // 60: mqtt.v1.UserAnnouncementsInfoMsgReply.rows:type_name -> mqtt.v1.AnnouncementsInfo
	119, // 61: mqtt.v1.UserTransactionRecordsMsgReply.rows:type_name -> mqtt.v1.TransactionRecord
	122, // 62: mqtt.v1.FarmTransactionRecordsMsgReply.rows:type_name -> mqtt.v1.FarmTransactionRecord
	125, // 63: mqtt.v1.CurrencyInfoMsgReqReply.rows:type_name -> mqtt.v1.CurrencyInfo
	132, // 64: mqtt.v1.GetAgentDownlineListMsgReply.rows:type_name -> mqtt.v1.DownlineMember
	135, // 65: mqtt.v1.GetAgentIncomeDetailsMsgReply.rows:type_name -> mqtt.v1.IncomeDetail
	138, // 66: mqtt.v1.AgentRuleInfoMsgReply.deposit_rules:type_name -> mqtt.v1.DepositRewards
	139, // 67: mqtt.v1.AgentRuleInfoMsgReply.harvest_rules:type_name -> mqtt.v1.CollectionRewards
	68,  // [68:68] is the sub-list for method output_type
	68,  // [68:68] is the sub-list for method input_type
	68,  // [68:68] is the sub-list for extension type_name
	68,  // [68:68] is the sub-list for extension extendee
	0,   // [0:68] is the sub-list for field type_name
}

func init() { file_mqtt_v1_mqtt_proto_init() }
func file_mqtt_v1_mqtt_proto_init() {
	if File_mqtt_v1_mqtt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mqtt_v1_mqtt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHeartBeatMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHeartBeatMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditPersonalInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditSensitiveInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditSensitiveInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySecondaryPasswordMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySecondaryPasswordMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPurchaseGoodsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPurchaseGoodsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsInfoListMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsInfoListMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPlantingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmOpsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmOpsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFarmsNameMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFarmsNameMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUserFarmsInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUserFarmsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserRankingInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserRankingInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriendRankingInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriendRankingInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOpsFortuneTreeMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOpsFortuneTreeMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevelInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevelInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VIPLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantListMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerchantListMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantExchangeRateMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantExchangeRateMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitForRedemptionMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitForRedemptionMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannelsInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannelsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeConfirmMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeConfirmMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawAccountInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawAccountInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetWithdrawChannelMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetWithdrawChannelMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentConfListMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentConfListMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentConfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingOrderMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingOrderMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNotificationInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNotificationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBalanceInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandStatusInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeStatusMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandCropCanOpsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVipInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSubRegisterNotifyMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserForeignLoginNotifyMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnnouncementsInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnnouncementsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncementsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmAgreementInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmAgreementInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransactionRecordsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransactionRecordsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmTransactionRecordsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmTransactionRecordsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmTransactionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfoMsgReqReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentIncomeOverviewMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentIncomeOverviewMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentDownlineStatsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentDownlineStatsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentDownlineListMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentDownlineListMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlineMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentIncomeDetailsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentIncomeDetailsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRuleInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRuleInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mqtt_v1_mqtt_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mqtt_v1_mqtt_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   130,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mqtt_v1_mqtt_proto_goTypes,
		DependencyIndexes: file_mqtt_v1_mqtt_proto_depIdxs,
		EnumInfos:         file_mqtt_v1_mqtt_proto_enumTypes,
		MessageInfos:      file_mqtt_v1_mqtt_proto_msgTypes,
	}.Build()
	File_mqtt_v1_mqtt_proto = out.File
	file_mqtt_v1_mqtt_proto_rawDesc = nil
	file_mqtt_v1_mqtt_proto_goTypes = nil
	file_mqtt_v1_mqtt_proto_depIdxs = nil
}
