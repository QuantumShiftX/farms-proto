// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.3
// source: mqtt/v1/mqtt.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MessageID 枚举
// 定义系统中所有消息类型的唯一标识符
type MessageID int32

const (
	// 未知消息
	MessageID_MESSAGE_ID_UNSPECIFIED MessageID = 0
	// 基础消息 (1-99)
	MessageID_DEMO                        MessageID = 1
	MessageID_USER_AUTH_INFO_MSG          MessageID = 2
	MessageID_USER_PERSONAL_INFO_MSG      MessageID = 3
	MessageID_USER_EDIT_PERSONAL_INFO_MSG MessageID = 4
	// 钱包相关消息 (100-199)
	MessageID_USER_WALLET  MessageID = 100
	MessageID_USER_BALANCE MessageID = 101
	// 商店相关消息 (200-299)
	MessageID_FARMS_STORE_INFO_MSG MessageID = 200
	MessageID_STORE_INFO           MessageID = 201
	// 仓库相关消息 (300-399)
	MessageID_USER_STORAGE_INFO_MSG MessageID = 300
	MessageID_USER_STORAGE_DETAIL   MessageID = 301
	// 农场相关消息 (400-499)
	MessageID_USER_FARM_INFO_MSG   MessageID = 400
	MessageID_USER_LAND_INFO_MSG   MessageID = 401
	MessageID_USER_PLANTING_DETAIL MessageID = 402
	MessageID_USER_FARM_OPS_MSG    MessageID = 403
	// 心跳连接
	MessageID_HEART_BEAT MessageID = 8888
	// 错误消息 (500500+)
	MessageID_ERR_COMMON         MessageID = 500500 // 通用错误
	MessageID_ERR_PACKET         MessageID = 500501 // 数据包错误
	MessageID_ERR_PARAM          MessageID = 500502 // 参数错误
	MessageID_ERR_USER_NOT_EXIST MessageID = 500503 // 用户不存在
	MessageID_ERR_USER_AUTH      MessageID = 500504 // 认证失败
)

// Enum value maps for MessageID.
var (
	MessageID_name = map[int32]string{
		0:      "MESSAGE_ID_UNSPECIFIED",
		1:      "DEMO",
		2:      "USER_AUTH_INFO_MSG",
		3:      "USER_PERSONAL_INFO_MSG",
		4:      "USER_EDIT_PERSONAL_INFO_MSG",
		100:    "USER_WALLET",
		101:    "USER_BALANCE",
		200:    "FARMS_STORE_INFO_MSG",
		201:    "STORE_INFO",
		300:    "USER_STORAGE_INFO_MSG",
		301:    "USER_STORAGE_DETAIL",
		400:    "USER_FARM_INFO_MSG",
		401:    "USER_LAND_INFO_MSG",
		402:    "USER_PLANTING_DETAIL",
		403:    "USER_FARM_OPS_MSG",
		8888:   "HEART_BEAT",
		500500: "ERR_COMMON",
		500501: "ERR_PACKET",
		500502: "ERR_PARAM",
		500503: "ERR_USER_NOT_EXIST",
		500504: "ERR_USER_AUTH",
	}
	MessageID_value = map[string]int32{
		"MESSAGE_ID_UNSPECIFIED":      0,
		"DEMO":                        1,
		"USER_AUTH_INFO_MSG":          2,
		"USER_PERSONAL_INFO_MSG":      3,
		"USER_EDIT_PERSONAL_INFO_MSG": 4,
		"USER_WALLET":                 100,
		"USER_BALANCE":                101,
		"FARMS_STORE_INFO_MSG":        200,
		"STORE_INFO":                  201,
		"USER_STORAGE_INFO_MSG":       300,
		"USER_STORAGE_DETAIL":         301,
		"USER_FARM_INFO_MSG":          400,
		"USER_LAND_INFO_MSG":          401,
		"USER_PLANTING_DETAIL":        402,
		"USER_FARM_OPS_MSG":           403,
		"HEART_BEAT":                  8888,
		"ERR_COMMON":                  500500,
		"ERR_PACKET":                  500501,
		"ERR_PARAM":                   500502,
		"ERR_USER_NOT_EXIST":          500503,
		"ERR_USER_AUTH":               500504,
	}
)

func (x MessageID) Enum() *MessageID {
	p := new(MessageID)
	*p = x
	return p
}

func (x MessageID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageID) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[0].Descriptor()
}

func (MessageID) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[0]
}

func (x MessageID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageID.Descriptor instead.
func (MessageID) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{0}
}

// *
// 土地状态枚举
// 定义土地的各种可能状态
type LandStatus int32

const (
	LandStatus_LAND_STATUS_UNSPECIFIED LandStatus = 0 // 未指定状态
	LandStatus_UNCULTIVATED            LandStatus = 1 // 未开垦
	LandStatus_CULTIVATED_EMPTY        LandStatus = 2 // 已开垦未种植
	LandStatus_PLANTED                 LandStatus = 3 // 已种植
)

// Enum value maps for LandStatus.
var (
	LandStatus_name = map[int32]string{
		0: "LAND_STATUS_UNSPECIFIED",
		1: "UNCULTIVATED",
		2: "CULTIVATED_EMPTY",
		3: "PLANTED",
	}
	LandStatus_value = map[string]int32{
		"LAND_STATUS_UNSPECIFIED": 0,
		"UNCULTIVATED":            1,
		"CULTIVATED_EMPTY":        2,
		"PLANTED":                 3,
	}
)

func (x LandStatus) Enum() *LandStatus {
	p := new(LandStatus)
	*p = x
	return p
}

func (x LandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[1].Descriptor()
}

func (LandStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[1]
}

func (x LandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandStatus.Descriptor instead.
func (LandStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{1}
}

// *
// 作物收获状态枚举
// 定义作物是否已被收获
type HarvestStatus int32

const (
	HarvestStatus_HARVEST_STATUS_UNSPECIFIED HarvestStatus = 0 // 未指定状态
	HarvestStatus_NOT_HARVESTED              HarvestStatus = 1 // 未收获
	HarvestStatus_HARVESTED                  HarvestStatus = 2 // 已收获
)

// Enum value maps for HarvestStatus.
var (
	HarvestStatus_name = map[int32]string{
		0: "HARVEST_STATUS_UNSPECIFIED",
		1: "NOT_HARVESTED",
		2: "HARVESTED",
	}
	HarvestStatus_value = map[string]int32{
		"HARVEST_STATUS_UNSPECIFIED": 0,
		"NOT_HARVESTED":              1,
		"HARVESTED":                  2,
	}
)

func (x HarvestStatus) Enum() *HarvestStatus {
	p := new(HarvestStatus)
	*p = x
	return p
}

func (x HarvestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HarvestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[2].Descriptor()
}

func (HarvestStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[2]
}

func (x HarvestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HarvestStatus.Descriptor instead.
func (HarvestStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{2}
}

// *
// 作物生长状态枚举
// 定义作物的生长阶段
type GrowthStatus int32

const (
	GrowthStatus_GROWTH_STATUS_UNSPECIFIED GrowthStatus = 0 // 未指定状态
	GrowthStatus_SEED_STAGE                GrowthStatus = 1 // 种子阶段
	GrowthStatus_SPROUTING_STAGE           GrowthStatus = 2 // 发芽阶段
	GrowthStatus_GROWTH_STAGE              GrowthStatus = 3 // 成长阶段
	GrowthStatus_FLOWERING_STAGE           GrowthStatus = 4 // 开花阶段
	GrowthStatus_FRUITING_STAGE            GrowthStatus = 5 // 结果阶段
	GrowthStatus_MATURE_STAGE              GrowthStatus = 6 // 成熟阶段
)

// Enum value maps for GrowthStatus.
var (
	GrowthStatus_name = map[int32]string{
		0: "GROWTH_STATUS_UNSPECIFIED",
		1: "SEED_STAGE",
		2: "SPROUTING_STAGE",
		3: "GROWTH_STAGE",
		4: "FLOWERING_STAGE",
		5: "FRUITING_STAGE",
		6: "MATURE_STAGE",
	}
	GrowthStatus_value = map[string]int32{
		"GROWTH_STATUS_UNSPECIFIED": 0,
		"SEED_STAGE":                1,
		"SPROUTING_STAGE":           2,
		"GROWTH_STAGE":              3,
		"FLOWERING_STAGE":           4,
		"FRUITING_STAGE":            5,
		"MATURE_STAGE":              6,
	}
)

func (x GrowthStatus) Enum() *GrowthStatus {
	p := new(GrowthStatus)
	*p = x
	return p
}

func (x GrowthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrowthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[3].Descriptor()
}

func (GrowthStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[3]
}

func (x GrowthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrowthStatus.Descriptor instead.
func (GrowthStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{3}
}

// *
// 农场操作类型枚举
// 定义可在农场上执行的操作类型
type FarmOperationType int32

const (
	FarmOperationType_OPERATION_UNSPECIFIED FarmOperationType = 0 // 未指定操作
	FarmOperationType_PLANTING              FarmOperationType = 1 // 播种 - 在指定土地上种植作物
	FarmOperationType_WATERING              FarmOperationType = 2 // 浇水 - 为指定土地上的作物浇水
	FarmOperationType_FERTILIZING           FarmOperationType = 3 // 施肥 - 为指定土地上的作物施肥
	FarmOperationType_HARVESTING            FarmOperationType = 4 // 采摘 - 收获指定土地上成熟的作物
)

// Enum value maps for FarmOperationType.
var (
	FarmOperationType_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "PLANTING",
		2: "WATERING",
		3: "FERTILIZING",
		4: "HARVESTING",
	}
	FarmOperationType_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"PLANTING":              1,
		"WATERING":              2,
		"FERTILIZING":           3,
		"HARVESTING":            4,
	}
)

func (x FarmOperationType) Enum() *FarmOperationType {
	p := new(FarmOperationType)
	*p = x
	return p
}

func (x FarmOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[4].Descriptor()
}

func (FarmOperationType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[4]
}

func (x FarmOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FarmOperationType.Descriptor instead.
func (FarmOperationType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{4}
}

// *
// 钱包类型枚举
// 定义用户钱包的类型
type WalletType int32

const (
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0 // 未指定类型
	WalletType_USERS_WALLET            WalletType = 1 // 用户钱包
	WalletType_AGENT_WALLET            WalletType = 2 // 代理钱包
	WalletType_REWARD_WALLET           WalletType = 3 // 奖励钱包
	WalletType_USDT_WALLET             WalletType = 4 // USDT钱包
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "WALLET_TYPE_UNSPECIFIED",
		1: "USERS_WALLET",
		2: "AGENT_WALLET",
		3: "REWARD_WALLET",
		4: "USDT_WALLET",
	}
	WalletType_value = map[string]int32{
		"WALLET_TYPE_UNSPECIFIED": 0,
		"USERS_WALLET":            1,
		"AGENT_WALLET":            2,
		"REWARD_WALLET":           3,
		"USDT_WALLET":             4,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[5].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[5]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{5}
}

// *
// 钱包用途类型枚举
// 定义钱包的使用用途
type WalletUsageType int32

const (
	WalletUsageType_USAGE_TYPE_UNSPECIFIED WalletUsageType = 0 // 未指定用途
	WalletUsageType_DEPOSIT_ONLY           WalletUsageType = 1 // 仅存款
	WalletUsageType_WITHDRAWAL_ONLY        WalletUsageType = 2 // 仅提款
	WalletUsageType_DEPOSIT_AND_WITHDRAWAL WalletUsageType = 3 // 存款和提款
)

// Enum value maps for WalletUsageType.
var (
	WalletUsageType_name = map[int32]string{
		0: "USAGE_TYPE_UNSPECIFIED",
		1: "DEPOSIT_ONLY",
		2: "WITHDRAWAL_ONLY",
		3: "DEPOSIT_AND_WITHDRAWAL",
	}
	WalletUsageType_value = map[string]int32{
		"USAGE_TYPE_UNSPECIFIED": 0,
		"DEPOSIT_ONLY":           1,
		"WITHDRAWAL_ONLY":        2,
		"DEPOSIT_AND_WITHDRAWAL": 3,
	}
)

func (x WalletUsageType) Enum() *WalletUsageType {
	p := new(WalletUsageType)
	*p = x
	return p
}

func (x WalletUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[6].Descriptor()
}

func (WalletUsageType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[6]
}

func (x WalletUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletUsageType.Descriptor instead.
func (WalletUsageType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{6}
}

// *
// 是否状态枚举
// 通用的是否状态枚举（用于多个字段）
type BooleanStatus int32

const (
	BooleanStatus_BOOLEAN_UNSPECIFIED BooleanStatus = 0 // 未指定
	BooleanStatus_NO                  BooleanStatus = 1 // 否
	BooleanStatus_YES                 BooleanStatus = 2 // 是
)

// Enum value maps for BooleanStatus.
var (
	BooleanStatus_name = map[int32]string{
		0: "BOOLEAN_UNSPECIFIED",
		1: "NO",
		2: "YES",
	}
	BooleanStatus_value = map[string]int32{
		"BOOLEAN_UNSPECIFIED": 0,
		"NO":                  1,
		"YES":                 2,
	}
)

func (x BooleanStatus) Enum() *BooleanStatus {
	p := new(BooleanStatus)
	*p = x
	return p
}

func (x BooleanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[7].Descriptor()
}

func (BooleanStatus) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[7]
}

func (x BooleanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanStatus.Descriptor instead.
func (BooleanStatus) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{7}
}

// *
// 商品类型枚举
// 定义商店中商品的类型
type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0 // 未指定类型
	ProductType_SEED                     ProductType = 1 // 种子
	ProductType_FERTILIZER               ProductType = 2 // 肥料
	ProductType_OTHER                    ProductType = 3 // 其他道具
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "SEED",
		2: "FERTILIZER",
		3: "OTHER",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"SEED":                     1,
		"FERTILIZER":               2,
		"OTHER":                    3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_v1_mqtt_proto_enumTypes[8].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_mqtt_v1_mqtt_proto_enumTypes[8]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{8}
}

// *
// MessageWrapper 消息包装结构
// 所有消息的外层包装，包含消息ID和消息内容
type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     MessageID `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3,enum=mqtt.v1.MessageID" json:"msg_id,omitempty"` // 消息ID
	Payload   []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`                                  // 消息内容，经过序列化的二进制数据
	Timestamp int64     `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // 消息时间戳
	SessionId string    `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`             // 会话ID
	Tags      []string  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`                                        // 消息标签
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{0}
}

func (x *MessageWrapper) GetMsgId() MessageID {
	if x != nil {
		return x.MsgId
	}
	return MessageID_MESSAGE_ID_UNSPECIFIED
}

func (x *MessageWrapper) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MessageWrapper) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MessageWrapper) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MessageWrapper) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// *
// MQTT请求消息基础结构
// 所有请求消息的基础结构，可根据需要扩展
type MsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReq) Reset() {
	*x = MsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReq) ProtoMessage() {}

func (x *MsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReq.ProtoReflect.Descriptor instead.
func (*MsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{1}
}

// *
// MQTT响应消息基础结构
// 所有响应消息的基础结构，可根据需要扩展
type MsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReply) Reset() {
	*x = MsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReply) ProtoMessage() {}

func (x *MsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReply.ProtoReflect.Descriptor instead.
func (*MsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{2}
}

// *
// 获取用户请求是否合法
// 用token校验用户身份
type UserAuthInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserAuthInfoMsgReq) Reset() {
	*x = UserAuthInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReq) ProtoMessage() {}

func (x *UserAuthInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{3}
}

func (x *UserAuthInfoMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// 鉴权响应
// 用token校验用户身份
type UserAuthInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	Pid          int64  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`                                      // 上级ID（邀请用户的ID）
	LanguageCode string `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"` // 语言代码
	CurrencyCode string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码
}

func (x *UserAuthInfoMsgReply) Reset() {
	*x = UserAuthInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReply) ProtoMessage() {}

func (x *UserAuthInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{4}
}

func (x *UserAuthInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserAuthInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// *
// 获取用户个人信息请求
// 用于查询当前用户的基本个人信息
type UserPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserPersonalInfoMsgReq) Reset() {
	*x = UserPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{5}
}

func (x *UserPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户个人信息响应
// 包含用户的详细个人信息
type UserPersonalInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64          `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	Pid            int64          `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`                                             // 上级ID（邀请用户的ID）
	Username       string         `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                    // 账号名称
	LanguageCode   string         `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`        // 语言代码
	CurrencyCode   string         `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`        // 币种代码
	VipLevelId     int32          `protobuf:"varint,8,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`           // 会员等级ID（关联user_vip_levels表）
	Remark         string         `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`                                       // 用户备注
	LastLoginTime  int64          `protobuf:"varint,12,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` // 最后登录时间（Unix时间戳）
	InvitationCode string         `protobuf:"bytes,13,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"` // 用户的邀请码
	Avatar         string         `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`                                       // 用户头像URL
	Phone          string         `protobuf:"bytes,15,opt,name=phone,proto3" json:"phone,omitempty"`                                         // 用户手机号
	Email          string         `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`                                         // 用户邮箱
	Wallets        []*UserWallet  `protobuf:"bytes,17,rep,name=wallets,proto3" json:"wallets,omitempty"`                                     // 用户的钱包地址列表
	Balances       []*UserBalance `protobuf:"bytes,18,rep,name=balances,proto3" json:"balances,omitempty"`                                   // 用户的各类钱包余额列表
}

func (x *UserPersonalInfoMsgReply) Reset() {
	*x = UserPersonalInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReply) ProtoMessage() {}

func (x *UserPersonalInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{6}
}

func (x *UserPersonalInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetVipLevelId() int32 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetWallets() []*UserWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetBalances() []*UserBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// *
// 编辑用户个人信息请求
// 用于更新用户的个人信息设置
type UserEditPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                        // 用户身份验证令牌，必填
	Avatar               string        `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                                                       // 用户形象(头像信息)
	FarmName             string        `protobuf:"bytes,3,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                   // 农场名称，可选，修改时使用
	HasCompletedTutorial BooleanStatus `protobuf:"varint,4,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=mqtt.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 新手教程状态（YES:已完成, NO:未完成）
	HasReceivedFreeGift  BooleanStatus `protobuf:"varint,5,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=mqtt.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`  // 是否领取免费种子（YES:已完成, NO:未完成）
}

func (x *UserEditPersonalInfoMsgReq) Reset() {
	*x = UserEditPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserEditPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEditPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{7}
}

func (x *UserEditPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEditPersonalInfoMsgReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserEditPersonalInfoMsgReq) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 用户钱包地址信息
// 表示用户的各种加密货币钱包地址
type UserWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                           // 主键ID
	UserId              int64           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                     // 用户ID
	WalletAddress       string          `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`                                                 // 钱包地址
	WalletName          string          `protobuf:"bytes,4,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`                                                          // 钱包名称/备注
	WalletType          string          `protobuf:"bytes,5,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                                                          // 钱包类型(ETH/BTC等)
	UsageType           WalletUsageType `protobuf:"varint,6,opt,name=usage_type,json=usageType,proto3,enum=mqtt.v1.WalletUsageType" json:"usage_type,omitempty"`                               // 用途类型
	IsDefaultDeposit    BooleanStatus   `protobuf:"varint,7,opt,name=is_default_deposit,json=isDefaultDeposit,proto3,enum=mqtt.v1.BooleanStatus" json:"is_default_deposit,omitempty"`          // 是否默认存款地址
	IsDefaultWithdrawal BooleanStatus   `protobuf:"varint,8,opt,name=is_default_withdrawal,json=isDefaultWithdrawal,proto3,enum=mqtt.v1.BooleanStatus" json:"is_default_withdrawal,omitempty"` // 是否默认提款地址
}

func (x *UserWallet) Reset() {
	*x = UserWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWallet) ProtoMessage() {}

func (x *UserWallet) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWallet.ProtoReflect.Descriptor instead.
func (*UserWallet) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{8}
}

func (x *UserWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserWallet) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWallet) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *UserWallet) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *UserWallet) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *UserWallet) GetUsageType() WalletUsageType {
	if x != nil {
		return x.UsageType
	}
	return WalletUsageType_USAGE_TYPE_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultDeposit() BooleanStatus {
	if x != nil {
		return x.IsDefaultDeposit
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultWithdrawal() BooleanStatus {
	if x != nil {
		return x.IsDefaultWithdrawal
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 用户余额信息
// 表示用户在各类钱包中的余额状态
type UserBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 主键ID
	WalletType    WalletType `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=mqtt.v1.WalletType" json:"wallet_type,omitempty"` // 钱包类型
	UserId        int64      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                     // 用户ID
	Balance       int64      `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`                                                 // 可用余额
	LockedBalance int64      `protobuf:"varint,5,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`                // 锁定余额（如提现中等）
}

func (x *UserBalance) Reset() {
	*x = UserBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalance) ProtoMessage() {}

func (x *UserBalance) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalance.ProtoReflect.Descriptor instead.
func (*UserBalance) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{9}
}

func (x *UserBalance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBalance) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *UserBalance) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserBalance) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

// *
// 获取用户仓库信息请求
// 用于查询当前用户的仓库库存信息
type UserStorageInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page        int64       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int64       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProductType ProductType `protobuf:"varint,4,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"`
}

func (x *UserStorageInfoMsgReq) Reset() {
	*x = UserStorageInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReq) ProtoMessage() {}

func (x *UserStorageInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{10}
}

func (x *UserStorageInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

// *
// 用户仓库信息响应
// 包含用户仓库中的所有物品
type UserStorageInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*UserStorageDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 用户仓库物品列表
	Extend    string               `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *UserStorageInfoMsgReply) Reset() {
	*x = UserStorageInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReply) ProtoMessage() {}

func (x *UserStorageInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{11}
}

func (x *UserStorageInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetRows() []*UserStorageDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserStorageInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户仓库物品信息
// 表示用户仓库中的单个物品详细信息
type UserStorageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // 自增主键
	StorageId       int64       `protobuf:"varint,21,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                               // 仓库物品ID
	UserId          int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户ID，关联到用户表
	ProductType     ProductType `protobuf:"varint,3,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"` // 商品类型
	ProductId       int64       `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                // 商品ID，关联到对应产品配置表
	ProductName     string      `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 商品名称快照，保存购买时的名称
	ProductImageUrl string      `protobuf:"bytes,6,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`             // 商品图片地址快照，保存购买时的图片URL
	ProductQuantity int32       `protobuf:"varint,7,opt,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`              // 商品数量，表示用户拥有的该商品数量
	SkuId           int64       `protobuf:"varint,8,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                            // 商品SKU ID，关联到商品SKU配置表
	SkuName         string      `protobuf:"bytes,9,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                                       // SKU名称快照，保存购买时的SKU名称
	Price           int64       `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`                                                        // 商品价格快照，保存购买时的价格（单位：ustd）
	// 以下字段仅对种子类型有效
	GrowthTime           int64 `protobuf:"varint,11,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                               // 生长时间快照（单位：分钟）
	CoinReward           int64 `protobuf:"varint,12,opt,name=coin_reward,json=coinReward,proto3" json:"coin_reward,omitempty"`                               // 成熟后的收益快照（单位：代币）
	WateringFrequency    int64 `protobuf:"varint,22,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`          // 浇水频率（次/天）
	FertilizingFrequency int64 `protobuf:"varint,23,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"` //施肥频率（次/天)
	// 自己操作相关字段
	SelfTimeReducedPerWater           int64 `protobuf:"varint,13,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 自己每次浇水减少的时间快照（单位：分钟）
	SelfWaterReductionPercentage      int64 `protobuf:"varint,14,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 自己浇水减少时间的百分比快照（0-100）
	SelfTimeReducedPerFertilizer      int64 `protobuf:"varint,15,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 自己每次施肥减少的时间快照（单位：分钟）
	SelfFertilizerReductionPercentage int64 `protobuf:"varint,16,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 自己施肥减少时间的百分比快照（0-100）
	// 好友操作相关字段
	FriendWaterTimeReduction      int64 `protobuf:"varint,17,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                // 好友每次浇水减少的时间快照（单位：分钟）
	FriendWaterPercentage         int64 `protobuf:"varint,18,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                           // 好友浇水减少时间的百分比快照（0-100）
	FriendFertilizerTimeReduction int64 `protobuf:"varint,19,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"` // 好友每次施肥减少的时间快照（单位：分钟）
	FriendFertilizerPercentage    int64 `protobuf:"varint,20,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`            // 好友施肥减少时间的百分比快照（0-100）
}

func (x *UserStorageDetail) Reset() {
	*x = UserStorageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageDetail) ProtoMessage() {}

func (x *UserStorageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageDetail.ProtoReflect.Descriptor instead.
func (*UserStorageDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{12}
}

func (x *UserStorageDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserStorageDetail) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *UserStorageDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageDetail) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *UserStorageDetail) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UserStorageDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UserStorageDetail) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *UserStorageDetail) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

func (x *UserStorageDetail) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *UserStorageDetail) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

func (x *UserStorageDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserStorageDetail) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *UserStorageDetail) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *UserStorageDetail) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *UserStorageDetail) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *UserStorageDetail) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

// *
// 获取用户农场信息请求
// 用于查询当前用户的农场状态信息
type UserFarmInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserFarmInfoMsgReq) Reset() {
	*x = UserFarmInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReq) ProtoMessage() {}

func (x *UserFarmInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{13}
}

func (x *UserFarmInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户农场信息响应
// 包含用户农场的基本信息
type UserFarmInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                               // 主键ID
	FarmId                int64         `protobuf:"varint,2,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                                                         // 农场ID
	UserId                int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                         // 用户ID
	FarmName              string        `protobuf:"bytes,4,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                    // 农场名称
	TotalLandCount        int64         `protobuf:"varint,5,opt,name=total_land_count,json=totalLandCount,proto3" json:"total_land_count,omitempty"`                                               // 农场总土地数量
	WaterLimitPerDay      int64         `protobuf:"varint,6,opt,name=water_limit_per_day,json=waterLimitPerDay,proto3" json:"water_limit_per_day,omitempty"`                                       // 每日浇水限制次数
	FertilizerLimitPerDay int64         `protobuf:"varint,7,opt,name=fertilizer_limit_per_day,json=fertilizerLimitPerDay,proto3" json:"fertilizer_limit_per_day,omitempty"`                        // 每日作物施肥限制次数（每个作物）
	TotalRewardCoins      int64         `protobuf:"varint,8,opt,name=total_reward_coins,json=totalRewardCoins,proto3" json:"total_reward_coins,omitempty"`                                         // 农场总收益金币
	HasReceivedFreeGift   BooleanStatus `protobuf:"varint,9,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=mqtt.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`   // 是否已领取新用户免费商品
	HasCompletedTutorial  BooleanStatus `protobuf:"varint,10,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=mqtt.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 是否已参加过新手教程
}

func (x *UserFarmInfoMsgReply) Reset() {
	*x = UserFarmInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReply) ProtoMessage() {}

func (x *UserFarmInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{14}
}

func (x *UserFarmInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserFarmInfoMsgReply) GetTotalLandCount() int64 {
	if x != nil {
		return x.TotalLandCount
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetWaterLimitPerDay() int64 {
	if x != nil {
		return x.WaterLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFertilizerLimitPerDay() int64 {
	if x != nil {
		return x.FertilizerLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetTotalRewardCoins() int64 {
	if x != nil {
		return x.TotalRewardCoins
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserFarmInfoMsgReply) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 获取用户土地信息请求
// 用于查询当前用户的土地信息
type UserLandInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *UserLandInfoMsgReq) Reset() {
	*x = UserLandInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReq) ProtoMessage() {}

func (x *UserLandInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{15}
}

func (x *UserLandInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 用户土地信息响应
// 包含用户所有土地的信息列表
type UserLandInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64             `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*UserLandDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 用户土地信息列表
	Extend    string            `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *UserLandInfoMsgReply) Reset() {
	*x = UserLandInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReply) ProtoMessage() {}

func (x *UserLandInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{16}
}

func (x *UserLandInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetRows() []*UserLandDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserLandInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户土地详细信息
// 表示用户的单块土地的详细状态
type UserLandDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // UUID
	LandId       int64               `protobuf:"varint,2,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                        // 土地ID
	UserId       int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	FarmId       int64               `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                        // 农场ID
	PlantId      int64               `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                     // 种植记录ID
	Position     int64               `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`                                  // 土地位置编号（1-20暂时）
	Status       LandStatus          `protobuf:"varint,7,opt,name=status,proto3,enum=mqtt.v1.LandStatus" json:"status,omitempty"`              // 土地状态
	PlantedPlant *UserPlantingDetail `protobuf:"bytes,8,opt,name=planted_plant,json=plantedPlant,proto3,oneof" json:"planted_plant,omitempty"` // 种植信息，当status为PLANTED时才有值
}

func (x *UserLandDetail) Reset() {
	*x = UserLandDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandDetail) ProtoMessage() {}

func (x *UserLandDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandDetail.ProtoReflect.Descriptor instead.
func (*UserLandDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{17}
}

func (x *UserLandDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserLandDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserLandDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserLandDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserLandDetail) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *UserLandDetail) GetStatus() LandStatus {
	if x != nil {
		return x.Status
	}
	return LandStatus_LAND_STATUS_UNSPECIFIED
}

func (x *UserLandDetail) GetPlantedPlant() *UserPlantingDetail {
	if x != nil {
		return x.PlantedPlant
	}
	return nil
}

// *
// 用户种植记录详细信息
// 表示用户种植的单株作物的详细信息
type UserPlantingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // UUID
	PlantId         int64         `protobuf:"varint,2,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                                         // 种植记录ID
	UserId          int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                            // 用户ID
	FarmId          int64         `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                            // 农场ID
	LandId          int64         `protobuf:"varint,5,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                                            // 土地ID
	CropName        string        `protobuf:"bytes,6,opt,name=crop_name,json=cropName,proto3" json:"crop_name,omitempty"`                                       // 作物名称
	PlantTime       int64         `protobuf:"varint,7,opt,name=plant_time,json=plantTime,proto3" json:"plant_time,omitempty"`                                   // 种植时间（Unix时间戳）
	WaterCount      int64         `protobuf:"varint,8,opt,name=water_count,json=waterCount,proto3" json:"water_count,omitempty"`                                // 已浇水总次数
	FertilizerCount int64         `protobuf:"varint,9,opt,name=fertilizer_count,json=fertilizerCount,proto3" json:"fertilizer_count,omitempty"`                 // 已施肥总次数
	IsHarvested     HarvestStatus `protobuf:"varint,10,opt,name=is_harvested,json=isHarvested,proto3,enum=mqtt.v1.HarvestStatus" json:"is_harvested,omitempty"` // 是否已收获
	HarvestedAt     int64         `protobuf:"varint,11,opt,name=harvested_at,json=harvestedAt,proto3" json:"harvested_at,omitempty"`                            // 收获时间（Unix时间戳）
	CoinsEarned     int64         `protobuf:"varint,12,opt,name=coins_earned,json=coinsEarned,proto3" json:"coins_earned,omitempty"`                            // 作物产生的金币数量
	Status          GrowthStatus  `protobuf:"varint,13,opt,name=status,proto3,enum=mqtt.v1.GrowthStatus" json:"status,omitempty"`                               // 生长状态
}

func (x *UserPlantingDetail) Reset() {
	*x = UserPlantingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPlantingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPlantingDetail) ProtoMessage() {}

func (x *UserPlantingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPlantingDetail.ProtoReflect.Descriptor instead.
func (*UserPlantingDetail) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{18}
}

func (x *UserPlantingDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserPlantingDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserPlantingDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPlantingDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserPlantingDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserPlantingDetail) GetCropName() string {
	if x != nil {
		return x.CropName
	}
	return ""
}

func (x *UserPlantingDetail) GetPlantTime() int64 {
	if x != nil {
		return x.PlantTime
	}
	return 0
}

func (x *UserPlantingDetail) GetWaterCount() int64 {
	if x != nil {
		return x.WaterCount
	}
	return 0
}

func (x *UserPlantingDetail) GetFertilizerCount() int64 {
	if x != nil {
		return x.FertilizerCount
	}
	return 0
}

func (x *UserPlantingDetail) GetIsHarvested() HarvestStatus {
	if x != nil {
		return x.IsHarvested
	}
	return HarvestStatus_HARVEST_STATUS_UNSPECIFIED
}

func (x *UserPlantingDetail) GetHarvestedAt() int64 {
	if x != nil {
		return x.HarvestedAt
	}
	return 0
}

func (x *UserPlantingDetail) GetCoinsEarned() int64 {
	if x != nil {
		return x.CoinsEarned
	}
	return 0
}

func (x *UserPlantingDetail) GetStatus() GrowthStatus {
	if x != nil {
		return x.Status
	}
	return GrowthStatus_GROWTH_STATUS_UNSPECIFIED
}

// *
// 用户农场操作请求
// 用于对自己或他人的农场进行各种操作
type UserFarmOpsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                               // 用户身份验证令牌，必填
	OperateType    FarmOperationType `protobuf:"varint,2,opt,name=operate_type,json=operateType,proto3,enum=mqtt.v1.FarmOperationType" json:"operate_type,omitempty"` // 操作类型，必填
	OpToUserId     int64             `protobuf:"varint,3,opt,name=op_to_user_id,json=opToUserId,proto3" json:"op_to_user_id,omitempty"`                               // 被操作的用户ID，必填（可以是自己或好友ID）
	OpToFarmId     int64             `protobuf:"varint,4,opt,name=op_to_farm_id,json=opToFarmId,proto3" json:"op_to_farm_id,omitempty"`                               // 被操作的农场ID，必填
	OpToLandId     int64             `protobuf:"varint,5,opt,name=op_to_land_id,json=opToLandId,proto3" json:"op_to_land_id,omitempty"`                               // 被操作的土地ID，必填
	OpLandPosition int64             `protobuf:"varint,6,opt,name=op_land_position,json=opLandPosition,proto3" json:"op_land_position,omitempty"`                     // 被操作的土地位置编号，必填
	StorageId      int64             `protobuf:"varint,7,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                      // 仓库物品ID（里面包含操作的作物详情）
}

func (x *UserFarmOpsMsgReq) Reset() {
	*x = UserFarmOpsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmOpsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmOpsMsgReq) ProtoMessage() {}

func (x *UserFarmOpsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmOpsMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmOpsMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{19}
}

func (x *UserFarmOpsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOperateType() FarmOperationType {
	if x != nil {
		return x.OperateType
	}
	return FarmOperationType_OPERATION_UNSPECIFIED
}

func (x *UserFarmOpsMsgReq) GetOpToUserId() int64 {
	if x != nil {
		return x.OpToUserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToFarmId() int64 {
	if x != nil {
		return x.OpToFarmId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToLandId() int64 {
	if x != nil {
		return x.OpToLandId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpLandPosition() int64 {
	if x != nil {
		return x.OpLandPosition
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

// *
// 获取用户商店信息请求
// 用于查询当前用户的商店相关信息
type FarmsStoreInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FarmsStoreInfoMsgReq) Reset() {
	*x = FarmsStoreInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReq) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReq.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{20}
}

func (x *FarmsStoreInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 商店信息响应
// 包含商店内可购买的商品列表
type FarmsStoreInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64        `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*StoreInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 商品信息列表
	Extend    string       `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *FarmsStoreInfoMsgReply) Reset() {
	*x = FarmsStoreInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReply) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReply.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{21}
}

func (x *FarmsStoreInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetRows() []*StoreInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FarmsStoreInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 商店商品信息
// 表示商店中的单个商品信息
type StoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // 自增主键
	ProductType     ProductType   `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=mqtt.v1.ProductType" json:"product_type,omitempty"` // 商品类型
	ProductName     string        `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 商品名称
	ProductImageUrl string        `protobuf:"bytes,4,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`             // 商品图片地址
	ProductId       int64         `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                // 商品ID
	Stock           int64         `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                                         // 库存数量，-1表示无限
	Sort            int64         `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                           // 排序字段
	IsFree          BooleanStatus `protobuf:"varint,8,opt,name=is_free,json=isFree,proto3,enum=mqtt.v1.BooleanStatus" json:"is_free,omitempty"`              // 是否可以免费领取
	IsEnabled       BooleanStatus `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,proto3,enum=mqtt.v1.BooleanStatus" json:"is_enabled,omitempty"`     // 是否启用
}

func (x *StoreInfo) Reset() {
	*x = StoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_v1_mqtt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreInfo) ProtoMessage() {}

func (x *StoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_v1_mqtt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreInfo.ProtoReflect.Descriptor instead.
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return file_mqtt_v1_mqtt_proto_rawDescGZIP(), []int{22}
}

func (x *StoreInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreInfo) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *StoreInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StoreInfo) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *StoreInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *StoreInfo) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *StoreInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *StoreInfo) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreInfo) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

var File_mqtt_v1_mqtt_proto protoreflect.FileDescriptor

var file_mqtt_v1_mqtt_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x71, 0x74, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x08, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x22, 0x0a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x03, 0x0a, 0x18, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x22,
	0xe9, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x4a, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x15,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x22, 0xbb, 0x08, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65, 0x6c,
	0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x2d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xd0, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x13, 0x68, 0x61, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x22, 0xc2, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x71,
	0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x54, 0x6f, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54, 0x6f, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70, 0x4c, 0x61, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x14, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x46, 0x61, 0x72,
	0x6d, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x71, 0x74, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x2a, 0xe5, 0x03, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x4d, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x65, 0x12, 0x19, 0x0a, 0x14,
	0x46, 0x41, 0x52, 0x4d, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xc9, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53,
	0x47, 0x10, 0xac, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xad, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4d, 0x53, 0x47, 0x10, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x91, 0x03,
	0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x92, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x93, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41,
	0x54, 0x10, 0xb8, 0x45, 0x12, 0x10, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x10, 0x94, 0xc6, 0x1e, 0x12, 0x10, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x95, 0xc6, 0x1e, 0x12, 0x0f, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x96, 0xc6, 0x1e, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x52, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x97, 0xc6, 0x1e, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x10, 0x98, 0xc6, 0x1e, 0x2a, 0x5e, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x4c, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41, 0x52,
	0x56, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x0c,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x50, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x55, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x06, 0x2a, 0x6b, 0x0a,
	0x11, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x52,
	0x54, 0x49, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41,
	0x52, 0x56, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0a, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x53, 0x44, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x70, 0x0a,
	0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x2a,
	0x39, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mqtt_v1_mqtt_proto_rawDescOnce sync.Once
	file_mqtt_v1_mqtt_proto_rawDescData = file_mqtt_v1_mqtt_proto_rawDesc
)

func file_mqtt_v1_mqtt_proto_rawDescGZIP() []byte {
	file_mqtt_v1_mqtt_proto_rawDescOnce.Do(func() {
		file_mqtt_v1_mqtt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mqtt_v1_mqtt_proto_rawDescData)
	})
	return file_mqtt_v1_mqtt_proto_rawDescData
}

var file_mqtt_v1_mqtt_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_mqtt_v1_mqtt_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_mqtt_v1_mqtt_proto_goTypes = []interface{}{
	(MessageID)(0),                     // 0: mqtt.v1.MessageID
	(LandStatus)(0),                    // 1: mqtt.v1.LandStatus
	(HarvestStatus)(0),                 // 2: mqtt.v1.HarvestStatus
	(GrowthStatus)(0),                  // 3: mqtt.v1.GrowthStatus
	(FarmOperationType)(0),             // 4: mqtt.v1.FarmOperationType
	(WalletType)(0),                    // 5: mqtt.v1.WalletType
	(WalletUsageType)(0),               // 6: mqtt.v1.WalletUsageType
	(BooleanStatus)(0),                 // 7: mqtt.v1.BooleanStatus
	(ProductType)(0),                   // 8: mqtt.v1.ProductType
	(*MessageWrapper)(nil),             // 9: mqtt.v1.MessageWrapper
	(*MsgReq)(nil),                     // 10: mqtt.v1.MsgReq
	(*MsgReply)(nil),                   // 11: mqtt.v1.MsgReply
	(*UserAuthInfoMsgReq)(nil),         // 12: mqtt.v1.UserAuthInfoMsgReq
	(*UserAuthInfoMsgReply)(nil),       // 13: mqtt.v1.UserAuthInfoMsgReply
	(*UserPersonalInfoMsgReq)(nil),     // 14: mqtt.v1.UserPersonalInfoMsgReq
	(*UserPersonalInfoMsgReply)(nil),   // 15: mqtt.v1.UserPersonalInfoMsgReply
	(*UserEditPersonalInfoMsgReq)(nil), // 16: mqtt.v1.UserEditPersonalInfoMsgReq
	(*UserWallet)(nil),                 // 17: mqtt.v1.UserWallet
	(*UserBalance)(nil),                // 18: mqtt.v1.UserBalance
	(*UserStorageInfoMsgReq)(nil),      // 19: mqtt.v1.UserStorageInfoMsgReq
	(*UserStorageInfoMsgReply)(nil),    // 20: mqtt.v1.UserStorageInfoMsgReply
	(*UserStorageDetail)(nil),          // 21: mqtt.v1.UserStorageDetail
	(*UserFarmInfoMsgReq)(nil),         // 22: mqtt.v1.UserFarmInfoMsgReq
	(*UserFarmInfoMsgReply)(nil),       // 23: mqtt.v1.UserFarmInfoMsgReply
	(*UserLandInfoMsgReq)(nil),         // 24: mqtt.v1.UserLandInfoMsgReq
	(*UserLandInfoMsgReply)(nil),       // 25: mqtt.v1.UserLandInfoMsgReply
	(*UserLandDetail)(nil),             // 26: mqtt.v1.UserLandDetail
	(*UserPlantingDetail)(nil),         // 27: mqtt.v1.UserPlantingDetail
	(*UserFarmOpsMsgReq)(nil),          // 28: mqtt.v1.UserFarmOpsMsgReq
	(*FarmsStoreInfoMsgReq)(nil),       // 29: mqtt.v1.FarmsStoreInfoMsgReq
	(*FarmsStoreInfoMsgReply)(nil),     // 30: mqtt.v1.FarmsStoreInfoMsgReply
	(*StoreInfo)(nil),                  // 31: mqtt.v1.StoreInfo
}
var file_mqtt_v1_mqtt_proto_depIdxs = []int32{
	0,  // 0: mqtt.v1.MessageWrapper.msg_id:type_name -> mqtt.v1.MessageID
	17, // 1: mqtt.v1.UserPersonalInfoMsgReply.wallets:type_name -> mqtt.v1.UserWallet
	18, // 2: mqtt.v1.UserPersonalInfoMsgReply.balances:type_name -> mqtt.v1.UserBalance
	7,  // 3: mqtt.v1.UserEditPersonalInfoMsgReq.has_completed_tutorial:type_name -> mqtt.v1.BooleanStatus
	7,  // 4: mqtt.v1.UserEditPersonalInfoMsgReq.has_received_free_gift:type_name -> mqtt.v1.BooleanStatus
	6,  // 5: mqtt.v1.UserWallet.usage_type:type_name -> mqtt.v1.WalletUsageType
	7,  // 6: mqtt.v1.UserWallet.is_default_deposit:type_name -> mqtt.v1.BooleanStatus
	7,  // 7: mqtt.v1.UserWallet.is_default_withdrawal:type_name -> mqtt.v1.BooleanStatus
	5,  // 8: mqtt.v1.UserBalance.wallet_type:type_name -> mqtt.v1.WalletType
	8,  // 9: mqtt.v1.UserStorageInfoMsgReq.product_type:type_name -> mqtt.v1.ProductType
	21, // 10: mqtt.v1.UserStorageInfoMsgReply.rows:type_name -> mqtt.v1.UserStorageDetail
	8,  // 11: mqtt.v1.UserStorageDetail.product_type:type_name -> mqtt.v1.ProductType
	7,  // 12: mqtt.v1.UserFarmInfoMsgReply.has_received_free_gift:type_name -> mqtt.v1.BooleanStatus
	7,  // 13: mqtt.v1.UserFarmInfoMsgReply.has_completed_tutorial:type_name -> mqtt.v1.BooleanStatus
	26, // 14: mqtt.v1.UserLandInfoMsgReply.rows:type_name -> mqtt.v1.UserLandDetail
	1,  // 15: mqtt.v1.UserLandDetail.status:type_name -> mqtt.v1.LandStatus
	27, // 16: mqtt.v1.UserLandDetail.planted_plant:type_name -> mqtt.v1.UserPlantingDetail
	2,  // 17: mqtt.v1.UserPlantingDetail.is_harvested:type_name -> mqtt.v1.HarvestStatus
	3,  // 18: mqtt.v1.UserPlantingDetail.status:type_name -> mqtt.v1.GrowthStatus
	4,  // 19: mqtt.v1.UserFarmOpsMsgReq.operate_type:type_name -> mqtt.v1.FarmOperationType
	31, // 20: mqtt.v1.FarmsStoreInfoMsgReply.rows:type_name -> mqtt.v1.StoreInfo
	8,  // 21: mqtt.v1.StoreInfo.product_type:type_name -> mqtt.v1.ProductType
	7,  // 22: mqtt.v1.StoreInfo.is_free:type_name -> mqtt.v1.BooleanStatus
	7,  // 23: mqtt.v1.StoreInfo.is_enabled:type_name -> mqtt.v1.BooleanStatus
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_mqtt_v1_mqtt_proto_init() }
func file_mqtt_v1_mqtt_proto_init() {
	if File_mqtt_v1_mqtt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mqtt_v1_mqtt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPlantingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmOpsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_v1_mqtt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mqtt_v1_mqtt_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mqtt_v1_mqtt_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mqtt_v1_mqtt_proto_goTypes,
		DependencyIndexes: file_mqtt_v1_mqtt_proto_depIdxs,
		EnumInfos:         file_mqtt_v1_mqtt_proto_enumTypes,
		MessageInfos:      file_mqtt_v1_mqtt_proto_msgTypes,
	}.Build()
	File_mqtt_v1_mqtt_proto = out.File
	file_mqtt_v1_mqtt_proto_rawDesc = nil
	file_mqtt_v1_mqtt_proto_goTypes = nil
	file_mqtt_v1_mqtt_proto_depIdxs = nil
}
