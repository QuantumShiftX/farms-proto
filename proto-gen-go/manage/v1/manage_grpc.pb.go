// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: manage/v1/manage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManageApiService_SendCaptcha_FullMethodName        = "/manage.v1.ManageApiService/SendCaptcha"
	ManageApiService_GetAgreement_FullMethodName       = "/manage.v1.ManageApiService/GetAgreement"
	ManageApiService_GetApkAddress_FullMethodName      = "/manage.v1.ManageApiService/GetApkAddress"
	ManageApiService_GetCustomerService_FullMethodName = "/manage.v1.ManageApiService/GetCustomerService"
)

// ManageApiServiceClient is the client API for ManageApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageApiServiceClient interface {
	SendCaptcha(ctx context.Context, in *SendCaptchaReq, opts ...grpc.CallOption) (*ManageReply, error)
	GetAgreement(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetAgreementReply, error)
	GetApkAddress(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetApkAddressReply, error)
	GetCustomerService(ctx context.Context, in *GetCustomerServiceReq, opts ...grpc.CallOption) (*GetCustomerServiceReply, error)
}

type manageApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageApiServiceClient(cc grpc.ClientConnInterface) ManageApiServiceClient {
	return &manageApiServiceClient{cc}
}

func (c *manageApiServiceClient) SendCaptcha(ctx context.Context, in *SendCaptchaReq, opts ...grpc.CallOption) (*ManageReply, error) {
	out := new(ManageReply)
	err := c.cc.Invoke(ctx, ManageApiService_SendCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageApiServiceClient) GetAgreement(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetAgreementReply, error) {
	out := new(GetAgreementReply)
	err := c.cc.Invoke(ctx, ManageApiService_GetAgreement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageApiServiceClient) GetApkAddress(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetApkAddressReply, error) {
	out := new(GetApkAddressReply)
	err := c.cc.Invoke(ctx, ManageApiService_GetApkAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageApiServiceClient) GetCustomerService(ctx context.Context, in *GetCustomerServiceReq, opts ...grpc.CallOption) (*GetCustomerServiceReply, error) {
	out := new(GetCustomerServiceReply)
	err := c.cc.Invoke(ctx, ManageApiService_GetCustomerService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageApiServiceServer is the server API for ManageApiService service.
// All implementations must embed UnimplementedManageApiServiceServer
// for forward compatibility
type ManageApiServiceServer interface {
	SendCaptcha(context.Context, *SendCaptchaReq) (*ManageReply, error)
	GetAgreement(context.Context, *ManageReq) (*GetAgreementReply, error)
	GetApkAddress(context.Context, *ManageReq) (*GetApkAddressReply, error)
	GetCustomerService(context.Context, *GetCustomerServiceReq) (*GetCustomerServiceReply, error)
	mustEmbedUnimplementedManageApiServiceServer()
}

// UnimplementedManageApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageApiServiceServer struct {
}

func (UnimplementedManageApiServiceServer) SendCaptcha(context.Context, *SendCaptchaReq) (*ManageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCaptcha not implemented")
}
func (UnimplementedManageApiServiceServer) GetAgreement(context.Context, *ManageReq) (*GetAgreementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgreement not implemented")
}
func (UnimplementedManageApiServiceServer) GetApkAddress(context.Context, *ManageReq) (*GetApkAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApkAddress not implemented")
}
func (UnimplementedManageApiServiceServer) GetCustomerService(context.Context, *GetCustomerServiceReq) (*GetCustomerServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerService not implemented")
}
func (UnimplementedManageApiServiceServer) mustEmbedUnimplementedManageApiServiceServer() {}

// UnsafeManageApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageApiServiceServer will
// result in compilation errors.
type UnsafeManageApiServiceServer interface {
	mustEmbedUnimplementedManageApiServiceServer()
}

func RegisterManageApiServiceServer(s grpc.ServiceRegistrar, srv ManageApiServiceServer) {
	s.RegisterService(&ManageApiService_ServiceDesc, srv)
}

func _ManageApiService_SendCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageApiServiceServer).SendCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageApiService_SendCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageApiServiceServer).SendCaptcha(ctx, req.(*SendCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageApiService_GetAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageApiServiceServer).GetAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageApiService_GetAgreement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageApiServiceServer).GetAgreement(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageApiService_GetApkAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageApiServiceServer).GetApkAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageApiService_GetApkAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageApiServiceServer).GetApkAddress(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageApiService_GetCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageApiServiceServer).GetCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageApiService_GetCustomerService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageApiServiceServer).GetCustomerService(ctx, req.(*GetCustomerServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageApiService_ServiceDesc is the grpc.ServiceDesc for ManageApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.v1.ManageApiService",
	HandlerType: (*ManageApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCaptcha",
			Handler:    _ManageApiService_SendCaptcha_Handler,
		},
		{
			MethodName: "GetAgreement",
			Handler:    _ManageApiService_GetAgreement_Handler,
		},
		{
			MethodName: "GetApkAddress",
			Handler:    _ManageApiService_GetApkAddress_Handler,
		},
		{
			MethodName: "GetCustomerService",
			Handler:    _ManageApiService_GetCustomerService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/v1/manage.proto",
}

const (
	ManageInnerService_GetDefaultVipInfo_FullMethodName    = "/manage.v1.ManageInnerService/GetDefaultVipInfo"
	ManageInnerService_GetDesignatedVipInfo_FullMethodName = "/manage.v1.ManageInnerService/GetDesignatedVipInfo"
	ManageInnerService_GetSettingBaseInfo_FullMethodName   = "/manage.v1.ManageInnerService/GetSettingBaseInfo"
	ManageInnerService_VipLevelInfo_FullMethodName         = "/manage.v1.ManageInnerService/VipLevelInfo"
	ManageInnerService_GetNotificationsList_FullMethodName = "/manage.v1.ManageInnerService/GetNotificationsList"
	ManageInnerService_GetDownloadAddress_FullMethodName   = "/manage.v1.ManageInnerService/GetDownloadAddress"
	ManageInnerService_UserAnnouncements_FullMethodName    = "/manage.v1.ManageInnerService/UserAnnouncements"
	ManageInnerService_GetFarmAgreement_FullMethodName     = "/manage.v1.ManageInnerService/GetFarmAgreement"
)

// ManageInnerServiceClient is the client API for ManageInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageInnerServiceClient interface {
	// 获取默认VIP等级信息
	GetDefaultVipInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*DefaultVipInfoReply, error)
	// 获取指定VIP等级信息
	GetDesignatedVipInfo(ctx context.Context, in *GetDesignatedVipInfoReq, opts ...grpc.CallOption) (*DesignatedVipInfoReply, error)
	// 获取设置基础信息
	GetSettingBaseInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*SettingBaseInfoReply, error)
	// 获取vip等级信息
	VipLevelInfo(ctx context.Context, in *VipLevelInfoMsgReq, opts ...grpc.CallOption) (*VipLevelInfoMsgReply, error)
	// 获取模板信息列表
	GetNotificationsList(ctx context.Context, in *GetNotificationsListReq, opts ...grpc.CallOption) (*GetNotificationsListReply, error)
	// 获取下载地址----addr
	GetDownloadAddress(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetDownloadAddrReply, error)
	// 获取公告
	UserAnnouncements(ctx context.Context, in *UserAnnouncementsInfoMsgReq, opts ...grpc.CallOption) (*UserAnnouncementsInfoMsgReply, error)
	// 获取协议
	GetFarmAgreement(ctx context.Context, in *FarmAgreementInfoMsgReq, opts ...grpc.CallOption) (*FarmAgreementInfoMsgReply, error)
}

type manageInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageInnerServiceClient(cc grpc.ClientConnInterface) ManageInnerServiceClient {
	return &manageInnerServiceClient{cc}
}

func (c *manageInnerServiceClient) GetDefaultVipInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*DefaultVipInfoReply, error) {
	out := new(DefaultVipInfoReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetDefaultVipInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetDesignatedVipInfo(ctx context.Context, in *GetDesignatedVipInfoReq, opts ...grpc.CallOption) (*DesignatedVipInfoReply, error) {
	out := new(DesignatedVipInfoReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetDesignatedVipInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetSettingBaseInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*SettingBaseInfoReply, error) {
	out := new(SettingBaseInfoReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetSettingBaseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) VipLevelInfo(ctx context.Context, in *VipLevelInfoMsgReq, opts ...grpc.CallOption) (*VipLevelInfoMsgReply, error) {
	out := new(VipLevelInfoMsgReply)
	err := c.cc.Invoke(ctx, ManageInnerService_VipLevelInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetNotificationsList(ctx context.Context, in *GetNotificationsListReq, opts ...grpc.CallOption) (*GetNotificationsListReply, error) {
	out := new(GetNotificationsListReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetNotificationsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetDownloadAddress(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*GetDownloadAddrReply, error) {
	out := new(GetDownloadAddrReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetDownloadAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) UserAnnouncements(ctx context.Context, in *UserAnnouncementsInfoMsgReq, opts ...grpc.CallOption) (*UserAnnouncementsInfoMsgReply, error) {
	out := new(UserAnnouncementsInfoMsgReply)
	err := c.cc.Invoke(ctx, ManageInnerService_UserAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetFarmAgreement(ctx context.Context, in *FarmAgreementInfoMsgReq, opts ...grpc.CallOption) (*FarmAgreementInfoMsgReply, error) {
	out := new(FarmAgreementInfoMsgReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetFarmAgreement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageInnerServiceServer is the server API for ManageInnerService service.
// All implementations must embed UnimplementedManageInnerServiceServer
// for forward compatibility
type ManageInnerServiceServer interface {
	// 获取默认VIP等级信息
	GetDefaultVipInfo(context.Context, *ManageReq) (*DefaultVipInfoReply, error)
	// 获取指定VIP等级信息
	GetDesignatedVipInfo(context.Context, *GetDesignatedVipInfoReq) (*DesignatedVipInfoReply, error)
	// 获取设置基础信息
	GetSettingBaseInfo(context.Context, *ManageReq) (*SettingBaseInfoReply, error)
	// 获取vip等级信息
	VipLevelInfo(context.Context, *VipLevelInfoMsgReq) (*VipLevelInfoMsgReply, error)
	// 获取模板信息列表
	GetNotificationsList(context.Context, *GetNotificationsListReq) (*GetNotificationsListReply, error)
	// 获取下载地址----addr
	GetDownloadAddress(context.Context, *ManageReq) (*GetDownloadAddrReply, error)
	// 获取公告
	UserAnnouncements(context.Context, *UserAnnouncementsInfoMsgReq) (*UserAnnouncementsInfoMsgReply, error)
	// 获取协议
	GetFarmAgreement(context.Context, *FarmAgreementInfoMsgReq) (*FarmAgreementInfoMsgReply, error)
	mustEmbedUnimplementedManageInnerServiceServer()
}

// UnimplementedManageInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageInnerServiceServer struct {
}

func (UnimplementedManageInnerServiceServer) GetDefaultVipInfo(context.Context, *ManageReq) (*DefaultVipInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVipInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) GetDesignatedVipInfo(context.Context, *GetDesignatedVipInfoReq) (*DesignatedVipInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesignatedVipInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) GetSettingBaseInfo(context.Context, *ManageReq) (*SettingBaseInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingBaseInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) VipLevelInfo(context.Context, *VipLevelInfoMsgReq) (*VipLevelInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipLevelInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) GetNotificationsList(context.Context, *GetNotificationsListReq) (*GetNotificationsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsList not implemented")
}
func (UnimplementedManageInnerServiceServer) GetDownloadAddress(context.Context, *ManageReq) (*GetDownloadAddrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadAddress not implemented")
}
func (UnimplementedManageInnerServiceServer) UserAnnouncements(context.Context, *UserAnnouncementsInfoMsgReq) (*UserAnnouncementsInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAnnouncements not implemented")
}
func (UnimplementedManageInnerServiceServer) GetFarmAgreement(context.Context, *FarmAgreementInfoMsgReq) (*FarmAgreementInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarmAgreement not implemented")
}
func (UnimplementedManageInnerServiceServer) mustEmbedUnimplementedManageInnerServiceServer() {}

// UnsafeManageInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageInnerServiceServer will
// result in compilation errors.
type UnsafeManageInnerServiceServer interface {
	mustEmbedUnimplementedManageInnerServiceServer()
}

func RegisterManageInnerServiceServer(s grpc.ServiceRegistrar, srv ManageInnerServiceServer) {
	s.RegisterService(&ManageInnerService_ServiceDesc, srv)
}

func _ManageInnerService_GetDefaultVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetDefaultVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetDefaultVipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetDefaultVipInfo(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetDesignatedVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignatedVipInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetDesignatedVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetDesignatedVipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetDesignatedVipInfo(ctx, req.(*GetDesignatedVipInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetSettingBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetSettingBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetSettingBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetSettingBaseInfo(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_VipLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipLevelInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).VipLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_VipLevelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).VipLevelInfo(ctx, req.(*VipLevelInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetNotificationsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetNotificationsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetNotificationsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetNotificationsList(ctx, req.(*GetNotificationsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetDownloadAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetDownloadAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetDownloadAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetDownloadAddress(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_UserAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAnnouncementsInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).UserAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_UserAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).UserAnnouncements(ctx, req.(*UserAnnouncementsInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetFarmAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmAgreementInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetFarmAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetFarmAgreement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetFarmAgreement(ctx, req.(*FarmAgreementInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageInnerService_ServiceDesc is the grpc.ServiceDesc for ManageInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.v1.ManageInnerService",
	HandlerType: (*ManageInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVipInfo",
			Handler:    _ManageInnerService_GetDefaultVipInfo_Handler,
		},
		{
			MethodName: "GetDesignatedVipInfo",
			Handler:    _ManageInnerService_GetDesignatedVipInfo_Handler,
		},
		{
			MethodName: "GetSettingBaseInfo",
			Handler:    _ManageInnerService_GetSettingBaseInfo_Handler,
		},
		{
			MethodName: "VipLevelInfo",
			Handler:    _ManageInnerService_VipLevelInfo_Handler,
		},
		{
			MethodName: "GetNotificationsList",
			Handler:    _ManageInnerService_GetNotificationsList_Handler,
		},
		{
			MethodName: "GetDownloadAddress",
			Handler:    _ManageInnerService_GetDownloadAddress_Handler,
		},
		{
			MethodName: "UserAnnouncements",
			Handler:    _ManageInnerService_UserAnnouncements_Handler,
		},
		{
			MethodName: "GetFarmAgreement",
			Handler:    _ManageInnerService_GetFarmAgreement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/v1/manage.proto",
}
