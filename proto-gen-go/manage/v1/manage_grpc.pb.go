// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: manage/v1/manage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManageService_Test_FullMethodName = "/manage.v1.ManageService/Test"
)

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageServiceClient interface {
	Test(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*ManageReply, error)
}

type manageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageServiceClient(cc grpc.ClientConnInterface) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) Test(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*ManageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageReply)
	err := c.cc.Invoke(ctx, ManageService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
// All implementations must embed UnimplementedManageServiceServer
// for forward compatibility.
type ManageServiceServer interface {
	Test(context.Context, *ManageReq) (*ManageReply, error)
	mustEmbedUnimplementedManageServiceServer()
}

// UnimplementedManageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManageServiceServer struct{}

func (UnimplementedManageServiceServer) Test(context.Context, *ManageReq) (*ManageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedManageServiceServer) mustEmbedUnimplementedManageServiceServer() {}
func (UnimplementedManageServiceServer) testEmbeddedByValue()                       {}

// UnsafeManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServiceServer will
// result in compilation errors.
type UnsafeManageServiceServer interface {
	mustEmbedUnimplementedManageServiceServer()
}

func RegisterManageServiceServer(s grpc.ServiceRegistrar, srv ManageServiceServer) {
	// If the following call pancis, it indicates UnimplementedManageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManageService_ServiceDesc, srv)
}

func _ManageService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).Test(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageService_ServiceDesc is the grpc.ServiceDesc for ManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.v1.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _ManageService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/v1/manage.proto",
}

const (
	ManageInnerService_GetDefaultVipInfo_FullMethodName  = "/manage.v1.ManageInnerService/GetDefaultVipInfo"
	ManageInnerService_GetSettingBaseInfo_FullMethodName = "/manage.v1.ManageInnerService/GetSettingBaseInfo"
)

// ManageInnerServiceClient is the client API for ManageInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageInnerServiceClient interface {
	GetDefaultVipInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*DefaultVipInfoReply, error)
	GetSettingBaseInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*SettingBaseInfoReply, error)
}

type manageInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageInnerServiceClient(cc grpc.ClientConnInterface) ManageInnerServiceClient {
	return &manageInnerServiceClient{cc}
}

func (c *manageInnerServiceClient) GetDefaultVipInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*DefaultVipInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultVipInfoReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetDefaultVipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInnerServiceClient) GetSettingBaseInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*SettingBaseInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingBaseInfoReply)
	err := c.cc.Invoke(ctx, ManageInnerService_GetSettingBaseInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageInnerServiceServer is the server API for ManageInnerService service.
// All implementations must embed UnimplementedManageInnerServiceServer
// for forward compatibility.
type ManageInnerServiceServer interface {
	GetDefaultVipInfo(context.Context, *ManageReq) (*DefaultVipInfoReply, error)
	GetSettingBaseInfo(context.Context, *ManageReq) (*SettingBaseInfoReply, error)
	mustEmbedUnimplementedManageInnerServiceServer()
}

// UnimplementedManageInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManageInnerServiceServer struct{}

func (UnimplementedManageInnerServiceServer) GetDefaultVipInfo(context.Context, *ManageReq) (*DefaultVipInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVipInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) GetSettingBaseInfo(context.Context, *ManageReq) (*SettingBaseInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingBaseInfo not implemented")
}
func (UnimplementedManageInnerServiceServer) mustEmbedUnimplementedManageInnerServiceServer() {}
func (UnimplementedManageInnerServiceServer) testEmbeddedByValue()                            {}

// UnsafeManageInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageInnerServiceServer will
// result in compilation errors.
type UnsafeManageInnerServiceServer interface {
	mustEmbedUnimplementedManageInnerServiceServer()
}

func RegisterManageInnerServiceServer(s grpc.ServiceRegistrar, srv ManageInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedManageInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManageInnerService_ServiceDesc, srv)
}

func _ManageInnerService_GetDefaultVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetDefaultVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetDefaultVipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetDefaultVipInfo(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInnerService_GetSettingBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInnerServiceServer).GetSettingBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageInnerService_GetSettingBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInnerServiceServer).GetSettingBaseInfo(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageInnerService_ServiceDesc is the grpc.ServiceDesc for ManageInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.v1.ManageInnerService",
	HandlerType: (*ManageInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVipInfo",
			Handler:    _ManageInnerService_GetDefaultVipInfo_Handler,
		},
		{
			MethodName: "GetSettingBaseInfo",
			Handler:    _ManageInnerService_GetSettingBaseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/v1/manage.proto",
}
