// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.3
// source: user/v1/user.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// 土地状态枚举
// 定义土地的各种可能状态
type LandStatus int32

const (
	LandStatus_LAND_STATUS_UNSPECIFIED LandStatus = 0 // 未指定状态
	LandStatus_UNCULTIVATED            LandStatus = 1 // 未开垦
	LandStatus_CULTIVATED_EMPTY        LandStatus = 2 // 已开垦未种植
	LandStatus_PLANTED                 LandStatus = 3 // 已种植
)

// Enum value maps for LandStatus.
var (
	LandStatus_name = map[int32]string{
		0: "LAND_STATUS_UNSPECIFIED",
		1: "UNCULTIVATED",
		2: "CULTIVATED_EMPTY",
		3: "PLANTED",
	}
	LandStatus_value = map[string]int32{
		"LAND_STATUS_UNSPECIFIED": 0,
		"UNCULTIVATED":            1,
		"CULTIVATED_EMPTY":        2,
		"PLANTED":                 3,
	}
)

func (x LandStatus) Enum() *LandStatus {
	p := new(LandStatus)
	*p = x
	return p
}

func (x LandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[0].Descriptor()
}

func (LandStatus) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[0]
}

func (x LandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandStatus.Descriptor instead.
func (LandStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{0}
}

// *
// 作物收获状态枚举
// 定义作物是否已被收获
type HarvestStatus int32

const (
	HarvestStatus_HARVEST_STATUS_UNSPECIFIED HarvestStatus = 0 // 未指定状态
	HarvestStatus_NOT_HARVESTED              HarvestStatus = 1 // 未收获 （没成熟）
	HarvestStatus_HARVESTED                  HarvestStatus = 2 // 可收获（已成熟）
	HarvestStatus_WAIT_HARVESTED             HarvestStatus = 3 // 已收获
)

// Enum value maps for HarvestStatus.
var (
	HarvestStatus_name = map[int32]string{
		0: "HARVEST_STATUS_UNSPECIFIED",
		1: "NOT_HARVESTED",
		2: "HARVESTED",
		3: "WAIT_HARVESTED",
	}
	HarvestStatus_value = map[string]int32{
		"HARVEST_STATUS_UNSPECIFIED": 0,
		"NOT_HARVESTED":              1,
		"HARVESTED":                  2,
		"WAIT_HARVESTED":             3,
	}
)

func (x HarvestStatus) Enum() *HarvestStatus {
	p := new(HarvestStatus)
	*p = x
	return p
}

func (x HarvestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HarvestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[1].Descriptor()
}

func (HarvestStatus) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[1]
}

func (x HarvestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HarvestStatus.Descriptor instead.
func (HarvestStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{1}
}

// *
// 作物生长状态枚举
// 定义作物的生长阶段
type GrowthStatus int32

const (
	GrowthStatus_GROWTH_STATUS_UNSPECIFIED GrowthStatus = 0 // 未指定状态
	GrowthStatus_SEED_STAGE                GrowthStatus = 1 // 种子阶段
	GrowthStatus_SPROUTING_STAGE           GrowthStatus = 2 // 发芽阶段
	GrowthStatus_GROWTH_STAGE              GrowthStatus = 3 // 成长阶段
	GrowthStatus_FLOWERING_STAGE           GrowthStatus = 4 // 开花阶段
	GrowthStatus_FRUITING_STAGE            GrowthStatus = 5 // 结果阶段
	GrowthStatus_MATURE_STAGE              GrowthStatus = 6 // 成熟阶段
)

// Enum value maps for GrowthStatus.
var (
	GrowthStatus_name = map[int32]string{
		0: "GROWTH_STATUS_UNSPECIFIED",
		1: "SEED_STAGE",
		2: "SPROUTING_STAGE",
		3: "GROWTH_STAGE",
		4: "FLOWERING_STAGE",
		5: "FRUITING_STAGE",
		6: "MATURE_STAGE",
	}
	GrowthStatus_value = map[string]int32{
		"GROWTH_STATUS_UNSPECIFIED": 0,
		"SEED_STAGE":                1,
		"SPROUTING_STAGE":           2,
		"GROWTH_STAGE":              3,
		"FLOWERING_STAGE":           4,
		"FRUITING_STAGE":            5,
		"MATURE_STAGE":              6,
	}
)

func (x GrowthStatus) Enum() *GrowthStatus {
	p := new(GrowthStatus)
	*p = x
	return p
}

func (x GrowthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrowthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[2].Descriptor()
}

func (GrowthStatus) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[2]
}

func (x GrowthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrowthStatus.Descriptor instead.
func (GrowthStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{2}
}

// *
// 农场操作类型枚举
// 定义可在农场上执行的操作类型
type FarmOperationType int32

const (
	FarmOperationType_OPERATION_UNSPECIFIED FarmOperationType = 0 // 未指定操作
	FarmOperationType_PLANTING              FarmOperationType = 1 // 播种 - 在指定土地上种植作物
	FarmOperationType_WATERING              FarmOperationType = 2 // 浇水 - 为指定土地上的作物浇水
	FarmOperationType_FERTILIZING           FarmOperationType = 3 // 施肥 - 为指定土地上的作物施肥
	FarmOperationType_HARVESTING            FarmOperationType = 4 // 采摘 - 收获指定土地上成熟的作物
)

// Enum value maps for FarmOperationType.
var (
	FarmOperationType_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "PLANTING",
		2: "WATERING",
		3: "FERTILIZING",
		4: "HARVESTING",
	}
	FarmOperationType_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"PLANTING":              1,
		"WATERING":              2,
		"FERTILIZING":           3,
		"HARVESTING":            4,
	}
)

func (x FarmOperationType) Enum() *FarmOperationType {
	p := new(FarmOperationType)
	*p = x
	return p
}

func (x FarmOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[3].Descriptor()
}

func (FarmOperationType) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[3]
}

func (x FarmOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FarmOperationType.Descriptor instead.
func (FarmOperationType) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3}
}

// *
// 钱包类型枚举
// 定义用户钱包的类型
type WalletType int32

const (
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0 // 未指定类型
	WalletType_USERS_WALLET            WalletType = 1 // 用户钱包
	WalletType_AGENT_WALLET            WalletType = 2 // 代理钱包
	WalletType_REWARD_WALLET           WalletType = 3 // 奖励钱包
	WalletType_USDT_WALLET             WalletType = 4 // USDT钱包
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "WALLET_TYPE_UNSPECIFIED",
		1: "USERS_WALLET",
		2: "AGENT_WALLET",
		3: "REWARD_WALLET",
		4: "USDT_WALLET",
	}
	WalletType_value = map[string]int32{
		"WALLET_TYPE_UNSPECIFIED": 0,
		"USERS_WALLET":            1,
		"AGENT_WALLET":            2,
		"REWARD_WALLET":           3,
		"USDT_WALLET":             4,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[4].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[4]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{4}
}

// *
// 钱包用途类型枚举
// 定义钱包的使用用途
type WalletUsageType int32

const (
	WalletUsageType_USAGE_TYPE_UNSPECIFIED WalletUsageType = 0 // 未指定用途
	WalletUsageType_DEPOSIT_ONLY           WalletUsageType = 1 // 仅存款
	WalletUsageType_WITHDRAWAL_ONLY        WalletUsageType = 2 // 仅提款
	WalletUsageType_DEPOSIT_AND_WITHDRAWAL WalletUsageType = 3 // 存款和提款
)

// Enum value maps for WalletUsageType.
var (
	WalletUsageType_name = map[int32]string{
		0: "USAGE_TYPE_UNSPECIFIED",
		1: "DEPOSIT_ONLY",
		2: "WITHDRAWAL_ONLY",
		3: "DEPOSIT_AND_WITHDRAWAL",
	}
	WalletUsageType_value = map[string]int32{
		"USAGE_TYPE_UNSPECIFIED": 0,
		"DEPOSIT_ONLY":           1,
		"WITHDRAWAL_ONLY":        2,
		"DEPOSIT_AND_WITHDRAWAL": 3,
	}
)

func (x WalletUsageType) Enum() *WalletUsageType {
	p := new(WalletUsageType)
	*p = x
	return p
}

func (x WalletUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[5].Descriptor()
}

func (WalletUsageType) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[5]
}

func (x WalletUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletUsageType.Descriptor instead.
func (WalletUsageType) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{5}
}

// *
// 是否状态枚举
// 通用的是否状态枚举（用于多个字段）
type BooleanStatus int32

const (
	BooleanStatus_BOOLEAN_UNSPECIFIED BooleanStatus = 0 // 未指定
	BooleanStatus_NO                  BooleanStatus = 1 // 否
	BooleanStatus_YES                 BooleanStatus = 2 // 是
)

// Enum value maps for BooleanStatus.
var (
	BooleanStatus_name = map[int32]string{
		0: "BOOLEAN_UNSPECIFIED",
		1: "NO",
		2: "YES",
	}
	BooleanStatus_value = map[string]int32{
		"BOOLEAN_UNSPECIFIED": 0,
		"NO":                  1,
		"YES":                 2,
	}
)

func (x BooleanStatus) Enum() *BooleanStatus {
	p := new(BooleanStatus)
	*p = x
	return p
}

func (x BooleanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[6].Descriptor()
}

func (BooleanStatus) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[6]
}

func (x BooleanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanStatus.Descriptor instead.
func (BooleanStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{6}
}

// *
// 商品类型枚举
// 定义商店中商品的类型
type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0 // 未指定类型
	ProductType_SEED                     ProductType = 1 // 种子
	ProductType_FERTILIZER               ProductType = 2 // 肥料
	ProductType_OTHER                    ProductType = 3 // 其他道具
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "SEED",
		2: "FERTILIZER",
		3: "OTHER",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"SEED":                     1,
		"FERTILIZER":               2,
		"OTHER":                    3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_v1_user_proto_enumTypes[7].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_user_v1_user_proto_enumTypes[7]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{7}
}

type UserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserReq) Reset() {
	*x = UserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReq) ProtoMessage() {}

func (x *UserReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReq.ProtoReflect.Descriptor instead.
func (*UserReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{0}
}

type UserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserReply) Reset() {
	*x = UserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReply) ProtoMessage() {}

func (x *UserReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReply.ProtoReflect.Descriptor instead.
func (*UserReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{1}
}

type MsgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgData) Reset() {
	*x = MsgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgData) ProtoMessage() {}

func (x *MsgData) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgData.ProtoReflect.Descriptor instead.
func (*MsgData) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{2}
}

// RequestClientInfo 客户端信息结构体
type RequestClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                                        // 客户端IP地址
	Platform    string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`                            // 平台：Windows、Linux等
	Os          string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`                                        // 操作系统
	Browser     string `protobuf:"bytes,4,opt,name=browser,proto3" json:"browser,omitempty"`                              // 浏览器信息
	BrowserVer  string `protobuf:"bytes,5,opt,name=browser_ver,json=browserVer,proto3" json:"browser_ver,omitempty"`      // 浏览器版本
	IsMobile    bool   `protobuf:"varint,6,opt,name=is_mobile,json=isMobile,proto3" json:"is_mobile,omitempty"`           // 是否是手机端
	UserAgent   string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`         // 完整的User-Agent
	DeviceId    string `protobuf:"bytes,8,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`            // 设备ID
	DeviceType  string `protobuf:"bytes,9,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`      // 设备类型
	AppVersion  string `protobuf:"bytes,10,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`     // 应用版本 (如果是App)
	ScreenSize  string `protobuf:"bytes,11,opt,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`     // 屏幕尺寸
	Language    string `protobuf:"bytes,12,opt,name=language,proto3" json:"language,omitempty"`                           // 语言
	Timezone    string `protobuf:"bytes,13,opt,name=timezone,proto3" json:"timezone,omitempty"`                           // 时区
	Referrer    string `protobuf:"bytes,14,opt,name=referrer,proto3" json:"referrer,omitempty"`                           // 引荐来源
	RequestTime int64  `protobuf:"varint,15,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"` // 请求时间（时间戳）
}

func (x *RequestClientInfo) Reset() {
	*x = RequestClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestClientInfo) ProtoMessage() {}

func (x *RequestClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestClientInfo.ProtoReflect.Descriptor instead.
func (*RequestClientInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *RequestClientInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RequestClientInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RequestClientInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *RequestClientInfo) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *RequestClientInfo) GetBrowserVer() string {
	if x != nil {
		return x.BrowserVer
	}
	return ""
}

func (x *RequestClientInfo) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

func (x *RequestClientInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *RequestClientInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestClientInfo) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *RequestClientInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *RequestClientInfo) GetScreenSize() string {
	if x != nil {
		return x.ScreenSize
	}
	return ""
}

func (x *RequestClientInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RequestClientInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *RequestClientInfo) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *RequestClientInfo) GetRequestTime() int64 {
	if x != nil {
		return x.RequestTime
	}
	return 0
}

type UserRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account         string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                          // 账号
	VerifyType      int64  `protobuf:"varint,3,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"` // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Password        string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                        // 密码：字母/符号/数字 的随机组合，最大长度为100个字符
	ConfirmPassword string `protobuf:"bytes,5,opt,name=confirm_password,json=confirmPassword,proto3" json:"confirm_password,omitempty"`
	Captcha         string `protobuf:"bytes,6,opt,name=captcha,proto3" json:"captcha,omitempty"`                         // 验证码：暂定为6位数字
	InviteCode      string `protobuf:"bytes,8,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"` // 推广邀请码
}

func (x *UserRegisterReq) Reset() {
	*x = UserRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterReq) ProtoMessage() {}

func (x *UserRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterReq.ProtoReflect.Descriptor instead.
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserRegisterReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserRegisterReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *UserRegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserRegisterReq) GetConfirmPassword() string {
	if x != nil {
		return x.ConfirmPassword
	}
	return ""
}

func (x *UserRegisterReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *UserRegisterReq) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

type UserSignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                          // 账号
	LoginType  int64  `protobuf:"varint,3,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`    // 登录方式：1-用户名，2-手机，3-邮箱，4-其他
	VerifyType int64  `protobuf:"varint,4,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"` // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Password   string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                        // 密码：字母/符号/数字 的随机组合，最大长度为100个字符
}

func (x *UserSignInReq) Reset() {
	*x = UserSignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignInReq) ProtoMessage() {}

func (x *UserSignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignInReq.ProtoReflect.Descriptor instead.
func (*UserSignInReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{5}
}

func (x *UserSignInReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserSignInReq) GetLoginType() int64 {
	if x != nil {
		return x.LoginType
	}
	return 0
}

func (x *UserSignInReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *UserSignInReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// UserLoginResp 用户认证响应
type UserLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`                        // 认证令牌
	ExpireAt int64  `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"` // 过期时间（时间戳）
}

func (x *UserLoginResp) Reset() {
	*x = UserLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginResp) ProtoMessage() {}

func (x *UserLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginResp.ProtoReflect.Descriptor instead.
func (*UserLoginResp) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserLoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserLoginResp) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

// ForgotPasswordReq 忘记密码请求
type ForgotPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                          // 账号
	VerifyType int64  `protobuf:"varint,3,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"` // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Captcha    string `protobuf:"bytes,4,opt,name=captcha,proto3" json:"captcha,omitempty"`                          // 验证码
	Password   string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                        // 新密码（最大100个字符）
}

func (x *ForgotPasswordReq) Reset() {
	*x = ForgotPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordReq) ProtoMessage() {}

func (x *ForgotPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordReq.ProtoReflect.Descriptor instead.
func (*ForgotPasswordReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *ForgotPasswordReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ForgotPasswordReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *ForgotPasswordReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *ForgotPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// VerifyAccount 验证账号请求
type VerifyAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                          // 账号
	VerifyType int64  `protobuf:"varint,3,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"` // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Captcha    string `protobuf:"bytes,4,opt,name=captcha,proto3" json:"captcha,omitempty"`                          // 验证码
}

func (x *VerifyAccountReq) Reset() {
	*x = VerifyAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAccountReq) ProtoMessage() {}

func (x *VerifyAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAccountReq.ProtoReflect.Descriptor instead.
func (*VerifyAccountReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifyAccountReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *VerifyAccountReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

type UserSignOutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserSignOutReq) Reset() {
	*x = UserSignOutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignOutReq) ProtoMessage() {}

func (x *UserSignOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignOutReq.ProtoReflect.Descriptor instead.
func (*UserSignOutReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *UserSignOutReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 植物状态请求
type PlantStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantTimestamp       int64 `protobuf:"varint,1,opt,name=plant_timestamp,json=plantTimestamp,proto3" json:"plant_timestamp,omitempty"`                     // 种植时间
	HarvestTimestamp     int64 `protobuf:"varint,2,opt,name=harvest_timestamp,json=harvestTimestamp,proto3" json:"harvest_timestamp,omitempty"`               // 预期收获时间
	DefaultGrowthMinutes int64 `protobuf:"varint,3,opt,name=default_growth_minutes,json=defaultGrowthMinutes,proto3" json:"default_growth_minutes,omitempty"` // 默认生长时间(分钟)
}

func (x *PlantStatusRequest) Reset() {
	*x = PlantStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantStatusRequest) ProtoMessage() {}

func (x *PlantStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantStatusRequest.ProtoReflect.Descriptor instead.
func (*PlantStatusRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *PlantStatusRequest) GetPlantTimestamp() int64 {
	if x != nil {
		return x.PlantTimestamp
	}
	return 0
}

func (x *PlantStatusRequest) GetHarvestTimestamp() int64 {
	if x != nil {
		return x.HarvestTimestamp
	}
	return 0
}

func (x *PlantStatusRequest) GetDefaultGrowthMinutes() int64 {
	if x != nil {
		return x.DefaultGrowthMinutes
	}
	return 0
}

// 植物状态响应
type PlantStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 植物当前生长阶段(1-6)
}

func (x *PlantStatusResponse) Reset() {
	*x = PlantStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantStatusResponse) ProtoMessage() {}

func (x *PlantStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantStatusResponse.ProtoReflect.Descriptor instead.
func (*PlantStatusResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *PlantStatusResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 时间减少计算请求
type TimeReductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantInfo    *PlantInfo `protobuf:"bytes,1,opt,name=plant_info,json=plantInfo,proto3" json:"plant_info,omitempty"`             // 植物信息
	IsSelfAction bool       `protobuf:"varint,2,opt,name=is_self_action,json=isSelfAction,proto3" json:"is_self_action,omitempty"` // 是否是自己的操作
	IsWatering   bool       `protobuf:"varint,3,opt,name=is_watering,json=isWatering,proto3" json:"is_watering,omitempty"`         // 是否是浇水操作(否则为施肥)
}

func (x *TimeReductionRequest) Reset() {
	*x = TimeReductionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeReductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeReductionRequest) ProtoMessage() {}

func (x *TimeReductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeReductionRequest.ProtoReflect.Descriptor instead.
func (*TimeReductionRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *TimeReductionRequest) GetPlantInfo() *PlantInfo {
	if x != nil {
		return x.PlantInfo
	}
	return nil
}

func (x *TimeReductionRequest) GetIsSelfAction() bool {
	if x != nil {
		return x.IsSelfAction
	}
	return false
}

func (x *TimeReductionRequest) GetIsWatering() bool {
	if x != nil {
		return x.IsWatering
	}
	return false
}

// 时间减少计算响应
type TimeReductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeReductionMinutes int64 `protobuf:"varint,1,opt,name=time_reduction_minutes,json=timeReductionMinutes,proto3" json:"time_reduction_minutes,omitempty"` // 减少的时间(分钟)
}

func (x *TimeReductionResponse) Reset() {
	*x = TimeReductionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeReductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeReductionResponse) ProtoMessage() {}

func (x *TimeReductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeReductionResponse.ProtoReflect.Descriptor instead.
func (*TimeReductionResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{13}
}

func (x *TimeReductionResponse) GetTimeReductionMinutes() int64 {
	if x != nil {
		return x.TimeReductionMinutes
	}
	return 0
}

// 生长阶段时间计算请求
type StageTimelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantInfo *PlantInfo `protobuf:"bytes,1,opt,name=plant_info,json=plantInfo,proto3" json:"plant_info,omitempty"` // 植物信息
}

func (x *StageTimelinesRequest) Reset() {
	*x = StageTimelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageTimelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageTimelinesRequest) ProtoMessage() {}

func (x *StageTimelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageTimelinesRequest.ProtoReflect.Descriptor instead.
func (*StageTimelinesRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{14}
}

func (x *StageTimelinesRequest) GetPlantInfo() *PlantInfo {
	if x != nil {
		return x.PlantInfo
	}
	return nil
}

// 生长阶段时间点
type StageTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId      int64 `protobuf:"varint,1,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`
	UserId       int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FarmId       int64 `protobuf:"varint,3,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	LandId       int64 `protobuf:"varint,4,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`
	StageNumber  int64 `protobuf:"varint,5,opt,name=stage_number,json=stageNumber,proto3" json:"stage_number,omitempty"`    // 阶段编号(1-6)
	ExpectedTime int64 `protobuf:"varint,6,opt,name=expected_time,json=expectedTime,proto3" json:"expected_time,omitempty"` // 预计达到时间
	IsReached    bool  `protobuf:"varint,7,opt,name=is_reached,json=isReached,proto3" json:"is_reached,omitempty"`          // 是否已达到
}

func (x *StageTime) Reset() {
	*x = StageTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageTime) ProtoMessage() {}

func (x *StageTime) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageTime.ProtoReflect.Descriptor instead.
func (*StageTime) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{15}
}

func (x *StageTime) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *StageTime) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StageTime) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *StageTime) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *StageTime) GetStageNumber() int64 {
	if x != nil {
		return x.StageNumber
	}
	return 0
}

func (x *StageTime) GetExpectedTime() int64 {
	if x != nil {
		return x.ExpectedTime
	}
	return 0
}

func (x *StageTime) GetIsReached() bool {
	if x != nil {
		return x.IsReached
	}
	return false
}

// 生长阶段时间计算响应
type StageTimelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageTimes []*StageTime `protobuf:"bytes,1,rep,name=stage_times,json=stageTimes,proto3" json:"stage_times,omitempty"` // 各个阶段时间点
}

func (x *StageTimelinesResponse) Reset() {
	*x = StageTimelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageTimelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageTimelinesResponse) ProtoMessage() {}

func (x *StageTimelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageTimelinesResponse.ProtoReflect.Descriptor instead.
func (*StageTimelinesResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{16}
}

func (x *StageTimelinesResponse) GetStageTimes() []*StageTime {
	if x != nil {
		return x.StageTimes
	}
	return nil
}

// 收获时间调整请求
type AdjustHarvestTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantInfo    *PlantInfo `protobuf:"bytes,1,opt,name=plant_info,json=plantInfo,proto3" json:"plant_info,omitempty"`             // 植物信息
	IsSelfAction bool       `protobuf:"varint,2,opt,name=is_self_action,json=isSelfAction,proto3" json:"is_self_action,omitempty"` // 是否是自己的操作
	IsWatering   bool       `protobuf:"varint,3,opt,name=is_watering,json=isWatering,proto3" json:"is_watering,omitempty"`         // 是否是浇水操作(否则为施肥)
}

func (x *AdjustHarvestTimeRequest) Reset() {
	*x = AdjustHarvestTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustHarvestTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustHarvestTimeRequest) ProtoMessage() {}

func (x *AdjustHarvestTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustHarvestTimeRequest.ProtoReflect.Descriptor instead.
func (*AdjustHarvestTimeRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{17}
}

func (x *AdjustHarvestTimeRequest) GetPlantInfo() *PlantInfo {
	if x != nil {
		return x.PlantInfo
	}
	return nil
}

func (x *AdjustHarvestTimeRequest) GetIsSelfAction() bool {
	if x != nil {
		return x.IsSelfAction
	}
	return false
}

func (x *AdjustHarvestTimeRequest) GetIsWatering() bool {
	if x != nil {
		return x.IsWatering
	}
	return false
}

// 收获时间调整响应
type AdjustHarvestTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewHarvestTime int64 `protobuf:"varint,1,opt,name=new_harvest_time,json=newHarvestTime,proto3" json:"new_harvest_time,omitempty"` // 新的收获时间
	TimeReduced    int64 `protobuf:"varint,2,opt,name=time_reduced,json=timeReduced,proto3" json:"time_reduced,omitempty"`            // 减少的时间(秒)
}

func (x *AdjustHarvestTimeResponse) Reset() {
	*x = AdjustHarvestTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustHarvestTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustHarvestTimeResponse) ProtoMessage() {}

func (x *AdjustHarvestTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustHarvestTimeResponse.ProtoReflect.Descriptor instead.
func (*AdjustHarvestTimeResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{18}
}

func (x *AdjustHarvestTimeResponse) GetNewHarvestTime() int64 {
	if x != nil {
		return x.NewHarvestTime
	}
	return 0
}

func (x *AdjustHarvestTimeResponse) GetTimeReduced() int64 {
	if x != nil {
		return x.TimeReduced
	}
	return 0
}

// 维护需求检查请求
type MaintenanceNeedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MaintenanceNeedsRequest) Reset() {
	*x = MaintenanceNeedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceNeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceNeedsRequest) ProtoMessage() {}

func (x *MaintenanceNeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceNeedsRequest.ProtoReflect.Descriptor instead.
func (*MaintenanceNeedsRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{19}
}

func (x *MaintenanceNeedsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 维护需求检查响应
type MaintenanceNeedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaintenanceNeeds []*MaintenanceNeeds `protobuf:"bytes,1,rep,name=maintenance_needs,json=maintenanceNeeds,proto3" json:"maintenance_needs,omitempty"`
}

func (x *MaintenanceNeedsResponse) Reset() {
	*x = MaintenanceNeedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceNeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceNeedsResponse) ProtoMessage() {}

func (x *MaintenanceNeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceNeedsResponse.ProtoReflect.Descriptor instead.
func (*MaintenanceNeedsResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{20}
}

func (x *MaintenanceNeedsResponse) GetMaintenanceNeeds() []*MaintenanceNeeds {
	if x != nil {
		return x.MaintenanceNeeds
	}
	return nil
}

// 维护需求检查请求
type CheckCropsNeedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []int64 `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckCropsNeedsRequest) Reset() {
	*x = CheckCropsNeedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCropsNeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCropsNeedsRequest) ProtoMessage() {}

func (x *CheckCropsNeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCropsNeedsRequest.ProtoReflect.Descriptor instead.
func (*CheckCropsNeedsRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{21}
}

func (x *CheckCropsNeedsRequest) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

// 维护需求检查响应
type CheckCropsNeedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaintenanceNeeds map[int64]*MaintenanceNeeds `protobuf:"bytes,1,rep,name=maintenance_needs,json=maintenanceNeeds,proto3" json:"maintenance_needs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckCropsNeedsResponse) Reset() {
	*x = CheckCropsNeedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCropsNeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCropsNeedsResponse) ProtoMessage() {}

func (x *CheckCropsNeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCropsNeedsResponse.ProtoReflect.Descriptor instead.
func (*CheckCropsNeedsResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{22}
}

func (x *CheckCropsNeedsResponse) GetMaintenanceNeeds() map[int64]*MaintenanceNeeds {
	if x != nil {
		return x.MaintenanceNeeds
	}
	return nil
}

// 维护需求检查响应
type MaintenanceNeeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedsWater      int64 `protobuf:"varint,1,opt,name=needs_water,json=needsWater,proto3" json:"needs_water,omitempty"`                // 是否可浇水 1可以，2不行
	NeedsFertilizer int64 `protobuf:"varint,2,opt,name=needs_fertilizer,json=needsFertilizer,proto3" json:"needs_fertilizer,omitempty"` // 是否可施肥 1可以，2不行
	Position        int64 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`                                      // 土地坐标
	LandId          int64 `protobuf:"varint,4,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                            // 土地ID
	PlantId         int64 `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                         // 种植ID
}

func (x *MaintenanceNeeds) Reset() {
	*x = MaintenanceNeeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceNeeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceNeeds) ProtoMessage() {}

func (x *MaintenanceNeeds) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceNeeds.ProtoReflect.Descriptor instead.
func (*MaintenanceNeeds) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{23}
}

func (x *MaintenanceNeeds) GetNeedsWater() int64 {
	if x != nil {
		return x.NeedsWater
	}
	return 0
}

func (x *MaintenanceNeeds) GetNeedsFertilizer() int64 {
	if x != nil {
		return x.NeedsFertilizer
	}
	return 0
}

func (x *MaintenanceNeeds) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *MaintenanceNeeds) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *MaintenanceNeeds) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

// 生长进度请求
type GrowthProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantTime   int64 `protobuf:"varint,1,opt,name=plant_time,json=plantTime,proto3" json:"plant_time,omitempty"`       // 种植时间
	HarvestTime int64 `protobuf:"varint,2,opt,name=harvest_time,json=harvestTime,proto3" json:"harvest_time,omitempty"` // 收获时间
	CurrentTime int64 `protobuf:"varint,3,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"` // 当前时间(如果为0则使用服务器时间)
}

func (x *GrowthProgressRequest) Reset() {
	*x = GrowthProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthProgressRequest) ProtoMessage() {}

func (x *GrowthProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthProgressRequest.ProtoReflect.Descriptor instead.
func (*GrowthProgressRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{24}
}

func (x *GrowthProgressRequest) GetPlantTime() int64 {
	if x != nil {
		return x.PlantTime
	}
	return 0
}

func (x *GrowthProgressRequest) GetHarvestTime() int64 {
	if x != nil {
		return x.HarvestTime
	}
	return 0
}

func (x *GrowthProgressRequest) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// 生长进度响应
type GrowthProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrowthPercentage float64 `protobuf:"fixed64,1,opt,name=growth_percentage,json=growthPercentage,proto3" json:"growth_percentage,omitempty"` // 生长进度百分比(0-100)
	RemainingTime    int64   `protobuf:"varint,2,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`           // 剩余生长时间(秒)
}

func (x *GrowthProgressResponse) Reset() {
	*x = GrowthProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthProgressResponse) ProtoMessage() {}

func (x *GrowthProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthProgressResponse.ProtoReflect.Descriptor instead.
func (*GrowthProgressResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{25}
}

func (x *GrowthProgressResponse) GetGrowthPercentage() float64 {
	if x != nil {
		return x.GrowthPercentage
	}
	return 0
}

func (x *GrowthProgressResponse) GetRemainingTime() int64 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

// 植物当前状态请求
type PlantStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PlantStateRequest) Reset() {
	*x = PlantStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantStateRequest) ProtoMessage() {}

func (x *PlantStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantStateRequest.ProtoReflect.Descriptor instead.
func (*PlantStateRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{26}
}

func (x *PlantStateRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 植物当前状态响应
type PlantStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantStates map[int64]*PlantStateInfo `protobuf:"bytes,1,rep,name=plant_states,json=plantStates,proto3" json:"plant_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlantStateResponse) Reset() {
	*x = PlantStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantStateResponse) ProtoMessage() {}

func (x *PlantStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantStateResponse.ProtoReflect.Descriptor instead.
func (*PlantStateResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{27}
}

func (x *PlantStateResponse) GetPlantStates() map[int64]*PlantStateInfo {
	if x != nil {
		return x.PlantStates
	}
	return nil
}

// 植物当前状态响应
type PlantStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStage     int64               `protobuf:"varint,1,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"`              // 当前生长阶段(1-6)
	GrowthPercentage float64             `protobuf:"fixed64,2,opt,name=growth_percentage,json=growthPercentage,proto3" json:"growth_percentage,omitempty"` // 生长进度百分比(0-100)
	ReadyToHarvest   int64               `protobuf:"varint,3,opt,name=ready_to_harvest,json=readyToHarvest,proto3" json:"ready_to_harvest,omitempty"`      // 是否可以收获
	NeedsWater       int64               `protobuf:"varint,4,opt,name=needs_water,json=needsWater,proto3" json:"needs_water,omitempty"`                    // 是否需要浇水
	NeedsFertilizer  int64               `protobuf:"varint,5,opt,name=needs_fertilizer,json=needsFertilizer,proto3" json:"needs_fertilizer,omitempty"`     // 是否需要施肥
	TimeToNextStage  int64               `protobuf:"varint,6,opt,name=time_to_next_stage,json=timeToNextStage,proto3" json:"time_to_next_stage,omitempty"` // 距离下一阶段的时间(秒)
	TimeToHarvest    int64               `protobuf:"varint,7,opt,name=time_to_harvest,json=timeToHarvest,proto3" json:"time_to_harvest,omitempty"`         // 距离收获的时间(秒)
	NextStage        int64               `protobuf:"varint,8,opt,name=next_stage,json=nextStage,proto3" json:"next_stage,omitempty"`                       // 下一个生长阶段
	PlantInfo        *UserPlantingDetail `protobuf:"bytes,9,opt,name=plant_info,json=plantInfo,proto3" json:"plant_info,omitempty"`                        // 当前的植物信息
}

func (x *PlantStateInfo) Reset() {
	*x = PlantStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantStateInfo) ProtoMessage() {}

func (x *PlantStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantStateInfo.ProtoReflect.Descriptor instead.
func (*PlantStateInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{28}
}

func (x *PlantStateInfo) GetCurrentStage() int64 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *PlantStateInfo) GetGrowthPercentage() float64 {
	if x != nil {
		return x.GrowthPercentage
	}
	return 0
}

func (x *PlantStateInfo) GetReadyToHarvest() int64 {
	if x != nil {
		return x.ReadyToHarvest
	}
	return 0
}

func (x *PlantStateInfo) GetNeedsWater() int64 {
	if x != nil {
		return x.NeedsWater
	}
	return 0
}

func (x *PlantStateInfo) GetNeedsFertilizer() int64 {
	if x != nil {
		return x.NeedsFertilizer
	}
	return 0
}

func (x *PlantStateInfo) GetTimeToNextStage() int64 {
	if x != nil {
		return x.TimeToNextStage
	}
	return 0
}

func (x *PlantStateInfo) GetTimeToHarvest() int64 {
	if x != nil {
		return x.TimeToHarvest
	}
	return 0
}

func (x *PlantStateInfo) GetNextStage() int64 {
	if x != nil {
		return x.NextStage
	}
	return 0
}

func (x *PlantStateInfo) GetPlantInfo() *UserPlantingDetail {
	if x != nil {
		return x.PlantInfo
	}
	return nil
}

// 植物信息
type PlantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId                           int64 `protobuf:"varint,1,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`
	UserId                            int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FarmId                            int64 `protobuf:"varint,3,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	LandId                            int64 `protobuf:"varint,4,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`
	PlantTime                         int64 `protobuf:"varint,5,opt,name=plant_time,json=plantTime,proto3" json:"plant_time,omitempty"`                                                                              // 种植时间
	GrowthTime                        int64 `protobuf:"varint,6,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                                                                           // 生长时间(分钟)
	HarvestedAt                       int64 `protobuf:"varint,7,opt,name=harvested_at,json=harvestedAt,proto3" json:"harvested_at,omitempty"`                                                                        // 预期收获时间
	WaterCount                        int64 `protobuf:"varint,8,opt,name=water_count,json=waterCount,proto3" json:"water_count,omitempty"`                                                                           // 已浇水次数
	FertilizerCount                   int64 `protobuf:"varint,9,opt,name=fertilizer_count,json=fertilizerCount,proto3" json:"fertilizer_count,omitempty"`                                                            // 已施肥次数
	IsHarvested                       int64 `protobuf:"varint,10,opt,name=is_harvested,json=isHarvested,proto3" json:"is_harvested,omitempty"`                                                                       // 收获状态
	Status                            int64 `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                                                                                                    // 当前状态
	WateringFrequency                 int64 `protobuf:"varint,12,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                     // 浇水频率(分钟)
	FertilizingFrequency              int64 `protobuf:"varint,13,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                            // 施肥频率(分钟)
	SelfTimeReducedPerWater           int64 `protobuf:"varint,14,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 每次自己浇水减少的时间
	SelfWaterReductionPercentage      int64 `protobuf:"varint,15,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 自己浇水减少时间的百分比
	SelfTimeReducedPerFertilizer      int64 `protobuf:"varint,16,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 每次自己施肥减少的时间
	SelfFertilizerReductionPercentage int64 `protobuf:"varint,17,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 自己施肥减少时间的百分比
	FriendWaterTimeReduction          int64 `protobuf:"varint,18,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                            // 好友浇水减少的时间
	FriendWaterPercentage             int64 `protobuf:"varint,19,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                                       // 好友浇水百分比
	FriendFertilizerTimeReduction     int64 `protobuf:"varint,20,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"`             // 好友施肥减少的时间
	FriendFertilizerPercentage        int64 `protobuf:"varint,21,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`                        // 好友施肥百分比
}

func (x *PlantInfo) Reset() {
	*x = PlantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantInfo) ProtoMessage() {}

func (x *PlantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantInfo.ProtoReflect.Descriptor instead.
func (*PlantInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{29}
}

func (x *PlantInfo) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *PlantInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlantInfo) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *PlantInfo) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *PlantInfo) GetPlantTime() int64 {
	if x != nil {
		return x.PlantTime
	}
	return 0
}

func (x *PlantInfo) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *PlantInfo) GetHarvestedAt() int64 {
	if x != nil {
		return x.HarvestedAt
	}
	return 0
}

func (x *PlantInfo) GetWaterCount() int64 {
	if x != nil {
		return x.WaterCount
	}
	return 0
}

func (x *PlantInfo) GetFertilizerCount() int64 {
	if x != nil {
		return x.FertilizerCount
	}
	return 0
}

func (x *PlantInfo) GetIsHarvested() int64 {
	if x != nil {
		return x.IsHarvested
	}
	return 0
}

func (x *PlantInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlantInfo) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *PlantInfo) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *PlantInfo) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *PlantInfo) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *PlantInfo) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *PlantInfo) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *PlantInfo) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *PlantInfo) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *PlantInfo) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *PlantInfo) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

type GetOnlineUserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetOnlineUserListReq) Reset() {
	*x = GetOnlineUserListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineUserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineUserListReq) ProtoMessage() {}

func (x *GetOnlineUserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineUserListReq.ProtoReflect.Descriptor instead.
func (*GetOnlineUserListReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{30}
}

func (x *GetOnlineUserListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOnlineUserListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetOnlineUserListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	UserId []int64 `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetOnlineUserListReply) Reset() {
	*x = GetOnlineUserListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnlineUserListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineUserListReply) ProtoMessage() {}

func (x *GetOnlineUserListReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineUserListReply.ProtoReflect.Descriptor instead.
func (*GetOnlineUserListReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{31}
}

func (x *GetOnlineUserListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetOnlineUserListReply) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type UserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserIdReq) Reset() {
	*x = UserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdReq) ProtoMessage() {}

func (x *UserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdReq.ProtoReflect.Descriptor instead.
func (*UserIdReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{32}
}

func (x *UserIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserAuthenticationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserAuthenticationReq) Reset() {
	*x = UserAuthenticationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationReq) ProtoMessage() {}

func (x *UserAuthenticationReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationReq.ProtoReflect.Descriptor instead.
func (*UserAuthenticationReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{33}
}

func (x *UserAuthenticationReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserAuthenticationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserAuthenticationReply) Reset() {
	*x = UserAuthenticationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationReply) ProtoMessage() {}

func (x *UserAuthenticationReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationReply.ProtoReflect.Descriptor instead.
func (*UserAuthenticationReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{34}
}

func (x *UserAuthenticationReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 所有请求消息的基础结构，可根据需要扩展
type MsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReq) Reset() {
	*x = MsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReq) ProtoMessage() {}

func (x *MsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReq.ProtoReflect.Descriptor instead.
func (*MsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{35}
}

// *
// 所有响应消息的基础结构，可根据需要扩展
type MsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReply) Reset() {
	*x = MsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReply) ProtoMessage() {}

func (x *MsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReply.ProtoReflect.Descriptor instead.
func (*MsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{36}
}

// *
// 获取用户请求是否合法
// 用token校验用户身份
type UserAuthInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserAuthInfoMsgReq) Reset() {
	*x = UserAuthInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReq) ProtoMessage() {}

func (x *UserAuthInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{37}
}

func (x *UserAuthInfoMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// 鉴权响应
// 用token校验用户身份
type UserAuthInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	ParentId     int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`            // 上级ID（邀请用户的ID）
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"` // 语言代码
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种代码
	CurrentTime  int64  `protobuf:"varint,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`   // 当前服务器时间戳
}

func (x *UserAuthInfoMsgReply) Reset() {
	*x = UserAuthInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfoMsgReply) ProtoMessage() {}

func (x *UserAuthInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserAuthInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{38}
}

func (x *UserAuthInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserAuthInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserAuthInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserAuthInfoMsgReply) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// *
// 获取用户个人信息请求
// 用于查询当前用户的基本个人信息
type UserPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserPersonalInfoMsgReq) Reset() {
	*x = UserPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{39}
}

func (x *UserPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户个人信息响应
// 包含用户的详细个人信息
type UserPersonalInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int64          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 用户ID
	ParentId           int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                                  // 上级ID（邀请用户的ID）
	Username           string         `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                                   // 账号名称
	LanguageCode       string         `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`                       // 语言代码
	CurrencyCode       string         `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                       // 币种代码
	VipLevelId         int64          `protobuf:"varint,6,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                          // 会员等级ID（关联user_vip_levels表）
	VipLevelVal        int64          `protobuf:"varint,7,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`                       // 会员等级值
	VipLevelName       string         `protobuf:"bytes,8,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`                     // 会员等级名称
	Remark             string         `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`                                                       // 用户备注
	LastLoginTime      int64          `protobuf:"varint,10,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                // 最后登录时间（Unix时间戳）
	InvitationCode     string         `protobuf:"bytes,11,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`                // 用户的邀请码
	InviteAddr         string         `protobuf:"bytes,12,opt,name=invite_addr,json=inviteAddr,proto3" json:"invite_addr,omitempty"`                            // 用户的邀请链接
	Avatar             string         `protobuf:"bytes,13,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                      // 用户头像URL
	Phone              string         `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`                                                        // 用户手机号
	Email              string         `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`                                                        // 用户邮箱
	Wallets            []*UserWallet  `protobuf:"bytes,16,rep,name=wallets,proto3" json:"wallets,omitempty"`                                                    // 用户的钱包地址列表
	Balances           []*UserBalance `protobuf:"bytes,17,rep,name=balances,proto3" json:"balances,omitempty"`                                                  // 用户的各类钱包余额列表
	EnableSecondaryPwd int64          `protobuf:"varint,18,opt,name=enable_secondary_pwd,json=enableSecondaryPwd,proto3" json:"enable_secondary_pwd,omitempty"` // 是否设置二级密码（1：设置，2：未设置）
}

func (x *UserPersonalInfoMsgReply) Reset() {
	*x = UserPersonalInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalInfoMsgReply) ProtoMessage() {}

func (x *UserPersonalInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserPersonalInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{40}
}

func (x *UserPersonalInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *UserPersonalInfoMsgReply) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetInviteAddr() string {
	if x != nil {
		return x.InviteAddr
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserPersonalInfoMsgReply) GetWallets() []*UserWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetBalances() []*UserBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *UserPersonalInfoMsgReply) GetEnableSecondaryPwd() int64 {
	if x != nil {
		return x.EnableSecondaryPwd
	}
	return 0
}

// *
// 编辑用户个人信息请求
// 用于更新用户的个人信息设置
type UserEditPersonalInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                        // 用户身份验证令牌，必填
	Avatar               string        `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                                                       // 用户形象(头像信息)
	FarmName             string        `protobuf:"bytes,3,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                   // 农场名称，可选，修改时使用
	HasCompletedTutorial BooleanStatus `protobuf:"varint,4,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=user.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 新手教程状态（YES:已完成, NO:未完成）
	HasReceivedFreeGift  BooleanStatus `protobuf:"varint,5,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=user.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`  // 是否领取免费种子（YES:已完成, NO:未完成）
	LanguageCode         string        `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`                                                       // 编辑语言
}

func (x *UserEditPersonalInfoMsgReq) Reset() {
	*x = UserEditPersonalInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditPersonalInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditPersonalInfoMsgReq) ProtoMessage() {}

func (x *UserEditPersonalInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditPersonalInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEditPersonalInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{41}
}

func (x *UserEditPersonalInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEditPersonalInfoMsgReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserEditPersonalInfoMsgReq) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserEditPersonalInfoMsgReq) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserEditPersonalInfoMsgReq) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type UserEditPersonalInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserEditPersonalInfoMsgReply) Reset() {
	*x = UserEditPersonalInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditPersonalInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditPersonalInfoMsgReply) ProtoMessage() {}

func (x *UserEditPersonalInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditPersonalInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserEditPersonalInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{42}
}

func (x *UserEditPersonalInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserEditPersonalInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 编辑用户个人信息请求
// 用于更新用户的个人敏感信息设置
type UserEditSensitiveInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category    int64  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`                         // 1：修改密码，2：修改设置二级密码 ，3：验证账号（传3单独验证账号，2：设置二级密码的时候必须验证账号，1：不用验证账号）
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               // 用户身份验证令牌，必填
	OldPassword string `protobuf:"bytes,3,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"` //旧密码
	NewPassword string `protobuf:"bytes,4,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"` //新密码
	Account     string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                            // 账号
	VerifyType  int64  `protobuf:"varint,6,opt,name=verify_type,json=verifyType,proto3" json:"verify_type,omitempty"`   // 验证方式：1-密码验证，2-短信验证，3-邮箱验证，4-图片验证码
	Captcha     string `protobuf:"bytes,7,opt,name=captcha,proto3" json:"captcha,omitempty"`                            // 验证码
}

func (x *UserEditSensitiveInfoMsgReq) Reset() {
	*x = UserEditSensitiveInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditSensitiveInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditSensitiveInfoMsgReq) ProtoMessage() {}

func (x *UserEditSensitiveInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditSensitiveInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserEditSensitiveInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{43}
}

func (x *UserEditSensitiveInfoMsgReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserEditSensitiveInfoMsgReq) GetVerifyType() int64 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

type UserEditSensitiveInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserEditSensitiveInfoMsgReply) Reset() {
	*x = UserEditSensitiveInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditSensitiveInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditSensitiveInfoMsgReply) ProtoMessage() {}

func (x *UserEditSensitiveInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditSensitiveInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserEditSensitiveInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{44}
}

func (x *UserEditSensitiveInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserEditSensitiveInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 用户钱包地址信息
// 表示用户的各种加密货币钱包地址
type UserWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                           // 主键ID
	UserId              int64           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                     // 用户ID
	WalletAddress       string          `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`                                                 // 钱包地址
	WalletName          string          `protobuf:"bytes,4,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`                                                          // 钱包名称/备注
	WalletType          string          `protobuf:"bytes,5,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                                                          // 钱包类型(ETH/BTC等)
	UsageType           WalletUsageType `protobuf:"varint,6,opt,name=usage_type,json=usageType,proto3,enum=user.v1.WalletUsageType" json:"usage_type,omitempty"`                               // 用途类型
	IsDefaultDeposit    BooleanStatus   `protobuf:"varint,7,opt,name=is_default_deposit,json=isDefaultDeposit,proto3,enum=user.v1.BooleanStatus" json:"is_default_deposit,omitempty"`          // 是否默认存款地址
	IsDefaultWithdrawal BooleanStatus   `protobuf:"varint,8,opt,name=is_default_withdrawal,json=isDefaultWithdrawal,proto3,enum=user.v1.BooleanStatus" json:"is_default_withdrawal,omitempty"` // 是否默认提款地址
}

func (x *UserWallet) Reset() {
	*x = UserWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWallet) ProtoMessage() {}

func (x *UserWallet) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWallet.ProtoReflect.Descriptor instead.
func (*UserWallet) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{45}
}

func (x *UserWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserWallet) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWallet) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *UserWallet) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *UserWallet) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *UserWallet) GetUsageType() WalletUsageType {
	if x != nil {
		return x.UsageType
	}
	return WalletUsageType_USAGE_TYPE_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultDeposit() BooleanStatus {
	if x != nil {
		return x.IsDefaultDeposit
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserWallet) GetIsDefaultWithdrawal() BooleanStatus {
	if x != nil {
		return x.IsDefaultWithdrawal
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 用户余额信息
// 表示用户在各类钱包中的余额状态
type UserBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 主键ID
	WalletType    WalletType `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=user.v1.WalletType" json:"wallet_type,omitempty"` // 钱包类型
	UserId        int64      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                     // 用户ID
	Balance       int64      `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`                                                 // 可用余额
	LockedBalance int64      `protobuf:"varint,5,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`                // 锁定余额（如提现中等）
}

func (x *UserBalance) Reset() {
	*x = UserBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalance) ProtoMessage() {}

func (x *UserBalance) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalance.ProtoReflect.Descriptor instead.
func (*UserBalance) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{46}
}

func (x *UserBalance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBalance) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *UserBalance) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserBalance) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

// *
// 获取用户仓库信息请求
// 用于查询当前用户的仓库库存信息
type UserStorageInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page        int64       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int64       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProductType ProductType `protobuf:"varint,4,opt,name=product_type,json=productType,proto3,enum=user.v1.ProductType" json:"product_type,omitempty"`
}

func (x *UserStorageInfoMsgReq) Reset() {
	*x = UserStorageInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReq) ProtoMessage() {}

func (x *UserStorageInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{47}
}

func (x *UserStorageInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReq) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

// *
// 用户仓库信息响应
// 包含用户仓库中的所有物品
type UserStorageInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*UserStorageDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 用户仓库物品列表
	Extend    string               `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *UserStorageInfoMsgReply) Reset() {
	*x = UserStorageInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageInfoMsgReply) ProtoMessage() {}

func (x *UserStorageInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserStorageInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{48}
}

func (x *UserStorageInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserStorageInfoMsgReply) GetRows() []*UserStorageDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserStorageInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户仓库物品信息
// 表示用户仓库中的单个物品详细信息
type UserStorageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // 自增主键
	StorageId       int64       `protobuf:"varint,21,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                               // 仓库物品ID
	UserId          int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户ID，关联到用户表
	ProductType     ProductType `protobuf:"varint,3,opt,name=product_type,json=productType,proto3,enum=user.v1.ProductType" json:"product_type,omitempty"` // 商品类型
	ProductId       int64       `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                // 商品ID，关联到对应产品配置表
	ProductName     string      `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 商品名称快照，保存购买时的名称
	ProductImageUrl string      `protobuf:"bytes,6,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`             // 商品图片地址快照，保存购买时的图片URL
	ProductQuantity int32       `protobuf:"varint,7,opt,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`              // 商品数量，表示用户拥有的该商品数量
	SkuId           int64       `protobuf:"varint,8,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                            // 商品SKU ID，关联到商品SKU配置表
	SkuName         string      `protobuf:"bytes,9,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                                       // SKU名称快照，保存购买时的SKU名称
	Price           int64       `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`                                                        // 商品价格快照，保存购买时的价格（单位：ustd）
	// 以下字段仅对种子类型有效
	GrowthTime           int64 `protobuf:"varint,11,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                               // 生长时间快照（单位：分钟）
	CoinReward           int64 `protobuf:"varint,12,opt,name=coin_reward,json=coinReward,proto3" json:"coin_reward,omitempty"`                               // 成熟后的收益快照（单位：代币）
	WateringFrequency    int64 `protobuf:"varint,22,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`          // 浇水频率（次/天）
	FertilizingFrequency int64 `protobuf:"varint,23,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"` //施肥频率（次/天)
	// 自己操作相关字段
	SelfTimeReducedPerWater           int64 `protobuf:"varint,13,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 自己每次浇水减少的时间快照（单位：分钟）
	SelfWaterReductionPercentage      int64 `protobuf:"varint,14,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 自己浇水减少时间的百分比快照（0-100）
	SelfTimeReducedPerFertilizer      int64 `protobuf:"varint,15,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 自己每次施肥减少的时间快照（单位：分钟）
	SelfFertilizerReductionPercentage int64 `protobuf:"varint,16,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 自己施肥减少时间的百分比快照（0-100）
	// 好友操作相关字段
	FriendWaterTimeReduction      int64 `protobuf:"varint,17,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                // 好友每次浇水减少的时间快照（单位：分钟）
	FriendWaterPercentage         int64 `protobuf:"varint,18,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                           // 好友浇水减少时间的百分比快照（0-100）
	FriendFertilizerTimeReduction int64 `protobuf:"varint,19,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"` // 好友每次施肥减少的时间快照（单位：分钟）
	FriendFertilizerPercentage    int64 `protobuf:"varint,20,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`            // 好友施肥减少时间的百分比快照（0-100）
}

func (x *UserStorageDetail) Reset() {
	*x = UserStorageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStorageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStorageDetail) ProtoMessage() {}

func (x *UserStorageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStorageDetail.ProtoReflect.Descriptor instead.
func (*UserStorageDetail) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{49}
}

func (x *UserStorageDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserStorageDetail) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *UserStorageDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStorageDetail) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *UserStorageDetail) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UserStorageDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UserStorageDetail) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *UserStorageDetail) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

func (x *UserStorageDetail) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *UserStorageDetail) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

func (x *UserStorageDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserStorageDetail) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *UserStorageDetail) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *UserStorageDetail) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *UserStorageDetail) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *UserStorageDetail) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *UserStorageDetail) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

// *
// 获取用户农场信息请求
// 用于查询当前用户的农场状态信息
type UserFarmInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
}

func (x *UserFarmInfoMsgReq) Reset() {
	*x = UserFarmInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReq) ProtoMessage() {}

func (x *UserFarmInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{50}
}

func (x *UserFarmInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// *
// 用户农场信息响应
// 包含用户农场的基本信息
type UserFarmInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                               // 主键ID
	FarmId                int64         `protobuf:"varint,2,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                                                         // 农场ID
	UserId                int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                         // 用户ID
	FarmName              string        `protobuf:"bytes,4,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                                                    // 农场名称
	TotalLandCount        int64         `protobuf:"varint,5,opt,name=total_land_count,json=totalLandCount,proto3" json:"total_land_count,omitempty"`                                               // 农场总土地数量
	WaterLimitPerDay      int64         `protobuf:"varint,6,opt,name=water_limit_per_day,json=waterLimitPerDay,proto3" json:"water_limit_per_day,omitempty"`                                       // 每日浇水限制次数
	FertilizerLimitPerDay int64         `protobuf:"varint,7,opt,name=fertilizer_limit_per_day,json=fertilizerLimitPerDay,proto3" json:"fertilizer_limit_per_day,omitempty"`                        // 每日作物施肥限制次数
	TotalRewardCoins      int64         `protobuf:"varint,8,opt,name=total_reward_coins,json=totalRewardCoins,proto3" json:"total_reward_coins,omitempty"`                                         // 农场总收益金币
	HasReceivedFreeGift   BooleanStatus `protobuf:"varint,9,opt,name=has_received_free_gift,json=hasReceivedFreeGift,proto3,enum=user.v1.BooleanStatus" json:"has_received_free_gift,omitempty"`   // 是否已领取新用户免费商品
	HasCompletedTutorial  BooleanStatus `protobuf:"varint,10,opt,name=has_completed_tutorial,json=hasCompletedTutorial,proto3,enum=user.v1.BooleanStatus" json:"has_completed_tutorial,omitempty"` // 是否已参加过新手教程
}

func (x *UserFarmInfoMsgReply) Reset() {
	*x = UserFarmInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmInfoMsgReply) ProtoMessage() {}

func (x *UserFarmInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFarmInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{51}
}

func (x *UserFarmInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *UserFarmInfoMsgReply) GetTotalLandCount() int64 {
	if x != nil {
		return x.TotalLandCount
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetWaterLimitPerDay() int64 {
	if x != nil {
		return x.WaterLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetFertilizerLimitPerDay() int64 {
	if x != nil {
		return x.FertilizerLimitPerDay
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetTotalRewardCoins() int64 {
	if x != nil {
		return x.TotalRewardCoins
	}
	return 0
}

func (x *UserFarmInfoMsgReply) GetHasReceivedFreeGift() BooleanStatus {
	if x != nil {
		return x.HasReceivedFreeGift
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserFarmInfoMsgReply) GetHasCompletedTutorial() BooleanStatus {
	if x != nil {
		return x.HasCompletedTutorial
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// 获取用户土地信息请求
// 用于查询当前用户的土地信息
type UserLandInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *UserLandInfoMsgReq) Reset() {
	*x = UserLandInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReq) ProtoMessage() {}

func (x *UserLandInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{52}
}

func (x *UserLandInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 用户土地信息响应
// 包含用户所有土地的信息列表
type UserLandInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64             `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*UserLandDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 用户土地信息列表
	Extend    string            `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *UserLandInfoMsgReply) Reset() {
	*x = UserLandInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandInfoMsgReply) ProtoMessage() {}

func (x *UserLandInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserLandInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{53}
}

func (x *UserLandInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserLandInfoMsgReply) GetRows() []*UserLandDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserLandInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 用户土地详细信息
// 表示用户的单块土地的详细状态
type UserLandDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // UUID
	LandId       int64               `protobuf:"varint,2,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                        // 土地ID
	UserId       int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	FarmId       int64               `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                        // 农场ID
	PlantId      int64               `protobuf:"varint,5,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                     // 种植记录ID
	Position     int64               `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`                                  // 土地位置编号（1-20暂时）
	Status       LandStatus          `protobuf:"varint,7,opt,name=status,proto3,enum=user.v1.LandStatus" json:"status,omitempty"`              // 土地状态
	PlantedPlant *UserPlantingDetail `protobuf:"bytes,8,opt,name=planted_plant,json=plantedPlant,proto3,oneof" json:"planted_plant,omitempty"` // 种植信息，当status为PLANTED时才有值
	// 一些土地状态描述
	CropNeedWater     string `protobuf:"bytes,9,opt,name=crop_need_water,json=cropNeedWater,proto3" json:"crop_need_water,omitempty"`              // 农作物待浇水
	CropCanHarvest    string `protobuf:"bytes,10,opt,name=crop_can_harvest,json=cropCanHarvest,proto3" json:"crop_can_harvest,omitempty"`          // 农作物待收获
	SeedWaitPlant     string `protobuf:"bytes,11,opt,name=seed_wait_plant,json=seedWaitPlant,proto3" json:"seed_wait_plant,omitempty"`             // 种子待种植
	CropNeedFertilize string `protobuf:"bytes,12,opt,name=crop_need_fertilize,json=cropNeedFertilize,proto3" json:"crop_need_fertilize,omitempty"` // 农作物待施肥
	BuySeed           string `protobuf:"bytes,13,opt,name=buy_seed,json=buySeed,proto3" json:"buy_seed,omitempty"`                                 // 购买种子
}

func (x *UserLandDetail) Reset() {
	*x = UserLandDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLandDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLandDetail) ProtoMessage() {}

func (x *UserLandDetail) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLandDetail.ProtoReflect.Descriptor instead.
func (*UserLandDetail) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{54}
}

func (x *UserLandDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLandDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserLandDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLandDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserLandDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserLandDetail) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *UserLandDetail) GetStatus() LandStatus {
	if x != nil {
		return x.Status
	}
	return LandStatus_LAND_STATUS_UNSPECIFIED
}

func (x *UserLandDetail) GetPlantedPlant() *UserPlantingDetail {
	if x != nil {
		return x.PlantedPlant
	}
	return nil
}

func (x *UserLandDetail) GetCropNeedWater() string {
	if x != nil {
		return x.CropNeedWater
	}
	return ""
}

func (x *UserLandDetail) GetCropCanHarvest() string {
	if x != nil {
		return x.CropCanHarvest
	}
	return ""
}

func (x *UserLandDetail) GetSeedWaitPlant() string {
	if x != nil {
		return x.SeedWaitPlant
	}
	return ""
}

func (x *UserLandDetail) GetCropNeedFertilize() string {
	if x != nil {
		return x.CropNeedFertilize
	}
	return ""
}

func (x *UserLandDetail) GetBuySeed() string {
	if x != nil {
		return x.BuySeed
	}
	return ""
}

// *
// 用户种植记录详细信息
// 表示用户种植的单株作物的详细信息
type UserPlantingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                  // 自增ID
	PlantId         int64         `protobuf:"varint,2,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`                                         // 种植记录ID
	UserId          int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                            // 用户ID
	FarmId          int64         `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                            // 农场ID
	LandId          int64         `protobuf:"varint,5,opt,name=land_id,json=landId,proto3" json:"land_id,omitempty"`                                            // 土地ID
	StorageId       int64         `protobuf:"varint,6,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                   // 用户的仓库物品ID
	PlantTime       int64         `protobuf:"varint,29,opt,name=plant_time,json=plantTime,proto3" json:"plant_time,omitempty"`                                  // 种植时间（Unix时间戳）
	WaterCount      int64         `protobuf:"varint,8,opt,name=water_count,json=waterCount,proto3" json:"water_count,omitempty"`                                // 已浇水总次数
	FertilizerCount int64         `protobuf:"varint,9,opt,name=fertilizer_count,json=fertilizerCount,proto3" json:"fertilizer_count,omitempty"`                 // 已施肥总次数
	IsHarvested     HarvestStatus `protobuf:"varint,10,opt,name=is_harvested,json=isHarvested,proto3,enum=user.v1.HarvestStatus" json:"is_harvested,omitempty"` // 是否已收获
	HarvestedAt     int64         `protobuf:"varint,11,opt,name=harvested_at,json=harvestedAt,proto3" json:"harvested_at,omitempty"`                            // 收获时间（Unix时间戳）
	CoinsEarned     int64         `protobuf:"varint,12,opt,name=coins_earned,json=coinsEarned,proto3" json:"coins_earned,omitempty"`                            // 作物产生的金币数量
	Status          GrowthStatus  `protobuf:"varint,13,opt,name=status,proto3,enum=user.v1.GrowthStatus" json:"status,omitempty"`                               // 生长状态
	// 快照字段
	ProductName                       string `protobuf:"bytes,28,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                                        // 种植时商品名称快照
	CropId                            int64  `protobuf:"varint,7,opt,name=crop_id,json=cropId,proto3" json:"crop_id,omitempty"`                                                                                       // 作物ID（对应商店信息中的sku_id或者种子信息中的id）
	CropName                          string `protobuf:"bytes,14,opt,name=crop_name,json=cropName,proto3" json:"crop_name,omitempty"`                                                                                 // 种植时作物的作物名称快照
	Price                             int64  `protobuf:"varint,15,opt,name=price,proto3" json:"price,omitempty"`                                                                                                      // 种植时作物的价格快照
	GrowthTime                        int64  `protobuf:"varint,16,opt,name=growth_time,json=growthTime,proto3" json:"growth_time,omitempty"`                                                                          // 种植时作物的生长时间快照
	CoinReward                        int64  `protobuf:"varint,17,opt,name=coin_reward,json=coinReward,proto3" json:"coin_reward,omitempty"`                                                                          // 种植时作物的金币奖励快照
	WateringFrequency                 int64  `protobuf:"varint,18,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                     // 种植时作物的浇水频率快照
	FertilizingFrequency              int64  `protobuf:"varint,19,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                            // 种植时作物的施肥频率快照
	SelfTimeReducedPerWater           int64  `protobuf:"varint,20,opt,name=self_time_reduced_per_water,json=selfTimeReducedPerWater,proto3" json:"self_time_reduced_per_water,omitempty"`                             // 种植时每次自己浇水减少的时间快照
	SelfWaterReductionPercentage      int64  `protobuf:"varint,21,opt,name=self_water_reduction_percentage,json=selfWaterReductionPercentage,proto3" json:"self_water_reduction_percentage,omitempty"`                // 种植时自己浇水减少时间的百分比快照
	SelfTimeReducedPerFertilizer      int64  `protobuf:"varint,22,opt,name=self_time_reduced_per_fertilizer,json=selfTimeReducedPerFertilizer,proto3" json:"self_time_reduced_per_fertilizer,omitempty"`              // 种植时每次自己施肥减少的时间快照
	SelfFertilizerReductionPercentage int64  `protobuf:"varint,23,opt,name=self_fertilizer_reduction_percentage,json=selfFertilizerReductionPercentage,proto3" json:"self_fertilizer_reduction_percentage,omitempty"` // 种植时自己施肥减少时间的百分比快照
	FriendWaterTimeReduction          int64  `protobuf:"varint,24,opt,name=friend_water_time_reduction,json=friendWaterTimeReduction,proto3" json:"friend_water_time_reduction,omitempty"`                            // 种植时好友浇水减少的时间快照
	FriendWaterPercentage             int64  `protobuf:"varint,25,opt,name=friend_water_percentage,json=friendWaterPercentage,proto3" json:"friend_water_percentage,omitempty"`                                       // 种植时好友浇水百分比快照
	FriendFertilizerTimeReduction     int64  `protobuf:"varint,26,opt,name=friend_fertilizer_time_reduction,json=friendFertilizerTimeReduction,proto3" json:"friend_fertilizer_time_reduction,omitempty"`             // 种植时好友施肥减少的时间快照
	FriendFertilizerPercentage        int64  `protobuf:"varint,27,opt,name=friend_fertilizer_percentage,json=friendFertilizerPercentage,proto3" json:"friend_fertilizer_percentage,omitempty"`                        // 种植时好友施肥百分比快照
}

func (x *UserPlantingDetail) Reset() {
	*x = UserPlantingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPlantingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPlantingDetail) ProtoMessage() {}

func (x *UserPlantingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPlantingDetail.ProtoReflect.Descriptor instead.
func (*UserPlantingDetail) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{55}
}

func (x *UserPlantingDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPlantingDetail) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UserPlantingDetail) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPlantingDetail) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *UserPlantingDetail) GetLandId() int64 {
	if x != nil {
		return x.LandId
	}
	return 0
}

func (x *UserPlantingDetail) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *UserPlantingDetail) GetPlantTime() int64 {
	if x != nil {
		return x.PlantTime
	}
	return 0
}

func (x *UserPlantingDetail) GetWaterCount() int64 {
	if x != nil {
		return x.WaterCount
	}
	return 0
}

func (x *UserPlantingDetail) GetFertilizerCount() int64 {
	if x != nil {
		return x.FertilizerCount
	}
	return 0
}

func (x *UserPlantingDetail) GetIsHarvested() HarvestStatus {
	if x != nil {
		return x.IsHarvested
	}
	return HarvestStatus_HARVEST_STATUS_UNSPECIFIED
}

func (x *UserPlantingDetail) GetHarvestedAt() int64 {
	if x != nil {
		return x.HarvestedAt
	}
	return 0
}

func (x *UserPlantingDetail) GetCoinsEarned() int64 {
	if x != nil {
		return x.CoinsEarned
	}
	return 0
}

func (x *UserPlantingDetail) GetStatus() GrowthStatus {
	if x != nil {
		return x.Status
	}
	return GrowthStatus_GROWTH_STATUS_UNSPECIFIED
}

func (x *UserPlantingDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UserPlantingDetail) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *UserPlantingDetail) GetCropName() string {
	if x != nil {
		return x.CropName
	}
	return ""
}

func (x *UserPlantingDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserPlantingDetail) GetGrowthTime() int64 {
	if x != nil {
		return x.GrowthTime
	}
	return 0
}

func (x *UserPlantingDetail) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *UserPlantingDetail) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *UserPlantingDetail) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfTimeReducedPerWater() int64 {
	if x != nil {
		return x.SelfTimeReducedPerWater
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfWaterReductionPercentage() int64 {
	if x != nil {
		return x.SelfWaterReductionPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfTimeReducedPerFertilizer() int64 {
	if x != nil {
		return x.SelfTimeReducedPerFertilizer
	}
	return 0
}

func (x *UserPlantingDetail) GetSelfFertilizerReductionPercentage() int64 {
	if x != nil {
		return x.SelfFertilizerReductionPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendWaterTimeReduction() int64 {
	if x != nil {
		return x.FriendWaterTimeReduction
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendWaterPercentage() int64 {
	if x != nil {
		return x.FriendWaterPercentage
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendFertilizerTimeReduction() int64 {
	if x != nil {
		return x.FriendFertilizerTimeReduction
	}
	return 0
}

func (x *UserPlantingDetail) GetFriendFertilizerPercentage() int64 {
	if x != nil {
		return x.FriendFertilizerPercentage
	}
	return 0
}

// *
// 用户农场操作请求
// 用于对自己或他人的农场进行各种操作
type UserFarmOpsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                               // 用户身份验证令牌，必填
	OperateType    FarmOperationType `protobuf:"varint,2,opt,name=operate_type,json=operateType,proto3,enum=user.v1.FarmOperationType" json:"operate_type,omitempty"` // 操作类型，必填
	OpToUserId     int64             `protobuf:"varint,3,opt,name=op_to_user_id,json=opToUserId,proto3" json:"op_to_user_id,omitempty"`                               // 被操作的用户ID，必填（可以是自己或好友ID）
	OpToFarmId     int64             `protobuf:"varint,4,opt,name=op_to_farm_id,json=opToFarmId,proto3" json:"op_to_farm_id,omitempty"`                               // 被操作的农场ID，必填
	OpToLandId     int64             `protobuf:"varint,5,opt,name=op_to_land_id,json=opToLandId,proto3" json:"op_to_land_id,omitempty"`                               // 被操作的土地ID，必填
	OpLandPosition int64             `protobuf:"varint,6,opt,name=op_land_position,json=opLandPosition,proto3" json:"op_land_position,omitempty"`                     // 被操作的土地位置编号，必填
	StorageId      int64             `protobuf:"varint,7,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                      // 仓库物品ID（里面包含操作的作物详情）
}

func (x *UserFarmOpsMsgReq) Reset() {
	*x = UserFarmOpsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmOpsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmOpsMsgReq) ProtoMessage() {}

func (x *UserFarmOpsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmOpsMsgReq.ProtoReflect.Descriptor instead.
func (*UserFarmOpsMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{56}
}

func (x *UserFarmOpsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOperateType() FarmOperationType {
	if x != nil {
		return x.OperateType
	}
	return FarmOperationType_OPERATION_UNSPECIFIED
}

func (x *UserFarmOpsMsgReq) GetOpToUserId() int64 {
	if x != nil {
		return x.OpToUserId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToFarmId() int64 {
	if x != nil {
		return x.OpToFarmId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpToLandId() int64 {
	if x != nil {
		return x.OpToLandId
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetOpLandPosition() int64 {
	if x != nil {
		return x.OpLandPosition
	}
	return 0
}

func (x *UserFarmOpsMsgReq) GetStorageId() int64 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

type UserFarmOpsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserFarmOpsMsgReply) Reset() {
	*x = UserFarmOpsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFarmOpsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFarmOpsMsgReply) ProtoMessage() {}

func (x *UserFarmOpsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFarmOpsMsgReply.ProtoReflect.Descriptor instead.
func (*UserFarmOpsMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{57}
}

func (x *UserFarmOpsMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserFarmOpsMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// *
// 用户全局排名
// 展示所有用户的排名和自己的排名
type AllUserRankingInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 请求用户的ID
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码，从1开始
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
}

func (x *AllUserRankingInfoMsgReq) Reset() {
	*x = AllUserRankingInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserRankingInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserRankingInfoMsgReq) ProtoMessage() {}

func (x *AllUserRankingInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserRankingInfoMsgReq.ProtoReflect.Descriptor instead.
func (*AllUserRankingInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{58}
}

func (x *AllUserRankingInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AllUserRankingInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllUserRankingInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 用户排名列表响应
type AllUserRankingInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*FriendRankingInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                            // 用户排名列表
	MyRanking *MyRankingInfo       `protobuf:"bytes,6,opt,name=my_ranking,json=myRanking,proto3" json:"my_ranking,omitempty"` // 我的排名信息
}

func (x *AllUserRankingInfoMsgReply) Reset() {
	*x = AllUserRankingInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserRankingInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserRankingInfoMsgReply) ProtoMessage() {}

func (x *AllUserRankingInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserRankingInfoMsgReply.ProtoReflect.Descriptor instead.
func (*AllUserRankingInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{59}
}

func (x *AllUserRankingInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *AllUserRankingInfoMsgReply) GetRows() []*FriendRankingInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *AllUserRankingInfoMsgReply) GetMyRanking() *MyRankingInfo {
	if x != nil {
		return x.MyRanking
	}
	return nil
}

// *
// 用户好友排名
// 展示所有好友的排名和自己的排名
type UserFriendRankingInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 请求用户的ID
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码，从1开始
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
}

func (x *UserFriendRankingInfoMsgReq) Reset() {
	*x = UserFriendRankingInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriendRankingInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriendRankingInfoMsgReq) ProtoMessage() {}

func (x *UserFriendRankingInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriendRankingInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFriendRankingInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{60}
}

func (x *UserFriendRankingInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 好友排名列表响应
type UserFriendRankingInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*FriendRankingInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                            // 好友排名列表
	MyRanking *MyRankingInfo       `protobuf:"bytes,6,opt,name=my_ranking,json=myRanking,proto3" json:"my_ranking,omitempty"` // 我的排名信息
}

func (x *UserFriendRankingInfoMsgReply) Reset() {
	*x = UserFriendRankingInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriendRankingInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriendRankingInfoMsgReply) ProtoMessage() {}

func (x *UserFriendRankingInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriendRankingInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFriendRankingInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{61}
}

func (x *UserFriendRankingInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserFriendRankingInfoMsgReply) GetRows() []*FriendRankingInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UserFriendRankingInfoMsgReply) GetMyRanking() *MyRankingInfo {
	if x != nil {
		return x.MyRanking
	}
	return nil
}

// 单个好友排名信息
type FriendRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                    // 用户ID
	FriendId               int64  `protobuf:"varint,3,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`                                              // 好友ID
	Username               string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                                               // 用户名
	AvatarUrl              string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                            // 头像URL
	VipLevelId             int64  `protobuf:"varint,6,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                                      // VIP等级ID
	VipLevelVal            int64  `protobuf:"varint,7,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`                                   // 会员等级值
	VipLevelName           string `protobuf:"bytes,8,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`                                 // 会员等级名称
	Coin                   int64  `protobuf:"varint,9,opt,name=coin,proto3" json:"coin,omitempty"`                                                                      // 金币数量
	UpdatedAt              int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                          // 更新时间戳
	Rank                   int64  `protobuf:"varint,11,opt,name=rank,proto3" json:"rank,omitempty"`                                                                     // 排名位置
	FarmName               string `protobuf:"bytes,12,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                              // 农场名称
	WaterInteractionStatus int64  `protobuf:"varint,13,opt,name=water_interaction_status,json=waterInteractionStatus,proto3" json:"water_interaction_status,omitempty"` // 互动浇水状态 0：未任何操作，1：帮他人浇水，2：他人帮自己浇水，3：互相浇水
	CanWaterNum            int64  `protobuf:"varint,14,opt,name=can_water_num,json=canWaterNum,proto3" json:"can_water_num,omitempty"`                                  // 可浇水次数
}

func (x *FriendRankingInfo) Reset() {
	*x = FriendRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRankingInfo) ProtoMessage() {}

func (x *FriendRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRankingInfo.ProtoReflect.Descriptor instead.
func (*FriendRankingInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{62}
}

func (x *FriendRankingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FriendRankingInfo) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

func (x *FriendRankingInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FriendRankingInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *FriendRankingInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *FriendRankingInfo) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *FriendRankingInfo) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *FriendRankingInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *FriendRankingInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FriendRankingInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FriendRankingInfo) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *FriendRankingInfo) GetWaterInteractionStatus() int64 {
	if x != nil {
		return x.WaterInteractionStatus
	}
	return 0
}

func (x *FriendRankingInfo) GetCanWaterNum() int64 {
	if x != nil {
		return x.CanWaterNum
	}
	return 0
}

// 我的排名信息
type MyRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                               // 我的用户ID
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                          // 我的用户名
	AvatarUrl       string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                       // 我的头像URL
	VipLevelId      int64  `protobuf:"varint,4,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                 // 我的VIP等级ID
	VipLevelVal     int64  `protobuf:"varint,5,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`              // 会员等级值
	VipLevelName    string `protobuf:"bytes,6,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`            // 会员等级名称
	Coin            int64  `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`                                                 // 我的金币数量
	Rank            int64  `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`                                                 // 我在好友中的排名位置
	TotalFriends    int64  `protobuf:"varint,9,opt,name=total_friends,json=totalFriends,proto3" json:"total_friends,omitempty"`             // 好友总数
	TotalWaterCount int64  `protobuf:"varint,10,opt,name=total_water_count,json=totalWaterCount,proto3" json:"total_water_count,omitempty"` // 总共浇水次数
	DailyWaterLimit int64  `protobuf:"varint,11,opt,name=daily_water_limit,json=dailyWaterLimit,proto3" json:"daily_water_limit,omitempty"` // 可浇水次数
}

func (x *MyRankingInfo) Reset() {
	*x = MyRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyRankingInfo) ProtoMessage() {}

func (x *MyRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyRankingInfo.ProtoReflect.Descriptor instead.
func (*MyRankingInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{63}
}

func (x *MyRankingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MyRankingInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MyRankingInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *MyRankingInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *MyRankingInfo) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *MyRankingInfo) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *MyRankingInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MyRankingInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MyRankingInfo) GetTotalFriends() int64 {
	if x != nil {
		return x.TotalFriends
	}
	return 0
}

func (x *MyRankingInfo) GetTotalWaterCount() int64 {
	if x != nil {
		return x.TotalWaterCount
	}
	return 0
}

func (x *MyRankingInfo) GetDailyWaterLimit() int64 {
	if x != nil {
		return x.DailyWaterLimit
	}
	return 0
}

// *
// 用户产看他人农场的操作请求
// 表示查看他人的信息
type LookUserFarmsInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 查看用户ID
	ViewedUserId int64 `protobuf:"varint,2,opt,name=viewed_user_id,json=viewedUserId,proto3" json:"viewed_user_id,omitempty"` // 被查看用户ID
}

func (x *LookUserFarmsInfoMsgReq) Reset() {
	*x = LookUserFarmsInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUserFarmsInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUserFarmsInfoMsgReq) ProtoMessage() {}

func (x *LookUserFarmsInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUserFarmsInfoMsgReq.ProtoReflect.Descriptor instead.
func (*LookUserFarmsInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{64}
}

func (x *LookUserFarmsInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReq) GetViewedUserId() int64 {
	if x != nil {
		return x.ViewedUserId
	}
	return 0
}

type LookUserFarmsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户相关信息
	UserId        int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	ParentId      int64  `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                   // 上级ID（邀请用户的ID）
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                    // 账号名称
	LanguageCode  string `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`        // 语言代码
	CurrencyCode  string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`        // 币种代码
	VipLevelId    int64  `protobuf:"varint,8,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`           // 会员等级ID（关联user_vip_levels表）
	VipLevelVal   int64  `protobuf:"varint,9,opt,name=vip_level_val,json=vipLevelVal,proto3" json:"vip_level_val,omitempty"`        // 会员等级值
	VipLevelName  string `protobuf:"bytes,10,opt,name=vip_level_name,json=vipLevelName,proto3" json:"vip_level_name,omitempty"`     // 会员等级名称
	Remark        string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                                       // 用户备注
	LastLoginTime int64  `protobuf:"varint,12,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` // 最后登录时间（Unix时间戳）
	Avatar        string `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`                                       // 用户头像URL
	// 农场相关信息
	FarmId                int64  `protobuf:"varint,15,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`                                                  // 农场ID
	FarmName              string `protobuf:"bytes,17,opt,name=farm_name,json=farmName,proto3" json:"farm_name,omitempty"`                                             // 农场名称
	TotalLandCount        int64  `protobuf:"varint,18,opt,name=total_land_count,json=totalLandCount,proto3" json:"total_land_count,omitempty"`                        // 农场总土地数量
	WaterLimitPerDay      int64  `protobuf:"varint,19,opt,name=water_limit_per_day,json=waterLimitPerDay,proto3" json:"water_limit_per_day,omitempty"`                // 每日浇水限制次数
	FertilizerLimitPerDay int64  `protobuf:"varint,20,opt,name=fertilizer_limit_per_day,json=fertilizerLimitPerDay,proto3" json:"fertilizer_limit_per_day,omitempty"` // 每日作物施肥限制次数
	TotalRewardCoins      int64  `protobuf:"varint,21,opt,name=total_reward_coins,json=totalRewardCoins,proto3" json:"total_reward_coins,omitempty"`                  // 农场总收益金币
	// 土地信息
	LandDetail  []*UserLandDetail    `protobuf:"bytes,5,rep,name=land_detail,json=landDetail,proto3" json:"land_detail,omitempty"`     // 用户土地信息列表
	FortuneTree *UserFortuneTreeInfo `protobuf:"bytes,22,opt,name=fortune_tree,json=fortuneTree,proto3" json:"fortune_tree,omitempty"` // 用户的发财树信息
}

func (x *LookUserFarmsInfoMsgReply) Reset() {
	*x = LookUserFarmsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUserFarmsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUserFarmsInfoMsgReply) ProtoMessage() {}

func (x *LookUserFarmsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUserFarmsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*LookUserFarmsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{65}
}

func (x *LookUserFarmsInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetVipLevelVal() int64 {
	if x != nil {
		return x.VipLevelVal
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetVipLevelName() string {
	if x != nil {
		return x.VipLevelName
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetFarmName() string {
	if x != nil {
		return x.FarmName
	}
	return ""
}

func (x *LookUserFarmsInfoMsgReply) GetTotalLandCount() int64 {
	if x != nil {
		return x.TotalLandCount
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetWaterLimitPerDay() int64 {
	if x != nil {
		return x.WaterLimitPerDay
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetFertilizerLimitPerDay() int64 {
	if x != nil {
		return x.FertilizerLimitPerDay
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetTotalRewardCoins() int64 {
	if x != nil {
		return x.TotalRewardCoins
	}
	return 0
}

func (x *LookUserFarmsInfoMsgReply) GetLandDetail() []*UserLandDetail {
	if x != nil {
		return x.LandDetail
	}
	return nil
}

func (x *LookUserFarmsInfoMsgReply) GetFortuneTree() *UserFortuneTreeInfo {
	if x != nil {
		return x.FortuneTree
	}
	return nil
}

// *
// 购买商店商品信息
type UserPurchaseGoodsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id       int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	IsFree   BooleanStatus `protobuf:"varint,3,opt,name=is_free,json=isFree,proto3,enum=user.v1.BooleanStatus" json:"is_free,omitempty"`
	GoodsNum int64         `protobuf:"varint,4,opt,name=goods_num,json=goodsNum,proto3" json:"goods_num,omitempty"`
}

func (x *UserPurchaseGoodsMsgReq) Reset() {
	*x = UserPurchaseGoodsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPurchaseGoodsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPurchaseGoodsMsgReq) ProtoMessage() {}

func (x *UserPurchaseGoodsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPurchaseGoodsMsgReq.ProtoReflect.Descriptor instead.
func (*UserPurchaseGoodsMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{66}
}

func (x *UserPurchaseGoodsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReq) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *UserPurchaseGoodsMsgReq) GetGoodsNum() int64 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type UserPurchaseGoodsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserPurchaseGoodsMsgReply) Reset() {
	*x = UserPurchaseGoodsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPurchaseGoodsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPurchaseGoodsMsgReply) ProtoMessage() {}

func (x *UserPurchaseGoodsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPurchaseGoodsMsgReply.ProtoReflect.Descriptor instead.
func (*UserPurchaseGoodsMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{67}
}

func (x *UserPurchaseGoodsMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserPurchaseGoodsMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserFortuneTreeInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserFortuneTreeInfoMsgReq) Reset() {
	*x = UserFortuneTreeInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfoMsgReq) ProtoMessage() {}

func (x *UserFortuneTreeInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{68}
}

func (x *UserFortuneTreeInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserFortuneTreeInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 发财树唯一标识ID
	UserId             int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户ID，唯一约束保证每个用户只有一棵树
	VipLevelId         int64 `protobuf:"varint,3,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                         // VIP等级ID，影响金币产出和生产周期
	CycleStartTime     int64 `protobuf:"varint,4,opt,name=cycle_start_time,json=cycleStartTime,proto3" json:"cycle_start_time,omitempty"`             // 当前周期开始时间（时间戳，秒）
	IsReadyToHarvest   int32 `protobuf:"varint,5,opt,name=is_ready_to_harvest,json=isReadyToHarvest,proto3" json:"is_ready_to_harvest,omitempty"`     // 是否可以收获标志：1-不可收获，2-可收获
	LastHarvestTime    int64 `protobuf:"varint,6,opt,name=last_harvest_time,json=lastHarvestTime,proto3" json:"last_harvest_time,omitempty"`          // 上次收获时间（时间戳，秒）
	NextHarvestTime    int64 `protobuf:"varint,7,opt,name=next_harvest_time,json=nextHarvestTime,proto3" json:"next_harvest_time,omitempty"`          // 下次可收获时间（时间戳，秒）
	CycleHarvestedIcon int64 `protobuf:"varint,8,opt,name=cycle_harvested_icon,json=cycleHarvestedIcon,proto3" json:"cycle_harvested_icon,omitempty"` // 当前周期可收获的金币
	TotalHarvested     int64 `protobuf:"varint,9,opt,name=total_harvested,json=totalHarvested,proto3" json:"total_harvested,omitempty"`               // 历史总收获金币数量统计
	CreatedAt          int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 发财树创建时间（时间戳，秒）
	UpdatedAt          int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                             // 发财树信息最后更新时间（时间戳，秒）
}

func (x *UserFortuneTreeInfoMsgReply) Reset() {
	*x = UserFortuneTreeInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfoMsgReply) ProtoMessage() {}

func (x *UserFortuneTreeInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{69}
}

func (x *UserFortuneTreeInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCycleStartTime() int64 {
	if x != nil {
		return x.CycleStartTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetIsReadyToHarvest() int32 {
	if x != nil {
		return x.IsReadyToHarvest
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetLastHarvestTime() int64 {
	if x != nil {
		return x.LastHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetNextHarvestTime() int64 {
	if x != nil {
		return x.NextHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCycleHarvestedIcon() int64 {
	if x != nil {
		return x.CycleHarvestedIcon
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetTotalHarvested() int64 {
	if x != nil {
		return x.TotalHarvested
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserFortuneTreeInfoMsgReply) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// *
// 用户发财树详细信息
// 表示用户的发财树详细信息
type UserFortuneTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 发财树唯一标识ID
	UserId             int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户ID，唯一约束保证每个用户只有一棵树
	VipLevelId         int64 `protobuf:"varint,3,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id,omitempty"`                         // VIP等级ID，影响金币产出和生产周期
	CycleStartTime     int64 `protobuf:"varint,4,opt,name=cycle_start_time,json=cycleStartTime,proto3" json:"cycle_start_time,omitempty"`             // 当前周期开始时间（时间戳，秒）
	IsReadyToHarvest   int32 `protobuf:"varint,5,opt,name=is_ready_to_harvest,json=isReadyToHarvest,proto3" json:"is_ready_to_harvest,omitempty"`     // 是否可以收获标志：1-不可收获，2-可收获
	LastHarvestTime    int64 `protobuf:"varint,6,opt,name=last_harvest_time,json=lastHarvestTime,proto3" json:"last_harvest_time,omitempty"`          // 上次收获时间（时间戳，秒）
	NextHarvestTime    int64 `protobuf:"varint,7,opt,name=next_harvest_time,json=nextHarvestTime,proto3" json:"next_harvest_time,omitempty"`          // 下次可收获时间（时间戳，秒）
	CycleHarvestedIcon int64 `protobuf:"varint,8,opt,name=cycle_harvested_icon,json=cycleHarvestedIcon,proto3" json:"cycle_harvested_icon,omitempty"` // 当前周期可收获的金币
	TotalHarvested     int64 `protobuf:"varint,9,opt,name=total_harvested,json=totalHarvested,proto3" json:"total_harvested,omitempty"`               // 历史总收获金币数量统计
	CreatedAt          int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 发财树创建时间（时间戳，秒）
	UpdatedAt          int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                             // 发财树信息最后更新时间（时间戳，秒）
}

func (x *UserFortuneTreeInfo) Reset() {
	*x = UserFortuneTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFortuneTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFortuneTreeInfo) ProtoMessage() {}

func (x *UserFortuneTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFortuneTreeInfo.ProtoReflect.Descriptor instead.
func (*UserFortuneTreeInfo) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{70}
}

func (x *UserFortuneTreeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetVipLevelId() int64 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCycleStartTime() int64 {
	if x != nil {
		return x.CycleStartTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetIsReadyToHarvest() int32 {
	if x != nil {
		return x.IsReadyToHarvest
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetLastHarvestTime() int64 {
	if x != nil {
		return x.LastHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetNextHarvestTime() int64 {
	if x != nil {
		return x.NextHarvestTime
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCycleHarvestedIcon() int64 {
	if x != nil {
		return x.CycleHarvestedIcon
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetTotalHarvested() int64 {
	if x != nil {
		return x.TotalHarvested
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserFortuneTreeInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 校验二级密码请求
type VerifySecondaryPasswordMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`            // 用户输入的二级密码
}

func (x *VerifySecondaryPasswordMsgReq) Reset() {
	*x = VerifySecondaryPasswordMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySecondaryPasswordMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySecondaryPasswordMsgReq) ProtoMessage() {}

func (x *VerifySecondaryPasswordMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySecondaryPasswordMsgReq.ProtoReflect.Descriptor instead.
func (*VerifySecondaryPasswordMsgReq) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{71}
}

func (x *VerifySecondaryPasswordMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VerifySecondaryPasswordMsgReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 校验二级密码请求
type VerifySecondaryPasswordMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *VerifySecondaryPasswordMsgReply) Reset() {
	*x = VerifySecondaryPasswordMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySecondaryPasswordMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySecondaryPasswordMsgReply) ProtoMessage() {}

func (x *VerifySecondaryPasswordMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySecondaryPasswordMsgReply.ProtoReflect.Descriptor instead.
func (*VerifySecondaryPasswordMsgReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{72}
}

func (x *VerifySecondaryPasswordMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VerifySecondaryPasswordMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_user_v1_user_proto protoreflect.FileDescriptor

var file_user_v1_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x09, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x09, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xbd, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xce, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x42, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x11, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x67, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x22, 0x29, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a,
	0x15, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65,
	0x6c, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x68, 0x0a, 0x19, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x17, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x18, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xde,
	0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x1a,
	0x5e, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xae, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x7c, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c,
	0x0a, 0x16, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x57, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x03, 0x0a, 0x0e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x07, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73,
	0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x46, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a,
	0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x08, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x31, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x83, 0x05, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x77, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x77, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14,
	0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x68, 0x61,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xed, 0x01, 0x0a,
	0x1b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x22, 0x45, 0x0a, 0x1d,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xe9, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x22,
	0xad, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xbb, 0x08, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x33, 0x0a, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c,
	0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x21, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xd0, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x68,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x13, 0x68, 0x61, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x46, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xed, 0x03, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x6f, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x48, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x65, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x6f, 0x70,
	0x4e, 0x65, 0x65, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0xf9, 0x09, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x65, 0x6c,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73,
	0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x50, 0x65, 0x72, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x54, 0x6f, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x6f, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x54, 0x6f, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70, 0x4c, 0x61, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x64, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x67, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xec,
	0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xb2, 0x03,
	0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69,
	0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x77, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x22, 0xf4, 0x02, 0x0a, 0x0d, 0x4d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69,
	0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x17, 0x4c, 0x6f, 0x6f,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xec, 0x05, 0x0a, 0x19, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x41, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x34, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2,
	0x03, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x54, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a,
	0x5e, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x17, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x55, 0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x65, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x56, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x57, 0x54,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x55, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x06, 0x2a, 0x6b, 0x0a, 0x11, 0x46, 0x61, 0x72, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x4e,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x54, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x44, 0x54, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0d, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x59, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x32, 0xc2, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x77, 0x64, 0x12,
	0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xe0, 0x05, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x11, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x6c, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xb1, 0x0b,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73,
	0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x4f,
	0x70, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x72,
	0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_v1_user_proto_rawDescOnce sync.Once
	file_user_v1_user_proto_rawDescData = file_user_v1_user_proto_rawDesc
)

func file_user_v1_user_proto_rawDescGZIP() []byte {
	file_user_v1_user_proto_rawDescOnce.Do(func() {
		file_user_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_v1_user_proto_rawDescData)
	})
	return file_user_v1_user_proto_rawDescData
}

var file_user_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_user_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_user_v1_user_proto_goTypes = []interface{}{
	(LandStatus)(0),                         // 0: user.v1.LandStatus
	(HarvestStatus)(0),                      // 1: user.v1.HarvestStatus
	(GrowthStatus)(0),                       // 2: user.v1.GrowthStatus
	(FarmOperationType)(0),                  // 3: user.v1.FarmOperationType
	(WalletType)(0),                         // 4: user.v1.WalletType
	(WalletUsageType)(0),                    // 5: user.v1.WalletUsageType
	(BooleanStatus)(0),                      // 6: user.v1.BooleanStatus
	(ProductType)(0),                        // 7: user.v1.ProductType
	(*UserReq)(nil),                         // 8: user.v1.UserReq
	(*UserReply)(nil),                       // 9: user.v1.UserReply
	(*MsgData)(nil),                         // 10: user.v1.MsgData
	(*RequestClientInfo)(nil),               // 11: user.v1.RequestClientInfo
	(*UserRegisterReq)(nil),                 // 12: user.v1.UserRegisterReq
	(*UserSignInReq)(nil),                   // 13: user.v1.UserSignInReq
	(*UserLoginResp)(nil),                   // 14: user.v1.UserLoginResp
	(*ForgotPasswordReq)(nil),               // 15: user.v1.ForgotPasswordReq
	(*VerifyAccountReq)(nil),                // 16: user.v1.VerifyAccountReq
	(*UserSignOutReq)(nil),                  // 17: user.v1.UserSignOutReq
	(*PlantStatusRequest)(nil),              // 18: user.v1.PlantStatusRequest
	(*PlantStatusResponse)(nil),             // 19: user.v1.PlantStatusResponse
	(*TimeReductionRequest)(nil),            // 20: user.v1.TimeReductionRequest
	(*TimeReductionResponse)(nil),           // 21: user.v1.TimeReductionResponse
	(*StageTimelinesRequest)(nil),           // 22: user.v1.StageTimelinesRequest
	(*StageTime)(nil),                       // 23: user.v1.StageTime
	(*StageTimelinesResponse)(nil),          // 24: user.v1.StageTimelinesResponse
	(*AdjustHarvestTimeRequest)(nil),        // 25: user.v1.AdjustHarvestTimeRequest
	(*AdjustHarvestTimeResponse)(nil),       // 26: user.v1.AdjustHarvestTimeResponse
	(*MaintenanceNeedsRequest)(nil),         // 27: user.v1.MaintenanceNeedsRequest
	(*MaintenanceNeedsResponse)(nil),        // 28: user.v1.MaintenanceNeedsResponse
	(*CheckCropsNeedsRequest)(nil),          // 29: user.v1.CheckCropsNeedsRequest
	(*CheckCropsNeedsResponse)(nil),         // 30: user.v1.CheckCropsNeedsResponse
	(*MaintenanceNeeds)(nil),                // 31: user.v1.MaintenanceNeeds
	(*GrowthProgressRequest)(nil),           // 32: user.v1.GrowthProgressRequest
	(*GrowthProgressResponse)(nil),          // 33: user.v1.GrowthProgressResponse
	(*PlantStateRequest)(nil),               // 34: user.v1.PlantStateRequest
	(*PlantStateResponse)(nil),              // 35: user.v1.PlantStateResponse
	(*PlantStateInfo)(nil),                  // 36: user.v1.PlantStateInfo
	(*PlantInfo)(nil),                       // 37: user.v1.PlantInfo
	(*GetOnlineUserListReq)(nil),            // 38: user.v1.GetOnlineUserListReq
	(*GetOnlineUserListReply)(nil),          // 39: user.v1.GetOnlineUserListReply
	(*UserIdReq)(nil),                       // 40: user.v1.UserIdReq
	(*UserAuthenticationReq)(nil),           // 41: user.v1.UserAuthenticationReq
	(*UserAuthenticationReply)(nil),         // 42: user.v1.UserAuthenticationReply
	(*MsgReq)(nil),                          // 43: user.v1.MsgReq
	(*MsgReply)(nil),                        // 44: user.v1.MsgReply
	(*UserAuthInfoMsgReq)(nil),              // 45: user.v1.UserAuthInfoMsgReq
	(*UserAuthInfoMsgReply)(nil),            // 46: user.v1.UserAuthInfoMsgReply
	(*UserPersonalInfoMsgReq)(nil),          // 47: user.v1.UserPersonalInfoMsgReq
	(*UserPersonalInfoMsgReply)(nil),        // 48: user.v1.UserPersonalInfoMsgReply
	(*UserEditPersonalInfoMsgReq)(nil),      // 49: user.v1.UserEditPersonalInfoMsgReq
	(*UserEditPersonalInfoMsgReply)(nil),    // 50: user.v1.UserEditPersonalInfoMsgReply
	(*UserEditSensitiveInfoMsgReq)(nil),     // 51: user.v1.UserEditSensitiveInfoMsgReq
	(*UserEditSensitiveInfoMsgReply)(nil),   // 52: user.v1.UserEditSensitiveInfoMsgReply
	(*UserWallet)(nil),                      // 53: user.v1.UserWallet
	(*UserBalance)(nil),                     // 54: user.v1.UserBalance
	(*UserStorageInfoMsgReq)(nil),           // 55: user.v1.UserStorageInfoMsgReq
	(*UserStorageInfoMsgReply)(nil),         // 56: user.v1.UserStorageInfoMsgReply
	(*UserStorageDetail)(nil),               // 57: user.v1.UserStorageDetail
	(*UserFarmInfoMsgReq)(nil),              // 58: user.v1.UserFarmInfoMsgReq
	(*UserFarmInfoMsgReply)(nil),            // 59: user.v1.UserFarmInfoMsgReply
	(*UserLandInfoMsgReq)(nil),              // 60: user.v1.UserLandInfoMsgReq
	(*UserLandInfoMsgReply)(nil),            // 61: user.v1.UserLandInfoMsgReply
	(*UserLandDetail)(nil),                  // 62: user.v1.UserLandDetail
	(*UserPlantingDetail)(nil),              // 63: user.v1.UserPlantingDetail
	(*UserFarmOpsMsgReq)(nil),               // 64: user.v1.UserFarmOpsMsgReq
	(*UserFarmOpsMsgReply)(nil),             // 65: user.v1.UserFarmOpsMsgReply
	(*AllUserRankingInfoMsgReq)(nil),        // 66: user.v1.AllUserRankingInfoMsgReq
	(*AllUserRankingInfoMsgReply)(nil),      // 67: user.v1.AllUserRankingInfoMsgReply
	(*UserFriendRankingInfoMsgReq)(nil),     // 68: user.v1.UserFriendRankingInfoMsgReq
	(*UserFriendRankingInfoMsgReply)(nil),   // 69: user.v1.UserFriendRankingInfoMsgReply
	(*FriendRankingInfo)(nil),               // 70: user.v1.FriendRankingInfo
	(*MyRankingInfo)(nil),                   // 71: user.v1.MyRankingInfo
	(*LookUserFarmsInfoMsgReq)(nil),         // 72: user.v1.LookUserFarmsInfoMsgReq
	(*LookUserFarmsInfoMsgReply)(nil),       // 73: user.v1.LookUserFarmsInfoMsgReply
	(*UserPurchaseGoodsMsgReq)(nil),         // 74: user.v1.UserPurchaseGoodsMsgReq
	(*UserPurchaseGoodsMsgReply)(nil),       // 75: user.v1.UserPurchaseGoodsMsgReply
	(*UserFortuneTreeInfoMsgReq)(nil),       // 76: user.v1.UserFortuneTreeInfoMsgReq
	(*UserFortuneTreeInfoMsgReply)(nil),     // 77: user.v1.UserFortuneTreeInfoMsgReply
	(*UserFortuneTreeInfo)(nil),             // 78: user.v1.UserFortuneTreeInfo
	(*VerifySecondaryPasswordMsgReq)(nil),   // 79: user.v1.VerifySecondaryPasswordMsgReq
	(*VerifySecondaryPasswordMsgReply)(nil), // 80: user.v1.VerifySecondaryPasswordMsgReply
	nil,                                     // 81: user.v1.CheckCropsNeedsResponse.MaintenanceNeedsEntry
	nil,                                     // 82: user.v1.PlantStateResponse.PlantStatesEntry
}
var file_user_v1_user_proto_depIdxs = []int32{
	37, // 0: user.v1.TimeReductionRequest.plant_info:type_name -> user.v1.PlantInfo
	37, // 1: user.v1.StageTimelinesRequest.plant_info:type_name -> user.v1.PlantInfo
	23, // 2: user.v1.StageTimelinesResponse.stage_times:type_name -> user.v1.StageTime
	37, // 3: user.v1.AdjustHarvestTimeRequest.plant_info:type_name -> user.v1.PlantInfo
	31, // 4: user.v1.MaintenanceNeedsResponse.maintenance_needs:type_name -> user.v1.MaintenanceNeeds
	81, // 5: user.v1.CheckCropsNeedsResponse.maintenance_needs:type_name -> user.v1.CheckCropsNeedsResponse.MaintenanceNeedsEntry
	82, // 6: user.v1.PlantStateResponse.plant_states:type_name -> user.v1.PlantStateResponse.PlantStatesEntry
	63, // 7: user.v1.PlantStateInfo.plant_info:type_name -> user.v1.UserPlantingDetail
	53, // 8: user.v1.UserPersonalInfoMsgReply.wallets:type_name -> user.v1.UserWallet
	54, // 9: user.v1.UserPersonalInfoMsgReply.balances:type_name -> user.v1.UserBalance
	6,  // 10: user.v1.UserEditPersonalInfoMsgReq.has_completed_tutorial:type_name -> user.v1.BooleanStatus
	6,  // 11: user.v1.UserEditPersonalInfoMsgReq.has_received_free_gift:type_name -> user.v1.BooleanStatus
	5,  // 12: user.v1.UserWallet.usage_type:type_name -> user.v1.WalletUsageType
	6,  // 13: user.v1.UserWallet.is_default_deposit:type_name -> user.v1.BooleanStatus
	6,  // 14: user.v1.UserWallet.is_default_withdrawal:type_name -> user.v1.BooleanStatus
	4,  // 15: user.v1.UserBalance.wallet_type:type_name -> user.v1.WalletType
	7,  // 16: user.v1.UserStorageInfoMsgReq.product_type:type_name -> user.v1.ProductType
	57, // 17: user.v1.UserStorageInfoMsgReply.rows:type_name -> user.v1.UserStorageDetail
	7,  // 18: user.v1.UserStorageDetail.product_type:type_name -> user.v1.ProductType
	6,  // 19: user.v1.UserFarmInfoMsgReply.has_received_free_gift:type_name -> user.v1.BooleanStatus
	6,  // 20: user.v1.UserFarmInfoMsgReply.has_completed_tutorial:type_name -> user.v1.BooleanStatus
	62, // 21: user.v1.UserLandInfoMsgReply.rows:type_name -> user.v1.UserLandDetail
	0,  // 22: user.v1.UserLandDetail.status:type_name -> user.v1.LandStatus
	63, // 23: user.v1.UserLandDetail.planted_plant:type_name -> user.v1.UserPlantingDetail
	1,  // 24: user.v1.UserPlantingDetail.is_harvested:type_name -> user.v1.HarvestStatus
	2,  // 25: user.v1.UserPlantingDetail.status:type_name -> user.v1.GrowthStatus
	3,  // 26: user.v1.UserFarmOpsMsgReq.operate_type:type_name -> user.v1.FarmOperationType
	70, // 27: user.v1.AllUserRankingInfoMsgReply.rows:type_name -> user.v1.FriendRankingInfo
	71, // 28: user.v1.AllUserRankingInfoMsgReply.my_ranking:type_name -> user.v1.MyRankingInfo
	70, // 29: user.v1.UserFriendRankingInfoMsgReply.rows:type_name -> user.v1.FriendRankingInfo
	71, // 30: user.v1.UserFriendRankingInfoMsgReply.my_ranking:type_name -> user.v1.MyRankingInfo
	62, // 31: user.v1.LookUserFarmsInfoMsgReply.land_detail:type_name -> user.v1.UserLandDetail
	78, // 32: user.v1.LookUserFarmsInfoMsgReply.fortune_tree:type_name -> user.v1.UserFortuneTreeInfo
	6,  // 33: user.v1.UserPurchaseGoodsMsgReq.is_free:type_name -> user.v1.BooleanStatus
	31, // 34: user.v1.CheckCropsNeedsResponse.MaintenanceNeedsEntry.value:type_name -> user.v1.MaintenanceNeeds
	36, // 35: user.v1.PlantStateResponse.PlantStatesEntry.value:type_name -> user.v1.PlantStateInfo
	12, // 36: user.v1.UserAuthService.Register:input_type -> user.v1.UserRegisterReq
	13, // 37: user.v1.UserAuthService.Login:input_type -> user.v1.UserSignInReq
	15, // 38: user.v1.UserAuthService.ForgotPwd:input_type -> user.v1.ForgotPasswordReq
	16, // 39: user.v1.UserAuthService.VerifyAccount:input_type -> user.v1.VerifyAccountReq
	17, // 40: user.v1.UserAuthService.LoginOut:input_type -> user.v1.UserSignOutReq
	18, // 41: user.v1.UserPlantGrowthService.CalculatePlantStatus:input_type -> user.v1.PlantStatusRequest
	20, // 42: user.v1.UserPlantGrowthService.CalculateTimeReduction:input_type -> user.v1.TimeReductionRequest
	22, // 43: user.v1.UserPlantGrowthService.CalculateStageTimelines:input_type -> user.v1.StageTimelinesRequest
	25, // 44: user.v1.UserPlantGrowthService.AdjustHarvestTime:input_type -> user.v1.AdjustHarvestTimeRequest
	27, // 45: user.v1.UserPlantGrowthService.CheckMaintenanceNeeds:input_type -> user.v1.MaintenanceNeedsRequest
	29, // 46: user.v1.UserPlantGrowthService.CheckMaintenanceNeedsMap:input_type -> user.v1.CheckCropsNeedsRequest
	32, // 47: user.v1.UserPlantGrowthService.GetGrowthProgress:input_type -> user.v1.GrowthProgressRequest
	34, // 48: user.v1.UserPlantGrowthService.GetPlantCurrentState:input_type -> user.v1.PlantStateRequest
	38, // 49: user.v1.UserRpcInnerService.GetOnlineUserList:input_type -> user.v1.GetOnlineUserListReq
	47, // 50: user.v1.UserInnerService.UserConnected:input_type -> user.v1.UserPersonalInfoMsgReq
	47, // 51: user.v1.UserInnerService.UserDisconnected:input_type -> user.v1.UserPersonalInfoMsgReq
	45, // 52: user.v1.UserInnerService.UserAuthentication:input_type -> user.v1.UserAuthInfoMsgReq
	47, // 53: user.v1.UserInnerService.UserPersonalInfo:input_type -> user.v1.UserPersonalInfoMsgReq
	49, // 54: user.v1.UserInnerService.UserEditPersonalInfo:input_type -> user.v1.UserEditPersonalInfoMsgReq
	51, // 55: user.v1.UserInnerService.UserEditSensitiveInfo:input_type -> user.v1.UserEditSensitiveInfoMsgReq
	55, // 56: user.v1.UserInnerService.UserStorageInfo:input_type -> user.v1.UserStorageInfoMsgReq
	58, // 57: user.v1.UserInnerService.UserFarmInfo:input_type -> user.v1.UserFarmInfoMsgReq
	60, // 58: user.v1.UserInnerService.UserLandInfo:input_type -> user.v1.UserLandInfoMsgReq
	64, // 59: user.v1.UserInnerService.UserFarmOps:input_type -> user.v1.UserFarmOpsMsgReq
	68, // 60: user.v1.UserInnerService.UserFriendRankingInfo:input_type -> user.v1.UserFriendRankingInfoMsgReq
	66, // 61: user.v1.UserInnerService.AllUserRankingInfo:input_type -> user.v1.AllUserRankingInfoMsgReq
	72, // 62: user.v1.UserInnerService.LookUserFarmsInfo:input_type -> user.v1.LookUserFarmsInfoMsgReq
	74, // 63: user.v1.UserInnerService.UserPurchaseGoods:input_type -> user.v1.UserPurchaseGoodsMsgReq
	76, // 64: user.v1.UserInnerService.UserFortuneTreeInfo:input_type -> user.v1.UserFortuneTreeInfoMsgReq
	79, // 65: user.v1.UserInnerService.VerifySecondaryPassword:input_type -> user.v1.VerifySecondaryPasswordMsgReq
	9,  // 66: user.v1.UserAuthService.Register:output_type -> user.v1.UserReply
	14, // 67: user.v1.UserAuthService.Login:output_type -> user.v1.UserLoginResp
	9,  // 68: user.v1.UserAuthService.ForgotPwd:output_type -> user.v1.UserReply
	9,  // 69: user.v1.UserAuthService.VerifyAccount:output_type -> user.v1.UserReply
	9,  // 70: user.v1.UserAuthService.LoginOut:output_type -> user.v1.UserReply
	19, // 71: user.v1.UserPlantGrowthService.CalculatePlantStatus:output_type -> user.v1.PlantStatusResponse
	21, // 72: user.v1.UserPlantGrowthService.CalculateTimeReduction:output_type -> user.v1.TimeReductionResponse
	24, // 73: user.v1.UserPlantGrowthService.CalculateStageTimelines:output_type -> user.v1.StageTimelinesResponse
	26, // 74: user.v1.UserPlantGrowthService.AdjustHarvestTime:output_type -> user.v1.AdjustHarvestTimeResponse
	28, // 75: user.v1.UserPlantGrowthService.CheckMaintenanceNeeds:output_type -> user.v1.MaintenanceNeedsResponse
	30, // 76: user.v1.UserPlantGrowthService.CheckMaintenanceNeedsMap:output_type -> user.v1.CheckCropsNeedsResponse
	33, // 77: user.v1.UserPlantGrowthService.GetGrowthProgress:output_type -> user.v1.GrowthProgressResponse
	35, // 78: user.v1.UserPlantGrowthService.GetPlantCurrentState:output_type -> user.v1.PlantStateResponse
	39, // 79: user.v1.UserRpcInnerService.GetOnlineUserList:output_type -> user.v1.GetOnlineUserListReply
	44, // 80: user.v1.UserInnerService.UserConnected:output_type -> user.v1.MsgReply
	44, // 81: user.v1.UserInnerService.UserDisconnected:output_type -> user.v1.MsgReply
	46, // 82: user.v1.UserInnerService.UserAuthentication:output_type -> user.v1.UserAuthInfoMsgReply
	48, // 83: user.v1.UserInnerService.UserPersonalInfo:output_type -> user.v1.UserPersonalInfoMsgReply
	50, // 84: user.v1.UserInnerService.UserEditPersonalInfo:output_type -> user.v1.UserEditPersonalInfoMsgReply
	52, // 85: user.v1.UserInnerService.UserEditSensitiveInfo:output_type -> user.v1.UserEditSensitiveInfoMsgReply
	56, // 86: user.v1.UserInnerService.UserStorageInfo:output_type -> user.v1.UserStorageInfoMsgReply
	59, // 87: user.v1.UserInnerService.UserFarmInfo:output_type -> user.v1.UserFarmInfoMsgReply
	61, // 88: user.v1.UserInnerService.UserLandInfo:output_type -> user.v1.UserLandInfoMsgReply
	65, // 89: user.v1.UserInnerService.UserFarmOps:output_type -> user.v1.UserFarmOpsMsgReply
	69, // 90: user.v1.UserInnerService.UserFriendRankingInfo:output_type -> user.v1.UserFriendRankingInfoMsgReply
	67, // 91: user.v1.UserInnerService.AllUserRankingInfo:output_type -> user.v1.AllUserRankingInfoMsgReply
	73, // 92: user.v1.UserInnerService.LookUserFarmsInfo:output_type -> user.v1.LookUserFarmsInfoMsgReply
	75, // 93: user.v1.UserInnerService.UserPurchaseGoods:output_type -> user.v1.UserPurchaseGoodsMsgReply
	77, // 94: user.v1.UserInnerService.UserFortuneTreeInfo:output_type -> user.v1.UserFortuneTreeInfoMsgReply
	80, // 95: user.v1.UserInnerService.VerifySecondaryPassword:output_type -> user.v1.VerifySecondaryPasswordMsgReply
	66, // [66:96] is the sub-list for method output_type
	36, // [36:66] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_user_v1_user_proto_init() }
func file_user_v1_user_proto_init() {
	if File_user_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignOutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeReductionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeReductionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageTimelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageTimelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustHarvestTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustHarvestTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceNeedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceNeedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCropsNeedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCropsNeedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceNeeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnlineUserListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnlineUserListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditPersonalInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditPersonalInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditSensitiveInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditSensitiveInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStorageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLandDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPlantingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmOpsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFarmOpsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserRankingInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserRankingInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriendRankingInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriendRankingInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUserFarmsInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUserFarmsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPurchaseGoodsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPurchaseGoodsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFortuneTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySecondaryPasswordMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySecondaryPasswordMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_v1_user_proto_msgTypes[54].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_v1_user_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_user_v1_user_proto_goTypes,
		DependencyIndexes: file_user_v1_user_proto_depIdxs,
		EnumInfos:         file_user_v1_user_proto_enumTypes,
		MessageInfos:      file_user_v1_user_proto_msgTypes,
	}.Build()
	File_user_v1_user_proto = out.File
	file_user_v1_user_proto_rawDesc = nil
	file_user_v1_user_proto_goTypes = nil
	file_user_v1_user_proto_depIdxs = nil
}
