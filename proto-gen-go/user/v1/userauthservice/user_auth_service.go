// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: user.proto

package userauthservice

import (
	"context"

	"github.com/QuantumShiftX/farms-proto/proto-gen-go/user/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ForgotPasswordReq = v1.ForgotPasswordReq
	UserAuthReq       = v1.UserAuthReq
	UserAuthResp      = v1.UserAuthResp
	UserReply         = v1.UserReply
	UserReq           = v1.UserReq

	UserAuthService interface {
		Register(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserReply, error)
		Login(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserAuthResp, error)
		ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error)
		LoginOut(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error)
	}

	defaultUserAuthService struct {
		cli zrpc.Client
	}
)

func NewUserAuthService(cli zrpc.Client) UserAuthService {
	return &defaultUserAuthService{
		cli: cli,
	}
}

func (m *defaultUserAuthService) Register(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserReply, error) {
	client := v1.NewUserAuthServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserAuthService) Login(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserAuthResp, error) {
	client := v1.NewUserAuthServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserAuthService) ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error) {
	client := v1.NewUserAuthServiceClient(m.cli.Conn())
	return client.ForgotPwd(ctx, in, opts...)
}

func (m *defaultUserAuthService) LoginOut(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error) {
	client := v1.NewUserAuthServiceClient(m.cli.Conn())
	return client.LoginOut(ctx, in, opts...)
}
