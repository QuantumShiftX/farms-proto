// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAuthService_Register_FullMethodName      = "/user.v1.UserAuthService/Register"
	UserAuthService_Login_FullMethodName         = "/user.v1.UserAuthService/Login"
	UserAuthService_ForgotPwd_FullMethodName     = "/user.v1.UserAuthService/ForgotPwd"
	UserAuthService_VerifyAccount_FullMethodName = "/user.v1.UserAuthService/VerifyAccount"
	UserAuthService_LoginOut_FullMethodName      = "/user.v1.UserAuthService/LoginOut"
)

// UserAuthServiceClient is the client API for UserAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthServiceClient interface {
	Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserReply, error)
	Login(ctx context.Context, in *UserSignInReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error)
	VerifyAccount(ctx context.Context, in *VerifyAccountReq, opts ...grpc.CallOption) (*UserReply, error)
	LoginOut(ctx context.Context, in *UserSignOutReq, opts ...grpc.CallOption) (*UserReply, error)
}

type userAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthServiceClient(cc grpc.ClientConnInterface) UserAuthServiceClient {
	return &userAuthServiceClient{cc}
}

func (c *userAuthServiceClient) Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) Login(ctx context.Context, in *UserSignInReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserAuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_ForgotPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) VerifyAccount(ctx context.Context, in *VerifyAccountReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_VerifyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) LoginOut(ctx context.Context, in *UserSignOutReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_LoginOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServiceServer is the server API for UserAuthService service.
// All implementations must embed UnimplementedUserAuthServiceServer
// for forward compatibility
type UserAuthServiceServer interface {
	Register(context.Context, *UserRegisterReq) (*UserReply, error)
	Login(context.Context, *UserSignInReq) (*UserLoginResp, error)
	ForgotPwd(context.Context, *ForgotPasswordReq) (*UserReply, error)
	VerifyAccount(context.Context, *VerifyAccountReq) (*UserReply, error)
	LoginOut(context.Context, *UserSignOutReq) (*UserReply, error)
	mustEmbedUnimplementedUserAuthServiceServer()
}

// UnimplementedUserAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthServiceServer struct {
}

func (UnimplementedUserAuthServiceServer) Register(context.Context, *UserRegisterReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserAuthServiceServer) Login(context.Context, *UserSignInReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserAuthServiceServer) ForgotPwd(context.Context, *ForgotPasswordReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPwd not implemented")
}
func (UnimplementedUserAuthServiceServer) VerifyAccount(context.Context, *VerifyAccountReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedUserAuthServiceServer) LoginOut(context.Context, *UserSignOutReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (UnimplementedUserAuthServiceServer) mustEmbedUnimplementedUserAuthServiceServer() {}

// UnsafeUserAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServiceServer will
// result in compilation errors.
type UnsafeUserAuthServiceServer interface {
	mustEmbedUnimplementedUserAuthServiceServer()
}

func RegisterUserAuthServiceServer(s grpc.ServiceRegistrar, srv UserAuthServiceServer) {
	s.RegisterService(&UserAuthService_ServiceDesc, srv)
}

func _UserAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Register(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Login(ctx, req.(*UserSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_ForgotPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).ForgotPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_ForgotPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).ForgotPwd(ctx, req.(*ForgotPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_VerifyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).VerifyAccount(ctx, req.(*VerifyAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_LoginOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).LoginOut(ctx, req.(*UserSignOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthService_ServiceDesc is the grpc.ServiceDesc for UserAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserAuthService",
	HandlerType: (*UserAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserAuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserAuthService_Login_Handler,
		},
		{
			MethodName: "ForgotPwd",
			Handler:    _UserAuthService_ForgotPwd_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _UserAuthService_VerifyAccount_Handler,
		},
		{
			MethodName: "LoginOut",
			Handler:    _UserAuthService_LoginOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}

const (
	UserService_Test_FullMethodName = "/user.v1.UserService/Test"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Test(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Test(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserService_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Test(context.Context, *UserReq) (*UserReply, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Test(context.Context, *UserReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Test(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _UserService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}

const (
	UserInnerService_UserConnected_FullMethodName         = "/user.v1.UserInnerService/UserConnected"
	UserInnerService_UserDisconnected_FullMethodName      = "/user.v1.UserInnerService/UserDisconnected"
	UserInnerService_UserAuthentication_FullMethodName    = "/user.v1.UserInnerService/UserAuthentication"
	UserInnerService_UserPersonalInfo_FullMethodName      = "/user.v1.UserInnerService/UserPersonalInfo"
	UserInnerService_UserEditPersonalInfo_FullMethodName  = "/user.v1.UserInnerService/UserEditPersonalInfo"
	UserInnerService_UserStorageInfo_FullMethodName       = "/user.v1.UserInnerService/UserStorageInfo"
	UserInnerService_UserFarmInfo_FullMethodName          = "/user.v1.UserInnerService/UserFarmInfo"
	UserInnerService_UserLandInfo_FullMethodName          = "/user.v1.UserInnerService/UserLandInfo"
	UserInnerService_UserFarmOps_FullMethodName           = "/user.v1.UserInnerService/UserFarmOps"
	UserInnerService_UserFriendRankingInfo_FullMethodName = "/user.v1.UserInnerService/UserFriendRankingInfo"
	UserInnerService_AllUserRankingInfo_FullMethodName    = "/user.v1.UserInnerService/AllUserRankingInfo"
	UserInnerService_LookUserFarmsInfo_FullMethodName     = "/user.v1.UserInnerService/LookUserFarmsInfo"
	UserInnerService_UserPurchaseGoods_FullMethodName     = "/user.v1.UserInnerService/UserPurchaseGoods"
)

// UserInnerServiceClient is the client API for UserInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInnerServiceClient interface {
	// 用户连接
	UserConnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 用户断开连接
	UserDisconnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 用户认证
	UserAuthentication(ctx context.Context, in *UserAuthInfoMsgReq, opts ...grpc.CallOption) (*UserAuthInfoMsgReply, error)
	// 用户个人信息
	UserPersonalInfo(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserPersonalInfoMsgReply, error)
	// 修改个人信息
	UserEditPersonalInfo(ctx context.Context, in *UserEditPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 用户仓库信息
	UserStorageInfo(ctx context.Context, in *UserStorageInfoMsgReq, opts ...grpc.CallOption) (*UserStorageInfoMsgReply, error)
	// 用户农场信息
	UserFarmInfo(ctx context.Context, in *UserFarmInfoMsgReq, opts ...grpc.CallOption) (*UserFarmInfoMsgReply, error)
	// 用户土地信息
	UserLandInfo(ctx context.Context, in *UserLandInfoMsgReq, opts ...grpc.CallOption) (*UserLandInfoMsgReply, error)
	// 用户操作农场
	UserFarmOps(ctx context.Context, in *UserFarmOpsMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 获取好友列表及排名
	UserFriendRankingInfo(ctx context.Context, in *UserFriendRankingInfoMsgReq, opts ...grpc.CallOption) (*UserFriendRankingInfoMsgReply, error)
	// 获取全局用户列表和排名
	AllUserRankingInfo(ctx context.Context, in *AllUserRankingInfoMsgReq, opts ...grpc.CallOption) (*AllUserRankingInfoMsgReply, error)
	// 查看用户农场信息
	LookUserFarmsInfo(ctx context.Context, in *LookUserFarmsInfoMsgReq, opts ...grpc.CallOption) (*LookUserFarmsInfoMsgReply, error)
	// 用户购买商品
	UserPurchaseGoods(ctx context.Context, in *UserPurchaseGoodsMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
}

type userInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInnerServiceClient(cc grpc.ClientConnInterface) UserInnerServiceClient {
	return &userInnerServiceClient{cc}
}

func (c *userInnerServiceClient) UserConnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserConnected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserDisconnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserDisconnected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserAuthentication(ctx context.Context, in *UserAuthInfoMsgReq, opts ...grpc.CallOption) (*UserAuthInfoMsgReply, error) {
	out := new(UserAuthInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserAuthentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserPersonalInfo(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserPersonalInfoMsgReply, error) {
	out := new(UserPersonalInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserPersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserEditPersonalInfo(ctx context.Context, in *UserEditPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserEditPersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserStorageInfo(ctx context.Context, in *UserStorageInfoMsgReq, opts ...grpc.CallOption) (*UserStorageInfoMsgReply, error) {
	out := new(UserStorageInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserStorageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFarmInfo(ctx context.Context, in *UserFarmInfoMsgReq, opts ...grpc.CallOption) (*UserFarmInfoMsgReply, error) {
	out := new(UserFarmInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFarmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserLandInfo(ctx context.Context, in *UserLandInfoMsgReq, opts ...grpc.CallOption) (*UserLandInfoMsgReply, error) {
	out := new(UserLandInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserLandInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFarmOps(ctx context.Context, in *UserFarmOpsMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFarmOps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFriendRankingInfo(ctx context.Context, in *UserFriendRankingInfoMsgReq, opts ...grpc.CallOption) (*UserFriendRankingInfoMsgReply, error) {
	out := new(UserFriendRankingInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFriendRankingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) AllUserRankingInfo(ctx context.Context, in *AllUserRankingInfoMsgReq, opts ...grpc.CallOption) (*AllUserRankingInfoMsgReply, error) {
	out := new(AllUserRankingInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_AllUserRankingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) LookUserFarmsInfo(ctx context.Context, in *LookUserFarmsInfoMsgReq, opts ...grpc.CallOption) (*LookUserFarmsInfoMsgReply, error) {
	out := new(LookUserFarmsInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_LookUserFarmsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserPurchaseGoods(ctx context.Context, in *UserPurchaseGoodsMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserPurchaseGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInnerServiceServer is the server API for UserInnerService service.
// All implementations must embed UnimplementedUserInnerServiceServer
// for forward compatibility
type UserInnerServiceServer interface {
	// 用户连接
	UserConnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error)
	// 用户断开连接
	UserDisconnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error)
	// 用户认证
	UserAuthentication(context.Context, *UserAuthInfoMsgReq) (*UserAuthInfoMsgReply, error)
	// 用户个人信息
	UserPersonalInfo(context.Context, *UserPersonalInfoMsgReq) (*UserPersonalInfoMsgReply, error)
	// 修改个人信息
	UserEditPersonalInfo(context.Context, *UserEditPersonalInfoMsgReq) (*MsgReply, error)
	// 用户仓库信息
	UserStorageInfo(context.Context, *UserStorageInfoMsgReq) (*UserStorageInfoMsgReply, error)
	// 用户农场信息
	UserFarmInfo(context.Context, *UserFarmInfoMsgReq) (*UserFarmInfoMsgReply, error)
	// 用户土地信息
	UserLandInfo(context.Context, *UserLandInfoMsgReq) (*UserLandInfoMsgReply, error)
	// 用户操作农场
	UserFarmOps(context.Context, *UserFarmOpsMsgReq) (*MsgReply, error)
	// 获取好友列表及排名
	UserFriendRankingInfo(context.Context, *UserFriendRankingInfoMsgReq) (*UserFriendRankingInfoMsgReply, error)
	// 获取全局用户列表和排名
	AllUserRankingInfo(context.Context, *AllUserRankingInfoMsgReq) (*AllUserRankingInfoMsgReply, error)
	// 查看用户农场信息
	LookUserFarmsInfo(context.Context, *LookUserFarmsInfoMsgReq) (*LookUserFarmsInfoMsgReply, error)
	// 用户购买商品
	UserPurchaseGoods(context.Context, *UserPurchaseGoodsMsgReq) (*MsgReply, error)
	mustEmbedUnimplementedUserInnerServiceServer()
}

// UnimplementedUserInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInnerServiceServer struct {
}

func (UnimplementedUserInnerServiceServer) UserConnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConnected not implemented")
}
func (UnimplementedUserInnerServiceServer) UserDisconnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisconnected not implemented")
}
func (UnimplementedUserInnerServiceServer) UserAuthentication(context.Context, *UserAuthInfoMsgReq) (*UserAuthInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthentication not implemented")
}
func (UnimplementedUserInnerServiceServer) UserPersonalInfo(context.Context, *UserPersonalInfoMsgReq) (*UserPersonalInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPersonalInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserEditPersonalInfo(context.Context, *UserEditPersonalInfoMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditPersonalInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserStorageInfo(context.Context, *UserStorageInfoMsgReq) (*UserStorageInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStorageInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFarmInfo(context.Context, *UserFarmInfoMsgReq) (*UserFarmInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFarmInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserLandInfo(context.Context, *UserLandInfoMsgReq) (*UserLandInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLandInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFarmOps(context.Context, *UserFarmOpsMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFarmOps not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFriendRankingInfo(context.Context, *UserFriendRankingInfoMsgReq) (*UserFriendRankingInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFriendRankingInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) AllUserRankingInfo(context.Context, *AllUserRankingInfoMsgReq) (*AllUserRankingInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUserRankingInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) LookUserFarmsInfo(context.Context, *LookUserFarmsInfoMsgReq) (*LookUserFarmsInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUserFarmsInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserPurchaseGoods(context.Context, *UserPurchaseGoodsMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPurchaseGoods not implemented")
}
func (UnimplementedUserInnerServiceServer) mustEmbedUnimplementedUserInnerServiceServer() {}

// UnsafeUserInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInnerServiceServer will
// result in compilation errors.
type UnsafeUserInnerServiceServer interface {
	mustEmbedUnimplementedUserInnerServiceServer()
}

func RegisterUserInnerServiceServer(s grpc.ServiceRegistrar, srv UserInnerServiceServer) {
	s.RegisterService(&UserInnerService_ServiceDesc, srv)
}

func _UserInnerService_UserConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserConnected(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserDisconnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserDisconnected(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserAuthentication(ctx, req.(*UserAuthInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserPersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserPersonalInfo(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserEditPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEditPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserEditPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserEditPersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserEditPersonalInfo(ctx, req.(*UserEditPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserStorageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStorageInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserStorageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserStorageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserStorageInfo(ctx, req.(*UserStorageInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFarmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFarmInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFarmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFarmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFarmInfo(ctx, req.(*UserFarmInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserLandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLandInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserLandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserLandInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserLandInfo(ctx, req.(*UserLandInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFarmOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFarmOpsMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFarmOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFarmOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFarmOps(ctx, req.(*UserFarmOpsMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFriendRankingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriendRankingInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFriendRankingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFriendRankingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFriendRankingInfo(ctx, req.(*UserFriendRankingInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_AllUserRankingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllUserRankingInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).AllUserRankingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_AllUserRankingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).AllUserRankingInfo(ctx, req.(*AllUserRankingInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_LookUserFarmsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUserFarmsInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).LookUserFarmsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_LookUserFarmsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).LookUserFarmsInfo(ctx, req.(*LookUserFarmsInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserPurchaseGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPurchaseGoodsMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserPurchaseGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserPurchaseGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserPurchaseGoods(ctx, req.(*UserPurchaseGoodsMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInnerService_ServiceDesc is the grpc.ServiceDesc for UserInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserInnerService",
	HandlerType: (*UserInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserConnected",
			Handler:    _UserInnerService_UserConnected_Handler,
		},
		{
			MethodName: "UserDisconnected",
			Handler:    _UserInnerService_UserDisconnected_Handler,
		},
		{
			MethodName: "UserAuthentication",
			Handler:    _UserInnerService_UserAuthentication_Handler,
		},
		{
			MethodName: "UserPersonalInfo",
			Handler:    _UserInnerService_UserPersonalInfo_Handler,
		},
		{
			MethodName: "UserEditPersonalInfo",
			Handler:    _UserInnerService_UserEditPersonalInfo_Handler,
		},
		{
			MethodName: "UserStorageInfo",
			Handler:    _UserInnerService_UserStorageInfo_Handler,
		},
		{
			MethodName: "UserFarmInfo",
			Handler:    _UserInnerService_UserFarmInfo_Handler,
		},
		{
			MethodName: "UserLandInfo",
			Handler:    _UserInnerService_UserLandInfo_Handler,
		},
		{
			MethodName: "UserFarmOps",
			Handler:    _UserInnerService_UserFarmOps_Handler,
		},
		{
			MethodName: "UserFriendRankingInfo",
			Handler:    _UserInnerService_UserFriendRankingInfo_Handler,
		},
		{
			MethodName: "AllUserRankingInfo",
			Handler:    _UserInnerService_AllUserRankingInfo_Handler,
		},
		{
			MethodName: "LookUserFarmsInfo",
			Handler:    _UserInnerService_LookUserFarmsInfo_Handler,
		},
		{
			MethodName: "UserPurchaseGoods",
			Handler:    _UserInnerService_UserPurchaseGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
