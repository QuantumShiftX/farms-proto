// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAuthService_Register_FullMethodName      = "/user.v1.UserAuthService/Register"
	UserAuthService_Login_FullMethodName         = "/user.v1.UserAuthService/Login"
	UserAuthService_ForgotPwd_FullMethodName     = "/user.v1.UserAuthService/ForgotPwd"
	UserAuthService_VerifyAccount_FullMethodName = "/user.v1.UserAuthService/VerifyAccount"
	UserAuthService_LoginOut_FullMethodName      = "/user.v1.UserAuthService/LoginOut"
)

// UserAuthServiceClient is the client API for UserAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthServiceClient interface {
	Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserReply, error)
	Login(ctx context.Context, in *UserSignInReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error)
	VerifyAccount(ctx context.Context, in *VerifyAccountReq, opts ...grpc.CallOption) (*UserReply, error)
	LoginOut(ctx context.Context, in *UserSignOutReq, opts ...grpc.CallOption) (*UserReply, error)
}

type userAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthServiceClient(cc grpc.ClientConnInterface) UserAuthServiceClient {
	return &userAuthServiceClient{cc}
}

func (c *userAuthServiceClient) Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) Login(ctx context.Context, in *UserSignInReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserAuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) ForgotPwd(ctx context.Context, in *ForgotPasswordReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_ForgotPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) VerifyAccount(ctx context.Context, in *VerifyAccountReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_VerifyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) LoginOut(ctx context.Context, in *UserSignOutReq, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, UserAuthService_LoginOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServiceServer is the server API for UserAuthService service.
// All implementations must embed UnimplementedUserAuthServiceServer
// for forward compatibility
type UserAuthServiceServer interface {
	Register(context.Context, *UserRegisterReq) (*UserReply, error)
	Login(context.Context, *UserSignInReq) (*UserLoginResp, error)
	ForgotPwd(context.Context, *ForgotPasswordReq) (*UserReply, error)
	VerifyAccount(context.Context, *VerifyAccountReq) (*UserReply, error)
	LoginOut(context.Context, *UserSignOutReq) (*UserReply, error)
	mustEmbedUnimplementedUserAuthServiceServer()
}

// UnimplementedUserAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthServiceServer struct {
}

func (UnimplementedUserAuthServiceServer) Register(context.Context, *UserRegisterReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserAuthServiceServer) Login(context.Context, *UserSignInReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserAuthServiceServer) ForgotPwd(context.Context, *ForgotPasswordReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPwd not implemented")
}
func (UnimplementedUserAuthServiceServer) VerifyAccount(context.Context, *VerifyAccountReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedUserAuthServiceServer) LoginOut(context.Context, *UserSignOutReq) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (UnimplementedUserAuthServiceServer) mustEmbedUnimplementedUserAuthServiceServer() {}

// UnsafeUserAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServiceServer will
// result in compilation errors.
type UnsafeUserAuthServiceServer interface {
	mustEmbedUnimplementedUserAuthServiceServer()
}

func RegisterUserAuthServiceServer(s grpc.ServiceRegistrar, srv UserAuthServiceServer) {
	s.RegisterService(&UserAuthService_ServiceDesc, srv)
}

func _UserAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Register(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Login(ctx, req.(*UserSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_ForgotPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).ForgotPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_ForgotPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).ForgotPwd(ctx, req.(*ForgotPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_VerifyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).VerifyAccount(ctx, req.(*VerifyAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_LoginOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).LoginOut(ctx, req.(*UserSignOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthService_ServiceDesc is the grpc.ServiceDesc for UserAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserAuthService",
	HandlerType: (*UserAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserAuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserAuthService_Login_Handler,
		},
		{
			MethodName: "ForgotPwd",
			Handler:    _UserAuthService_ForgotPwd_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _UserAuthService_VerifyAccount_Handler,
		},
		{
			MethodName: "LoginOut",
			Handler:    _UserAuthService_LoginOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}

const (
	UserPlantGrowthService_CalculatePlantStatus_FullMethodName     = "/user.v1.UserPlantGrowthService/CalculatePlantStatus"
	UserPlantGrowthService_CalculateTimeReduction_FullMethodName   = "/user.v1.UserPlantGrowthService/CalculateTimeReduction"
	UserPlantGrowthService_CalculateStageTimelines_FullMethodName  = "/user.v1.UserPlantGrowthService/CalculateStageTimelines"
	UserPlantGrowthService_AdjustHarvestTime_FullMethodName        = "/user.v1.UserPlantGrowthService/AdjustHarvestTime"
	UserPlantGrowthService_CheckMaintenanceNeeds_FullMethodName    = "/user.v1.UserPlantGrowthService/CheckMaintenanceNeeds"
	UserPlantGrowthService_CheckMaintenanceNeedsMap_FullMethodName = "/user.v1.UserPlantGrowthService/CheckMaintenanceNeedsMap"
	UserPlantGrowthService_GetGrowthProgress_FullMethodName        = "/user.v1.UserPlantGrowthService/GetGrowthProgress"
	UserPlantGrowthService_GetPlantCurrentState_FullMethodName     = "/user.v1.UserPlantGrowthService/GetPlantCurrentState"
)

// UserPlantGrowthServiceClient is the client API for UserPlantGrowthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPlantGrowthServiceClient interface {
	// 计算植物当前生长阶段
	CalculatePlantStatus(ctx context.Context, in *PlantStatusRequest, opts ...grpc.CallOption) (*PlantStatusResponse, error)
	// 计算操作减少的时间
	CalculateTimeReduction(ctx context.Context, in *TimeReductionRequest, opts ...grpc.CallOption) (*TimeReductionResponse, error)
	// 计算所有生长阶段时间点
	CalculateStageTimelines(ctx context.Context, in *StageTimelinesRequest, opts ...grpc.CallOption) (*StageTimelinesResponse, error)
	// 调整收获时间
	AdjustHarvestTime(ctx context.Context, in *AdjustHarvestTimeRequest, opts ...grpc.CallOption) (*AdjustHarvestTimeResponse, error)
	// 检查是否需要浇水/施肥
	CheckMaintenanceNeeds(ctx context.Context, in *MaintenanceNeedsRequest, opts ...grpc.CallOption) (*MaintenanceNeedsResponse, error)
	// 检查是否需要浇水/施肥
	CheckMaintenanceNeedsMap(ctx context.Context, in *CheckCropsNeedsRequest, opts ...grpc.CallOption) (*CheckCropsNeedsResponse, error)
	// 获取植物当前生长进度
	GetGrowthProgress(ctx context.Context, in *GrowthProgressRequest, opts ...grpc.CallOption) (*GrowthProgressResponse, error)
	// 获取植物当前状态的综合信息
	GetPlantCurrentState(ctx context.Context, in *PlantStateRequest, opts ...grpc.CallOption) (*PlantStateResponse, error)
}

type userPlantGrowthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPlantGrowthServiceClient(cc grpc.ClientConnInterface) UserPlantGrowthServiceClient {
	return &userPlantGrowthServiceClient{cc}
}

func (c *userPlantGrowthServiceClient) CalculatePlantStatus(ctx context.Context, in *PlantStatusRequest, opts ...grpc.CallOption) (*PlantStatusResponse, error) {
	out := new(PlantStatusResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_CalculatePlantStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) CalculateTimeReduction(ctx context.Context, in *TimeReductionRequest, opts ...grpc.CallOption) (*TimeReductionResponse, error) {
	out := new(TimeReductionResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_CalculateTimeReduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) CalculateStageTimelines(ctx context.Context, in *StageTimelinesRequest, opts ...grpc.CallOption) (*StageTimelinesResponse, error) {
	out := new(StageTimelinesResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_CalculateStageTimelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) AdjustHarvestTime(ctx context.Context, in *AdjustHarvestTimeRequest, opts ...grpc.CallOption) (*AdjustHarvestTimeResponse, error) {
	out := new(AdjustHarvestTimeResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_AdjustHarvestTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) CheckMaintenanceNeeds(ctx context.Context, in *MaintenanceNeedsRequest, opts ...grpc.CallOption) (*MaintenanceNeedsResponse, error) {
	out := new(MaintenanceNeedsResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_CheckMaintenanceNeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) CheckMaintenanceNeedsMap(ctx context.Context, in *CheckCropsNeedsRequest, opts ...grpc.CallOption) (*CheckCropsNeedsResponse, error) {
	out := new(CheckCropsNeedsResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_CheckMaintenanceNeedsMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) GetGrowthProgress(ctx context.Context, in *GrowthProgressRequest, opts ...grpc.CallOption) (*GrowthProgressResponse, error) {
	out := new(GrowthProgressResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_GetGrowthProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlantGrowthServiceClient) GetPlantCurrentState(ctx context.Context, in *PlantStateRequest, opts ...grpc.CallOption) (*PlantStateResponse, error) {
	out := new(PlantStateResponse)
	err := c.cc.Invoke(ctx, UserPlantGrowthService_GetPlantCurrentState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPlantGrowthServiceServer is the server API for UserPlantGrowthService service.
// All implementations must embed UnimplementedUserPlantGrowthServiceServer
// for forward compatibility
type UserPlantGrowthServiceServer interface {
	// 计算植物当前生长阶段
	CalculatePlantStatus(context.Context, *PlantStatusRequest) (*PlantStatusResponse, error)
	// 计算操作减少的时间
	CalculateTimeReduction(context.Context, *TimeReductionRequest) (*TimeReductionResponse, error)
	// 计算所有生长阶段时间点
	CalculateStageTimelines(context.Context, *StageTimelinesRequest) (*StageTimelinesResponse, error)
	// 调整收获时间
	AdjustHarvestTime(context.Context, *AdjustHarvestTimeRequest) (*AdjustHarvestTimeResponse, error)
	// 检查是否需要浇水/施肥
	CheckMaintenanceNeeds(context.Context, *MaintenanceNeedsRequest) (*MaintenanceNeedsResponse, error)
	// 检查是否需要浇水/施肥
	CheckMaintenanceNeedsMap(context.Context, *CheckCropsNeedsRequest) (*CheckCropsNeedsResponse, error)
	// 获取植物当前生长进度
	GetGrowthProgress(context.Context, *GrowthProgressRequest) (*GrowthProgressResponse, error)
	// 获取植物当前状态的综合信息
	GetPlantCurrentState(context.Context, *PlantStateRequest) (*PlantStateResponse, error)
	mustEmbedUnimplementedUserPlantGrowthServiceServer()
}

// UnimplementedUserPlantGrowthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPlantGrowthServiceServer struct {
}

func (UnimplementedUserPlantGrowthServiceServer) CalculatePlantStatus(context.Context, *PlantStatusRequest) (*PlantStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePlantStatus not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) CalculateTimeReduction(context.Context, *TimeReductionRequest) (*TimeReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTimeReduction not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) CalculateStageTimelines(context.Context, *StageTimelinesRequest) (*StageTimelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateStageTimelines not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) AdjustHarvestTime(context.Context, *AdjustHarvestTimeRequest) (*AdjustHarvestTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustHarvestTime not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) CheckMaintenanceNeeds(context.Context, *MaintenanceNeedsRequest) (*MaintenanceNeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMaintenanceNeeds not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) CheckMaintenanceNeedsMap(context.Context, *CheckCropsNeedsRequest) (*CheckCropsNeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMaintenanceNeedsMap not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) GetGrowthProgress(context.Context, *GrowthProgressRequest) (*GrowthProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrowthProgress not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) GetPlantCurrentState(context.Context, *PlantStateRequest) (*PlantStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantCurrentState not implemented")
}
func (UnimplementedUserPlantGrowthServiceServer) mustEmbedUnimplementedUserPlantGrowthServiceServer() {
}

// UnsafeUserPlantGrowthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPlantGrowthServiceServer will
// result in compilation errors.
type UnsafeUserPlantGrowthServiceServer interface {
	mustEmbedUnimplementedUserPlantGrowthServiceServer()
}

func RegisterUserPlantGrowthServiceServer(s grpc.ServiceRegistrar, srv UserPlantGrowthServiceServer) {
	s.RegisterService(&UserPlantGrowthService_ServiceDesc, srv)
}

func _UserPlantGrowthService_CalculatePlantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).CalculatePlantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_CalculatePlantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).CalculatePlantStatus(ctx, req.(*PlantStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_CalculateTimeReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).CalculateTimeReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_CalculateTimeReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).CalculateTimeReduction(ctx, req.(*TimeReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_CalculateStageTimelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageTimelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).CalculateStageTimelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_CalculateStageTimelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).CalculateStageTimelines(ctx, req.(*StageTimelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_AdjustHarvestTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustHarvestTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).AdjustHarvestTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_AdjustHarvestTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).AdjustHarvestTime(ctx, req.(*AdjustHarvestTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_CheckMaintenanceNeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceNeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).CheckMaintenanceNeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_CheckMaintenanceNeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).CheckMaintenanceNeeds(ctx, req.(*MaintenanceNeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_CheckMaintenanceNeedsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCropsNeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).CheckMaintenanceNeedsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_CheckMaintenanceNeedsMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).CheckMaintenanceNeedsMap(ctx, req.(*CheckCropsNeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_GetGrowthProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrowthProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).GetGrowthProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_GetGrowthProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).GetGrowthProgress(ctx, req.(*GrowthProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlantGrowthService_GetPlantCurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlantGrowthServiceServer).GetPlantCurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPlantGrowthService_GetPlantCurrentState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlantGrowthServiceServer).GetPlantCurrentState(ctx, req.(*PlantStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPlantGrowthService_ServiceDesc is the grpc.ServiceDesc for UserPlantGrowthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPlantGrowthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserPlantGrowthService",
	HandlerType: (*UserPlantGrowthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatePlantStatus",
			Handler:    _UserPlantGrowthService_CalculatePlantStatus_Handler,
		},
		{
			MethodName: "CalculateTimeReduction",
			Handler:    _UserPlantGrowthService_CalculateTimeReduction_Handler,
		},
		{
			MethodName: "CalculateStageTimelines",
			Handler:    _UserPlantGrowthService_CalculateStageTimelines_Handler,
		},
		{
			MethodName: "AdjustHarvestTime",
			Handler:    _UserPlantGrowthService_AdjustHarvestTime_Handler,
		},
		{
			MethodName: "CheckMaintenanceNeeds",
			Handler:    _UserPlantGrowthService_CheckMaintenanceNeeds_Handler,
		},
		{
			MethodName: "CheckMaintenanceNeedsMap",
			Handler:    _UserPlantGrowthService_CheckMaintenanceNeedsMap_Handler,
		},
		{
			MethodName: "GetGrowthProgress",
			Handler:    _UserPlantGrowthService_GetGrowthProgress_Handler,
		},
		{
			MethodName: "GetPlantCurrentState",
			Handler:    _UserPlantGrowthService_GetPlantCurrentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}

const (
	UserRpcInnerService_GetOnlineUserList_FullMethodName = "/user.v1.UserRpcInnerService/GetOnlineUserList"
)

// UserRpcInnerServiceClient is the client API for UserRpcInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcInnerServiceClient interface {
	// 获取在线用户ID信息
	GetOnlineUserList(ctx context.Context, in *GetOnlineUserListReq, opts ...grpc.CallOption) (*GetOnlineUserListReply, error)
}

type userRpcInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcInnerServiceClient(cc grpc.ClientConnInterface) UserRpcInnerServiceClient {
	return &userRpcInnerServiceClient{cc}
}

func (c *userRpcInnerServiceClient) GetOnlineUserList(ctx context.Context, in *GetOnlineUserListReq, opts ...grpc.CallOption) (*GetOnlineUserListReply, error) {
	out := new(GetOnlineUserListReply)
	err := c.cc.Invoke(ctx, UserRpcInnerService_GetOnlineUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcInnerServiceServer is the server API for UserRpcInnerService service.
// All implementations must embed UnimplementedUserRpcInnerServiceServer
// for forward compatibility
type UserRpcInnerServiceServer interface {
	// 获取在线用户ID信息
	GetOnlineUserList(context.Context, *GetOnlineUserListReq) (*GetOnlineUserListReply, error)
	mustEmbedUnimplementedUserRpcInnerServiceServer()
}

// UnimplementedUserRpcInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcInnerServiceServer struct {
}

func (UnimplementedUserRpcInnerServiceServer) GetOnlineUserList(context.Context, *GetOnlineUserListReq) (*GetOnlineUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUserList not implemented")
}
func (UnimplementedUserRpcInnerServiceServer) mustEmbedUnimplementedUserRpcInnerServiceServer() {}

// UnsafeUserRpcInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcInnerServiceServer will
// result in compilation errors.
type UnsafeUserRpcInnerServiceServer interface {
	mustEmbedUnimplementedUserRpcInnerServiceServer()
}

func RegisterUserRpcInnerServiceServer(s grpc.ServiceRegistrar, srv UserRpcInnerServiceServer) {
	s.RegisterService(&UserRpcInnerService_ServiceDesc, srv)
}

func _UserRpcInnerService_GetOnlineUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcInnerServiceServer).GetOnlineUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpcInnerService_GetOnlineUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcInnerServiceServer).GetOnlineUserList(ctx, req.(*GetOnlineUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpcInnerService_ServiceDesc is the grpc.ServiceDesc for UserRpcInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpcInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserRpcInnerService",
	HandlerType: (*UserRpcInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnlineUserList",
			Handler:    _UserRpcInnerService_GetOnlineUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}

const (
	UserInnerService_UserConnected_FullMethodName           = "/user.v1.UserInnerService/UserConnected"
	UserInnerService_UserDisconnected_FullMethodName        = "/user.v1.UserInnerService/UserDisconnected"
	UserInnerService_UserAuthentication_FullMethodName      = "/user.v1.UserInnerService/UserAuthentication"
	UserInnerService_UserPersonalInfo_FullMethodName        = "/user.v1.UserInnerService/UserPersonalInfo"
	UserInnerService_UserEditPersonalInfo_FullMethodName    = "/user.v1.UserInnerService/UserEditPersonalInfo"
	UserInnerService_UserEditSensitiveInfo_FullMethodName   = "/user.v1.UserInnerService/UserEditSensitiveInfo"
	UserInnerService_UserStorageInfo_FullMethodName         = "/user.v1.UserInnerService/UserStorageInfo"
	UserInnerService_UserFarmInfo_FullMethodName            = "/user.v1.UserInnerService/UserFarmInfo"
	UserInnerService_UserLandInfo_FullMethodName            = "/user.v1.UserInnerService/UserLandInfo"
	UserInnerService_UserFarmOps_FullMethodName             = "/user.v1.UserInnerService/UserFarmOps"
	UserInnerService_UserFriendRankingInfo_FullMethodName   = "/user.v1.UserInnerService/UserFriendRankingInfo"
	UserInnerService_AllUserRankingInfo_FullMethodName      = "/user.v1.UserInnerService/AllUserRankingInfo"
	UserInnerService_LookUserFarmsInfo_FullMethodName       = "/user.v1.UserInnerService/LookUserFarmsInfo"
	UserInnerService_UserPurchaseGoods_FullMethodName       = "/user.v1.UserInnerService/UserPurchaseGoods"
	UserInnerService_UserFortuneTreeInfo_FullMethodName     = "/user.v1.UserInnerService/UserFortuneTreeInfo"
	UserInnerService_UserOpsFortuneTree_FullMethodName      = "/user.v1.UserInnerService/UserOpsFortuneTree"
	UserInnerService_VerifySecondaryPassword_FullMethodName = "/user.v1.UserInnerService/VerifySecondaryPassword"
	UserInnerService_GetMerchantList_FullMethodName         = "/user.v1.UserInnerService/GetMerchantList"
	UserInnerService_SetMerchantExchangeRate_FullMethodName = "/user.v1.UserInnerService/SetMerchantExchangeRate"
	UserInnerService_SubmitForRedemption_FullMethodName     = "/user.v1.UserInnerService/SubmitForRedemption"
	UserInnerService_UserAnnouncements_FullMethodName       = "/user.v1.UserInnerService/UserAnnouncements"
)

// UserInnerServiceClient is the client API for UserInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInnerServiceClient interface {
	// 用户连接
	UserConnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 用户断开连接
	UserDisconnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error)
	// 用户认证
	UserAuthentication(ctx context.Context, in *UserAuthInfoMsgReq, opts ...grpc.CallOption) (*UserAuthInfoMsgReply, error)
	// 用户个人信息
	UserPersonalInfo(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserPersonalInfoMsgReply, error)
	// 修改个人信息
	UserEditPersonalInfo(ctx context.Context, in *UserEditPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserEditPersonalInfoMsgReply, error)
	// 修改个人敏感信息
	UserEditSensitiveInfo(ctx context.Context, in *UserEditSensitiveInfoMsgReq, opts ...grpc.CallOption) (*UserEditSensitiveInfoMsgReply, error)
	// 用户仓库信息
	UserStorageInfo(ctx context.Context, in *UserStorageInfoMsgReq, opts ...grpc.CallOption) (*UserStorageInfoMsgReply, error)
	// 用户农场信息
	UserFarmInfo(ctx context.Context, in *UserFarmInfoMsgReq, opts ...grpc.CallOption) (*UserFarmInfoMsgReply, error)
	// 用户土地信息
	UserLandInfo(ctx context.Context, in *UserLandInfoMsgReq, opts ...grpc.CallOption) (*UserLandInfoMsgReply, error)
	// 用户操作农场
	UserFarmOps(ctx context.Context, in *UserFarmOpsMsgReq, opts ...grpc.CallOption) (*UserFarmOpsMsgReply, error)
	// 获取好友列表及排名
	UserFriendRankingInfo(ctx context.Context, in *UserFriendRankingInfoMsgReq, opts ...grpc.CallOption) (*UserFriendRankingInfoMsgReply, error)
	// 获取全局用户列表和排名
	AllUserRankingInfo(ctx context.Context, in *AllUserRankingInfoMsgReq, opts ...grpc.CallOption) (*AllUserRankingInfoMsgReply, error)
	// 查看用户农场信息
	LookUserFarmsInfo(ctx context.Context, in *LookUserFarmsInfoMsgReq, opts ...grpc.CallOption) (*LookUserFarmsInfoMsgReply, error)
	// 用户购买商品
	UserPurchaseGoods(ctx context.Context, in *UserPurchaseGoodsMsgReq, opts ...grpc.CallOption) (*UserPurchaseGoodsMsgReply, error)
	// 用户的发财树信息
	UserFortuneTreeInfo(ctx context.Context, in *UserFortuneTreeInfoMsgReq, opts ...grpc.CallOption) (*UserFortuneTreeInfoMsgReply, error)
	// 用户收获发财树
	UserOpsFortuneTree(ctx context.Context, in *UserOpsFortuneTreeMsgReq, opts ...grpc.CallOption) (*UserOpsFortuneTreeMsgReply, error)
	// 校验二级密码
	VerifySecondaryPassword(ctx context.Context, in *VerifySecondaryPasswordMsgReq, opts ...grpc.CallOption) (*VerifySecondaryPasswordMsgReply, error)
	// 币商列表
	GetMerchantList(ctx context.Context, in *GetMerchantListMsgReq, opts ...grpc.CallOption) (*GetMerchantListMsgReply, error)
	// 币商金币汇率设置
	SetMerchantExchangeRate(ctx context.Context, in *MerchantExchangeRateMsgReq, opts ...grpc.CallOption) (*MerchantExchangeRateMsgReply, error)
	// 提交兑换
	SubmitForRedemption(ctx context.Context, in *SubmitForRedemptionMsgReq, opts ...grpc.CallOption) (*SubmitForRedemptionMsgReply, error)
	// 获取公告
	UserAnnouncements(ctx context.Context, in *SubmitForRedemptionMsgReq, opts ...grpc.CallOption) (*SubmitForRedemptionMsgReply, error)
}

type userInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInnerServiceClient(cc grpc.ClientConnInterface) UserInnerServiceClient {
	return &userInnerServiceClient{cc}
}

func (c *userInnerServiceClient) UserConnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserConnected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserDisconnected(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserDisconnected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserAuthentication(ctx context.Context, in *UserAuthInfoMsgReq, opts ...grpc.CallOption) (*UserAuthInfoMsgReply, error) {
	out := new(UserAuthInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserAuthentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserPersonalInfo(ctx context.Context, in *UserPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserPersonalInfoMsgReply, error) {
	out := new(UserPersonalInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserPersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserEditPersonalInfo(ctx context.Context, in *UserEditPersonalInfoMsgReq, opts ...grpc.CallOption) (*UserEditPersonalInfoMsgReply, error) {
	out := new(UserEditPersonalInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserEditPersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserEditSensitiveInfo(ctx context.Context, in *UserEditSensitiveInfoMsgReq, opts ...grpc.CallOption) (*UserEditSensitiveInfoMsgReply, error) {
	out := new(UserEditSensitiveInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserEditSensitiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserStorageInfo(ctx context.Context, in *UserStorageInfoMsgReq, opts ...grpc.CallOption) (*UserStorageInfoMsgReply, error) {
	out := new(UserStorageInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserStorageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFarmInfo(ctx context.Context, in *UserFarmInfoMsgReq, opts ...grpc.CallOption) (*UserFarmInfoMsgReply, error) {
	out := new(UserFarmInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFarmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserLandInfo(ctx context.Context, in *UserLandInfoMsgReq, opts ...grpc.CallOption) (*UserLandInfoMsgReply, error) {
	out := new(UserLandInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserLandInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFarmOps(ctx context.Context, in *UserFarmOpsMsgReq, opts ...grpc.CallOption) (*UserFarmOpsMsgReply, error) {
	out := new(UserFarmOpsMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFarmOps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFriendRankingInfo(ctx context.Context, in *UserFriendRankingInfoMsgReq, opts ...grpc.CallOption) (*UserFriendRankingInfoMsgReply, error) {
	out := new(UserFriendRankingInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFriendRankingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) AllUserRankingInfo(ctx context.Context, in *AllUserRankingInfoMsgReq, opts ...grpc.CallOption) (*AllUserRankingInfoMsgReply, error) {
	out := new(AllUserRankingInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_AllUserRankingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) LookUserFarmsInfo(ctx context.Context, in *LookUserFarmsInfoMsgReq, opts ...grpc.CallOption) (*LookUserFarmsInfoMsgReply, error) {
	out := new(LookUserFarmsInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_LookUserFarmsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserPurchaseGoods(ctx context.Context, in *UserPurchaseGoodsMsgReq, opts ...grpc.CallOption) (*UserPurchaseGoodsMsgReply, error) {
	out := new(UserPurchaseGoodsMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserPurchaseGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserFortuneTreeInfo(ctx context.Context, in *UserFortuneTreeInfoMsgReq, opts ...grpc.CallOption) (*UserFortuneTreeInfoMsgReply, error) {
	out := new(UserFortuneTreeInfoMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserFortuneTreeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserOpsFortuneTree(ctx context.Context, in *UserOpsFortuneTreeMsgReq, opts ...grpc.CallOption) (*UserOpsFortuneTreeMsgReply, error) {
	out := new(UserOpsFortuneTreeMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserOpsFortuneTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) VerifySecondaryPassword(ctx context.Context, in *VerifySecondaryPasswordMsgReq, opts ...grpc.CallOption) (*VerifySecondaryPasswordMsgReply, error) {
	out := new(VerifySecondaryPasswordMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_VerifySecondaryPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) GetMerchantList(ctx context.Context, in *GetMerchantListMsgReq, opts ...grpc.CallOption) (*GetMerchantListMsgReply, error) {
	out := new(GetMerchantListMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_GetMerchantList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) SetMerchantExchangeRate(ctx context.Context, in *MerchantExchangeRateMsgReq, opts ...grpc.CallOption) (*MerchantExchangeRateMsgReply, error) {
	out := new(MerchantExchangeRateMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_SetMerchantExchangeRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) SubmitForRedemption(ctx context.Context, in *SubmitForRedemptionMsgReq, opts ...grpc.CallOption) (*SubmitForRedemptionMsgReply, error) {
	out := new(SubmitForRedemptionMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_SubmitForRedemption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInnerServiceClient) UserAnnouncements(ctx context.Context, in *SubmitForRedemptionMsgReq, opts ...grpc.CallOption) (*SubmitForRedemptionMsgReply, error) {
	out := new(SubmitForRedemptionMsgReply)
	err := c.cc.Invoke(ctx, UserInnerService_UserAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInnerServiceServer is the server API for UserInnerService service.
// All implementations must embed UnimplementedUserInnerServiceServer
// for forward compatibility
type UserInnerServiceServer interface {
	// 用户连接
	UserConnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error)
	// 用户断开连接
	UserDisconnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error)
	// 用户认证
	UserAuthentication(context.Context, *UserAuthInfoMsgReq) (*UserAuthInfoMsgReply, error)
	// 用户个人信息
	UserPersonalInfo(context.Context, *UserPersonalInfoMsgReq) (*UserPersonalInfoMsgReply, error)
	// 修改个人信息
	UserEditPersonalInfo(context.Context, *UserEditPersonalInfoMsgReq) (*UserEditPersonalInfoMsgReply, error)
	// 修改个人敏感信息
	UserEditSensitiveInfo(context.Context, *UserEditSensitiveInfoMsgReq) (*UserEditSensitiveInfoMsgReply, error)
	// 用户仓库信息
	UserStorageInfo(context.Context, *UserStorageInfoMsgReq) (*UserStorageInfoMsgReply, error)
	// 用户农场信息
	UserFarmInfo(context.Context, *UserFarmInfoMsgReq) (*UserFarmInfoMsgReply, error)
	// 用户土地信息
	UserLandInfo(context.Context, *UserLandInfoMsgReq) (*UserLandInfoMsgReply, error)
	// 用户操作农场
	UserFarmOps(context.Context, *UserFarmOpsMsgReq) (*UserFarmOpsMsgReply, error)
	// 获取好友列表及排名
	UserFriendRankingInfo(context.Context, *UserFriendRankingInfoMsgReq) (*UserFriendRankingInfoMsgReply, error)
	// 获取全局用户列表和排名
	AllUserRankingInfo(context.Context, *AllUserRankingInfoMsgReq) (*AllUserRankingInfoMsgReply, error)
	// 查看用户农场信息
	LookUserFarmsInfo(context.Context, *LookUserFarmsInfoMsgReq) (*LookUserFarmsInfoMsgReply, error)
	// 用户购买商品
	UserPurchaseGoods(context.Context, *UserPurchaseGoodsMsgReq) (*UserPurchaseGoodsMsgReply, error)
	// 用户的发财树信息
	UserFortuneTreeInfo(context.Context, *UserFortuneTreeInfoMsgReq) (*UserFortuneTreeInfoMsgReply, error)
	// 用户收获发财树
	UserOpsFortuneTree(context.Context, *UserOpsFortuneTreeMsgReq) (*UserOpsFortuneTreeMsgReply, error)
	// 校验二级密码
	VerifySecondaryPassword(context.Context, *VerifySecondaryPasswordMsgReq) (*VerifySecondaryPasswordMsgReply, error)
	// 币商列表
	GetMerchantList(context.Context, *GetMerchantListMsgReq) (*GetMerchantListMsgReply, error)
	// 币商金币汇率设置
	SetMerchantExchangeRate(context.Context, *MerchantExchangeRateMsgReq) (*MerchantExchangeRateMsgReply, error)
	// 提交兑换
	SubmitForRedemption(context.Context, *SubmitForRedemptionMsgReq) (*SubmitForRedemptionMsgReply, error)
	// 获取公告
	UserAnnouncements(context.Context, *SubmitForRedemptionMsgReq) (*SubmitForRedemptionMsgReply, error)
	mustEmbedUnimplementedUserInnerServiceServer()
}

// UnimplementedUserInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInnerServiceServer struct {
}

func (UnimplementedUserInnerServiceServer) UserConnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConnected not implemented")
}
func (UnimplementedUserInnerServiceServer) UserDisconnected(context.Context, *UserPersonalInfoMsgReq) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisconnected not implemented")
}
func (UnimplementedUserInnerServiceServer) UserAuthentication(context.Context, *UserAuthInfoMsgReq) (*UserAuthInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthentication not implemented")
}
func (UnimplementedUserInnerServiceServer) UserPersonalInfo(context.Context, *UserPersonalInfoMsgReq) (*UserPersonalInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPersonalInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserEditPersonalInfo(context.Context, *UserEditPersonalInfoMsgReq) (*UserEditPersonalInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditPersonalInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserEditSensitiveInfo(context.Context, *UserEditSensitiveInfoMsgReq) (*UserEditSensitiveInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditSensitiveInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserStorageInfo(context.Context, *UserStorageInfoMsgReq) (*UserStorageInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStorageInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFarmInfo(context.Context, *UserFarmInfoMsgReq) (*UserFarmInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFarmInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserLandInfo(context.Context, *UserLandInfoMsgReq) (*UserLandInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLandInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFarmOps(context.Context, *UserFarmOpsMsgReq) (*UserFarmOpsMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFarmOps not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFriendRankingInfo(context.Context, *UserFriendRankingInfoMsgReq) (*UserFriendRankingInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFriendRankingInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) AllUserRankingInfo(context.Context, *AllUserRankingInfoMsgReq) (*AllUserRankingInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUserRankingInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) LookUserFarmsInfo(context.Context, *LookUserFarmsInfoMsgReq) (*LookUserFarmsInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUserFarmsInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserPurchaseGoods(context.Context, *UserPurchaseGoodsMsgReq) (*UserPurchaseGoodsMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPurchaseGoods not implemented")
}
func (UnimplementedUserInnerServiceServer) UserFortuneTreeInfo(context.Context, *UserFortuneTreeInfoMsgReq) (*UserFortuneTreeInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFortuneTreeInfo not implemented")
}
func (UnimplementedUserInnerServiceServer) UserOpsFortuneTree(context.Context, *UserOpsFortuneTreeMsgReq) (*UserOpsFortuneTreeMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOpsFortuneTree not implemented")
}
func (UnimplementedUserInnerServiceServer) VerifySecondaryPassword(context.Context, *VerifySecondaryPasswordMsgReq) (*VerifySecondaryPasswordMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySecondaryPassword not implemented")
}
func (UnimplementedUserInnerServiceServer) GetMerchantList(context.Context, *GetMerchantListMsgReq) (*GetMerchantListMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantList not implemented")
}
func (UnimplementedUserInnerServiceServer) SetMerchantExchangeRate(context.Context, *MerchantExchangeRateMsgReq) (*MerchantExchangeRateMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMerchantExchangeRate not implemented")
}
func (UnimplementedUserInnerServiceServer) SubmitForRedemption(context.Context, *SubmitForRedemptionMsgReq) (*SubmitForRedemptionMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitForRedemption not implemented")
}
func (UnimplementedUserInnerServiceServer) UserAnnouncements(context.Context, *SubmitForRedemptionMsgReq) (*SubmitForRedemptionMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAnnouncements not implemented")
}
func (UnimplementedUserInnerServiceServer) mustEmbedUnimplementedUserInnerServiceServer() {}

// UnsafeUserInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInnerServiceServer will
// result in compilation errors.
type UnsafeUserInnerServiceServer interface {
	mustEmbedUnimplementedUserInnerServiceServer()
}

func RegisterUserInnerServiceServer(s grpc.ServiceRegistrar, srv UserInnerServiceServer) {
	s.RegisterService(&UserInnerService_ServiceDesc, srv)
}

func _UserInnerService_UserConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserConnected(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserDisconnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserDisconnected(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserAuthentication(ctx, req.(*UserAuthInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserPersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserPersonalInfo(ctx, req.(*UserPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserEditPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEditPersonalInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserEditPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserEditPersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserEditPersonalInfo(ctx, req.(*UserEditPersonalInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserEditSensitiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEditSensitiveInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserEditSensitiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserEditSensitiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserEditSensitiveInfo(ctx, req.(*UserEditSensitiveInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserStorageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStorageInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserStorageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserStorageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserStorageInfo(ctx, req.(*UserStorageInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFarmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFarmInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFarmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFarmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFarmInfo(ctx, req.(*UserFarmInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserLandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLandInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserLandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserLandInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserLandInfo(ctx, req.(*UserLandInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFarmOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFarmOpsMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFarmOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFarmOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFarmOps(ctx, req.(*UserFarmOpsMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFriendRankingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriendRankingInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFriendRankingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFriendRankingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFriendRankingInfo(ctx, req.(*UserFriendRankingInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_AllUserRankingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllUserRankingInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).AllUserRankingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_AllUserRankingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).AllUserRankingInfo(ctx, req.(*AllUserRankingInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_LookUserFarmsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUserFarmsInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).LookUserFarmsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_LookUserFarmsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).LookUserFarmsInfo(ctx, req.(*LookUserFarmsInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserPurchaseGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPurchaseGoodsMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserPurchaseGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserPurchaseGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserPurchaseGoods(ctx, req.(*UserPurchaseGoodsMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserFortuneTreeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFortuneTreeInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserFortuneTreeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserFortuneTreeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserFortuneTreeInfo(ctx, req.(*UserFortuneTreeInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserOpsFortuneTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpsFortuneTreeMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserOpsFortuneTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserOpsFortuneTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserOpsFortuneTree(ctx, req.(*UserOpsFortuneTreeMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_VerifySecondaryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySecondaryPasswordMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).VerifySecondaryPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_VerifySecondaryPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).VerifySecondaryPassword(ctx, req.(*VerifySecondaryPasswordMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_GetMerchantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantListMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).GetMerchantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_GetMerchantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).GetMerchantList(ctx, req.(*GetMerchantListMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_SetMerchantExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantExchangeRateMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).SetMerchantExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_SetMerchantExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).SetMerchantExchangeRate(ctx, req.(*MerchantExchangeRateMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_SubmitForRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitForRedemptionMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).SubmitForRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_SubmitForRedemption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).SubmitForRedemption(ctx, req.(*SubmitForRedemptionMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInnerService_UserAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitForRedemptionMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInnerServiceServer).UserAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInnerService_UserAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInnerServiceServer).UserAnnouncements(ctx, req.(*SubmitForRedemptionMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInnerService_ServiceDesc is the grpc.ServiceDesc for UserInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserInnerService",
	HandlerType: (*UserInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserConnected",
			Handler:    _UserInnerService_UserConnected_Handler,
		},
		{
			MethodName: "UserDisconnected",
			Handler:    _UserInnerService_UserDisconnected_Handler,
		},
		{
			MethodName: "UserAuthentication",
			Handler:    _UserInnerService_UserAuthentication_Handler,
		},
		{
			MethodName: "UserPersonalInfo",
			Handler:    _UserInnerService_UserPersonalInfo_Handler,
		},
		{
			MethodName: "UserEditPersonalInfo",
			Handler:    _UserInnerService_UserEditPersonalInfo_Handler,
		},
		{
			MethodName: "UserEditSensitiveInfo",
			Handler:    _UserInnerService_UserEditSensitiveInfo_Handler,
		},
		{
			MethodName: "UserStorageInfo",
			Handler:    _UserInnerService_UserStorageInfo_Handler,
		},
		{
			MethodName: "UserFarmInfo",
			Handler:    _UserInnerService_UserFarmInfo_Handler,
		},
		{
			MethodName: "UserLandInfo",
			Handler:    _UserInnerService_UserLandInfo_Handler,
		},
		{
			MethodName: "UserFarmOps",
			Handler:    _UserInnerService_UserFarmOps_Handler,
		},
		{
			MethodName: "UserFriendRankingInfo",
			Handler:    _UserInnerService_UserFriendRankingInfo_Handler,
		},
		{
			MethodName: "AllUserRankingInfo",
			Handler:    _UserInnerService_AllUserRankingInfo_Handler,
		},
		{
			MethodName: "LookUserFarmsInfo",
			Handler:    _UserInnerService_LookUserFarmsInfo_Handler,
		},
		{
			MethodName: "UserPurchaseGoods",
			Handler:    _UserInnerService_UserPurchaseGoods_Handler,
		},
		{
			MethodName: "UserFortuneTreeInfo",
			Handler:    _UserInnerService_UserFortuneTreeInfo_Handler,
		},
		{
			MethodName: "UserOpsFortuneTree",
			Handler:    _UserInnerService_UserOpsFortuneTree_Handler,
		},
		{
			MethodName: "VerifySecondaryPassword",
			Handler:    _UserInnerService_VerifySecondaryPassword_Handler,
		},
		{
			MethodName: "GetMerchantList",
			Handler:    _UserInnerService_GetMerchantList_Handler,
		},
		{
			MethodName: "SetMerchantExchangeRate",
			Handler:    _UserInnerService_SetMerchantExchangeRate_Handler,
		},
		{
			MethodName: "SubmitForRedemption",
			Handler:    _UserInnerService_SubmitForRedemption_Handler,
		},
		{
			MethodName: "UserAnnouncements",
			Handler:    _UserInnerService_UserAnnouncements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
