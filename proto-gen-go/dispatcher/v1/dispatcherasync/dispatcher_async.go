// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: dispatcher.proto

package dispatcherasync

import (
	"context"

	"github.com/QuantumShiftX/farms-proto/proto-gen-go/dispatcher/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CropReadyToHarvestReq           = v1.CropReadyToHarvestReq
	DispatcherReply                 = v1.DispatcherReply
	DispatcherReq                   = v1.DispatcherReq
	HeartbeatEventFastReq           = v1.HeartbeatEventFastReq
	HeartbeatEventSlowReq           = v1.HeartbeatEventSlowReq
	TriggerUserEventReq             = v1.TriggerUserEventReq
	UpdateCropStatusCheckReq        = v1.UpdateCropStatusCheckReq
	UpdateFortuneTreeStatusCheckReq = v1.UpdateFortuneTreeStatusCheckReq
	UpdateOnlineRewardTaskReq       = v1.UpdateOnlineRewardTaskReq
	UserFriendActionEventReq        = v1.UserFriendActionEventReq
	UserLoginEventReq               = v1.UserLoginEventReq
	UserOnlineDuration              = v1.UserOnlineDuration
	UserRechargeEventReq            = v1.UserRechargeEventReq
	UserRegistrationEventReq        = v1.UserRegistrationEventReq
	UserWithdrawEventReq            = v1.UserWithdrawEventReq

	DispatcherAsync interface {
		// 发财树状态检查，推送
		UpdateFortuneTreeStatusCheck(ctx context.Context, in *UpdateFortuneTreeStatusCheckReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 农场作物状态检查,推送
		UpdateCropStatusCheck(ctx context.Context, in *UpdateCropStatusCheckReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 农场作物可收获推送
		CropReadyToHarvest(ctx context.Context, in *CropReadyToHarvestReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户在线时长奖励监测
		UpdateOnlineRewardTask(ctx context.Context, in *UpdateOnlineRewardTaskReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户注册事件触发
		TriggerUserRegistrationEvent(ctx context.Context, in *UserRegistrationEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户登录事件触发
		TriggerUserLoginEvent(ctx context.Context, in *UserLoginEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户充值事件触发
		TriggerUserRechargeEvent(ctx context.Context, in *UserRechargeEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户提现事件触发
		TriggerUserWithdrawEvent(ctx context.Context, in *UserWithdrawEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 用户触发事件给好友发送
		TriggerUserFriendActionEvent(ctx context.Context, in *UserFriendActionEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 指定用户发送
		TriggerUserEvent(ctx context.Context, in *TriggerUserEventReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 心跳检测事件触发 <每9秒触发一次>
		TriggerHeartbeatEventFast(ctx context.Context, in *HeartbeatEventFastReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 心跳检测事件触发 <每10分钟触发一次>
		TriggerHeartbeatEventSlow(ctx context.Context, in *HeartbeatEventSlowReq, opts ...grpc.CallOption) (*DispatcherReply, error)
	}

	defaultDispatcherAsync struct {
		cli zrpc.Client
	}
)

func NewDispatcherAsync(cli zrpc.Client) DispatcherAsync {
	return &defaultDispatcherAsync{
		cli: cli,
	}
}

// 发财树状态检查，推送
func (m *defaultDispatcherAsync) UpdateFortuneTreeStatusCheck(ctx context.Context, in *UpdateFortuneTreeStatusCheckReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.UpdateFortuneTreeStatusCheck(ctx, in, opts...)
}

// 农场作物状态检查,推送
func (m *defaultDispatcherAsync) UpdateCropStatusCheck(ctx context.Context, in *UpdateCropStatusCheckReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.UpdateCropStatusCheck(ctx, in, opts...)
}

// 农场作物可收获推送
func (m *defaultDispatcherAsync) CropReadyToHarvest(ctx context.Context, in *CropReadyToHarvestReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.CropReadyToHarvest(ctx, in, opts...)
}

// 用户在线时长奖励监测
func (m *defaultDispatcherAsync) UpdateOnlineRewardTask(ctx context.Context, in *UpdateOnlineRewardTaskReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.UpdateOnlineRewardTask(ctx, in, opts...)
}

// 用户注册事件触发
func (m *defaultDispatcherAsync) TriggerUserRegistrationEvent(ctx context.Context, in *UserRegistrationEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserRegistrationEvent(ctx, in, opts...)
}

// 用户登录事件触发
func (m *defaultDispatcherAsync) TriggerUserLoginEvent(ctx context.Context, in *UserLoginEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserLoginEvent(ctx, in, opts...)
}

// 用户充值事件触发
func (m *defaultDispatcherAsync) TriggerUserRechargeEvent(ctx context.Context, in *UserRechargeEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserRechargeEvent(ctx, in, opts...)
}

// 用户提现事件触发
func (m *defaultDispatcherAsync) TriggerUserWithdrawEvent(ctx context.Context, in *UserWithdrawEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserWithdrawEvent(ctx, in, opts...)
}

// 用户触发事件给好友发送
func (m *defaultDispatcherAsync) TriggerUserFriendActionEvent(ctx context.Context, in *UserFriendActionEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserFriendActionEvent(ctx, in, opts...)
}

// 指定用户发送
func (m *defaultDispatcherAsync) TriggerUserEvent(ctx context.Context, in *TriggerUserEventReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerUserEvent(ctx, in, opts...)
}

// 心跳检测事件触发 <每9秒触发一次>
func (m *defaultDispatcherAsync) TriggerHeartbeatEventFast(ctx context.Context, in *HeartbeatEventFastReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerHeartbeatEventFast(ctx, in, opts...)
}

// 心跳检测事件触发 <每10分钟触发一次>
func (m *defaultDispatcherAsync) TriggerHeartbeatEventSlow(ctx context.Context, in *HeartbeatEventSlowReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherAsyncClient(m.cli.Conn())
	return client.TriggerHeartbeatEventSlow(ctx, in, opts...)
}
