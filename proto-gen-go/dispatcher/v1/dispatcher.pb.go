// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: dispatcher/v1/dispatcher.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DispatcherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DispatcherReq) Reset() {
	*x = DispatcherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatcherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatcherReq) ProtoMessage() {}

func (x *DispatcherReq) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatcherReq.ProtoReflect.Descriptor instead.
func (*DispatcherReq) Descriptor() ([]byte, []int) {
	return file_dispatcher_v1_dispatcher_proto_rawDescGZIP(), []int{0}
}

type DispatcherReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DispatcherReply) Reset() {
	*x = DispatcherReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatcherReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatcherReply) ProtoMessage() {}

func (x *DispatcherReply) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatcherReply.ProtoReflect.Descriptor instead.
func (*DispatcherReply) Descriptor() ([]byte, []int) {
	return file_dispatcher_v1_dispatcher_proto_rawDescGZIP(), []int{1}
}

type UpdateFortuneTreeStatusCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 用户id
	TreeId      int64 `protobuf:"varint,2,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`                // 发财树id
	OperationAt int64 `protobuf:"varint,3,opt,name=operation_at,json=operationAt,proto3" json:"operation_at,omitempty"` // 下次状态检查执行的时间
}

func (x *UpdateFortuneTreeStatusCheckReq) Reset() {
	*x = UpdateFortuneTreeStatusCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFortuneTreeStatusCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFortuneTreeStatusCheckReq) ProtoMessage() {}

func (x *UpdateFortuneTreeStatusCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFortuneTreeStatusCheckReq.ProtoReflect.Descriptor instead.
func (*UpdateFortuneTreeStatusCheckReq) Descriptor() ([]byte, []int) {
	return file_dispatcher_v1_dispatcher_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateFortuneTreeStatusCheckReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateFortuneTreeStatusCheckReq) GetTreeId() int64 {
	if x != nil {
		return x.TreeId
	}
	return 0
}

func (x *UpdateFortuneTreeStatusCheckReq) GetOperationAt() int64 {
	if x != nil {
		return x.OperationAt
	}
	return 0
}

type UpdateCropStatusCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 用户id
	PlantId     int64 `protobuf:"varint,2,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`             // 种植id
	OperationAt int64 `protobuf:"varint,3,opt,name=operation_at,json=operationAt,proto3" json:"operation_at,omitempty"` // 下次状态检查执行的时间
}

func (x *UpdateCropStatusCheckReq) Reset() {
	*x = UpdateCropStatusCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCropStatusCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCropStatusCheckReq) ProtoMessage() {}

func (x *UpdateCropStatusCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_v1_dispatcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCropStatusCheckReq.ProtoReflect.Descriptor instead.
func (*UpdateCropStatusCheckReq) Descriptor() ([]byte, []int) {
	return file_dispatcher_v1_dispatcher_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCropStatusCheckReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateCropStatusCheckReq) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *UpdateCropStatusCheckReq) GetOperationAt() int64 {
	if x != nil {
		return x.OperationAt
	}
	return 0
}

var File_dispatcher_v1_dispatcher_proto protoreflect.FileDescriptor

var file_dispatcher_v1_dispatcher_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22,
	0x0f, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x22, 0x11, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x76, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x22, 0x71, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x32, 0xe7,
	0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x70, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x27, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xd2, 0x03, 0x0a, 0x0f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1b,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dispatcher_v1_dispatcher_proto_rawDescOnce sync.Once
	file_dispatcher_v1_dispatcher_proto_rawDescData = file_dispatcher_v1_dispatcher_proto_rawDesc
)

func file_dispatcher_v1_dispatcher_proto_rawDescGZIP() []byte {
	file_dispatcher_v1_dispatcher_proto_rawDescOnce.Do(func() {
		file_dispatcher_v1_dispatcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispatcher_v1_dispatcher_proto_rawDescData)
	})
	return file_dispatcher_v1_dispatcher_proto_rawDescData
}

var file_dispatcher_v1_dispatcher_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dispatcher_v1_dispatcher_proto_goTypes = []interface{}{
	(*DispatcherReq)(nil),                   // 0: dispatcher.v1.DispatcherReq
	(*DispatcherReply)(nil),                 // 1: dispatcher.v1.DispatcherReply
	(*UpdateFortuneTreeStatusCheckReq)(nil), // 2: dispatcher.v1.UpdateFortuneTreeStatusCheckReq
	(*UpdateCropStatusCheckReq)(nil),        // 3: dispatcher.v1.UpdateCropStatusCheckReq
}
var file_dispatcher_v1_dispatcher_proto_depIdxs = []int32{
	2, // 0: dispatcher.v1.DispatcherAsync.UpdateFortuneTreeStatusCheck:input_type -> dispatcher.v1.UpdateFortuneTreeStatusCheckReq
	3, // 1: dispatcher.v1.DispatcherAsync.UpdateCropStatusCheck:input_type -> dispatcher.v1.UpdateCropStatusCheckReq
	0, // 2: dispatcher.v1.DispatcherTimer.CycleFertileTreeStatusCheck:input_type -> dispatcher.v1.DispatcherReq
	0, // 3: dispatcher.v1.DispatcherTimer.CycleCropStatusCheck:input_type -> dispatcher.v1.DispatcherReq
	0, // 4: dispatcher.v1.DispatcherTimer.CycleCropStageUpdate:input_type -> dispatcher.v1.DispatcherReq
	0, // 5: dispatcher.v1.DispatcherTimer.CycleBulletinMsgCheck:input_type -> dispatcher.v1.DispatcherReq
	0, // 6: dispatcher.v1.DispatcherTimer.CycleOnlineRewardTask:input_type -> dispatcher.v1.DispatcherReq
	1, // 7: dispatcher.v1.DispatcherAsync.UpdateFortuneTreeStatusCheck:output_type -> dispatcher.v1.DispatcherReply
	1, // 8: dispatcher.v1.DispatcherAsync.UpdateCropStatusCheck:output_type -> dispatcher.v1.DispatcherReply
	1, // 9: dispatcher.v1.DispatcherTimer.CycleFertileTreeStatusCheck:output_type -> dispatcher.v1.DispatcherReply
	1, // 10: dispatcher.v1.DispatcherTimer.CycleCropStatusCheck:output_type -> dispatcher.v1.DispatcherReply
	1, // 11: dispatcher.v1.DispatcherTimer.CycleCropStageUpdate:output_type -> dispatcher.v1.DispatcherReply
	1, // 12: dispatcher.v1.DispatcherTimer.CycleBulletinMsgCheck:output_type -> dispatcher.v1.DispatcherReply
	1, // 13: dispatcher.v1.DispatcherTimer.CycleOnlineRewardTask:output_type -> dispatcher.v1.DispatcherReply
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dispatcher_v1_dispatcher_proto_init() }
func file_dispatcher_v1_dispatcher_proto_init() {
	if File_dispatcher_v1_dispatcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dispatcher_v1_dispatcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatcherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_v1_dispatcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatcherReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_v1_dispatcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFortuneTreeStatusCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_v1_dispatcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCropStatusCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispatcher_v1_dispatcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_dispatcher_v1_dispatcher_proto_goTypes,
		DependencyIndexes: file_dispatcher_v1_dispatcher_proto_depIdxs,
		MessageInfos:      file_dispatcher_v1_dispatcher_proto_msgTypes,
	}.Build()
	File_dispatcher_v1_dispatcher_proto = out.File
	file_dispatcher_v1_dispatcher_proto_rawDesc = nil
	file_dispatcher_v1_dispatcher_proto_goTypes = nil
	file_dispatcher_v1_dispatcher_proto_depIdxs = nil
}
