// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: dispatcher.proto

package dispatchertimer

import (
	"context"

	"github.com/QuantumShiftX/farms-proto/proto-gen-go/dispatcher/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DispatcherReply = v1.DispatcherReply
	DispatcherReq   = v1.DispatcherReq

	DispatcherTimer interface {
		// 发财树状态检查
		CycleFertileTreeStatusCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 农场作物状态检查
		CycleCropStatusCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 农场作物状态更新
		CycleCropStageUpdate(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error)
		// 公告消息检查
		CycleBulletinMsgCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error)
	}

	defaultDispatcherTimer struct {
		cli zrpc.Client
	}
)

func NewDispatcherTimer(cli zrpc.Client) DispatcherTimer {
	return &defaultDispatcherTimer{
		cli: cli,
	}
}

// 发财树状态检查
func (m *defaultDispatcherTimer) CycleFertileTreeStatusCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherTimerClient(m.cli.Conn())
	return client.CycleFertileTreeStatusCheck(ctx, in, opts...)
}

// 农场作物状态检查
func (m *defaultDispatcherTimer) CycleCropStatusCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherTimerClient(m.cli.Conn())
	return client.CycleCropStatusCheck(ctx, in, opts...)
}

// 农场作物状态更新
func (m *defaultDispatcherTimer) CycleCropStageUpdate(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherTimerClient(m.cli.Conn())
	return client.CycleCropStageUpdate(ctx, in, opts...)
}

// 公告消息检查
func (m *defaultDispatcherTimer) CycleBulletinMsgCheck(ctx context.Context, in *DispatcherReq, opts ...grpc.CallOption) (*DispatcherReply, error) {
	client := v1.NewDispatcherTimerClient(m.cli.Conn())
	return client.CycleBulletinMsgCheck(ctx, in, opts...)
}
