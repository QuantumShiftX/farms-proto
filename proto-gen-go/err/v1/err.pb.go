// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.3
// source: err/v1/err.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorCode 定义系统中所有错误码
// ErrorCode defines all error codes in the system
type ErrorCode int32

const (
	// 通用错误码 (000-399)
	// General error codes (000-399)
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0 // 未指定错误 | Unspecified error
	// General error codes (000-399)
	ErrorCode_SUCCESS_CODE ErrorCode = 200 // 成功 | success no error
	// 基础错误码 (400-699)
	// Basic error codes (400-699)
	ErrorCode_PARAM_ERROR           ErrorCode = 400 // 参数错误 | Parameter error
	ErrorCode_UNAUTHORIZED_ERROR    ErrorCode = 401 // 无权限 | Unauthorized
	ErrorCode_SERVER_ERROR          ErrorCode = 500 // 服务拥堵，请稍后再试 | Service congestion, please try again later
	ErrorCode_SERVER_INTERNAL_ERROR ErrorCode = 501 // 服务器内部错误 | Internal server error
	ErrorCode_DB_ERROR              ErrorCode = 600 // 数据库错误 | Database error
	// 验证码相关错误 (700-799)
	// Verification code related errors (700-799)
	ErrorCode_CAPTCHA_ERROR             ErrorCode = 700 // 验证码错误 | Captcha error
	ErrorCode_GOOGLE_AUTH_CODE_REQUIRED ErrorCode = 701 // 需要Google验证码 | Google authentication code required
	// 用户相关错误码 (10000-19999)
	// User related error codes (10000-19999)
	ErrorCode_USER_NOT_FOUND_ERROR          ErrorCode = 10000 // 用户不存在 | User not found
	ErrorCode_USER_CREATE_ERROR             ErrorCode = 10001 // 创建用户错误 | Error creating user
	ErrorCode_USER_SIGN_IN_ERROR            ErrorCode = 10002 // 用户登录错误 | User sign-in error
	ErrorCode_USER_FORGOT_PWD_ERROR         ErrorCode = 10003 // 重置密码错误 | Password reset error
	ErrorCode_USER_VALIDATE_ERROR           ErrorCode = 10004 // 用户验证错误 | User validation error
	ErrorCode_USER_AGREEMENT_ERROR          ErrorCode = 10005 // 获取用户协议错误 | Error retrieving user agreement
	ErrorCode_USER_SEND_CAPTCHA_ERROR       ErrorCode = 10006 // 发送验证码错误 | Error sending captcha
	ErrorCode_USER_PASSWORD_MISMATCH_ERROR  ErrorCode = 10007 // 密码不匹配 | Password mismatch
	ErrorCode_USER_ACCOUNT_DISABLED_ERROR   ErrorCode = 10008 // 账户已禁用 | Account disabled
	ErrorCode_USER_DUPLICATE_USERNAME_ERROR ErrorCode = 10009 // 用户名已存在 | Username already exists
	ErrorCode_USER_INVALID_EMAIL_ERROR      ErrorCode = 10010 // 无效的邮箱格式 | Invalid email format
	ErrorCode_USER_TOKEN_EXPIRED_ERROR      ErrorCode = 10011 // 用户令牌过期 | User token expired
	ErrorCode_USER_INVALID_PHONE_ERROR      ErrorCode = 10012 // 无效的电话格式 | Invalid phone format
	ErrorCode_USER_VALIDATION_TYPE_ERROR    ErrorCode = 10013 // 验证类型错误 | Validation type error
	ErrorCode_USER_CREDENTIALS_ERROR        ErrorCode = 10014 // 用户或密码信息有误 | Incorrect username or password
	ErrorCode_USER_NAME_EXISTS_ERROR        ErrorCode = 10015 // 用户名字已存在 | Username already exists
	ErrorCode_USER_VALIDATION_MATCH_ERROR   ErrorCode = 10016 // 验证匹配失败 | Validation match failed
	ErrorCode_USER_STORAGE_NOT_FOUND_ERROR  ErrorCode = 10017 // 用户仓储空间不存在 | Storage space does not exist
	ErrorCode_USER_INFO_FIND_ERROR          ErrorCode = 10018 // 用户信息查询失败 | Failed to query user information
	// 农场相关错误码 (20000-29999)
	// Farm related error codes (20000-29999)
	ErrorCode_FARM_NOT_FOUND_ERROR      ErrorCode = 20000 // 农场不存在 | Farm not found
	ErrorCode_FARM_CREATE_ERROR         ErrorCode = 20001 // 创建农场失败 | Failed to create farm
	ErrorCode_FARM_UPDATE_ERROR         ErrorCode = 20002 // 更新农场信息失败 | Failed to update farm information
	ErrorCode_FARM_DELETE_ERROR         ErrorCode = 20003 // 删除农场失败 | Failed to delete farm
	ErrorCode_FARM_PERMISSION_ERROR     ErrorCode = 20004 // 无权操作该农场 | No permission to operate this farm
	ErrorCode_FARM_CROP_ERROR           ErrorCode = 20005 // 作物操作错误 | Crop operation error
	ErrorCode_FARM_IRRIGATION_ERROR     ErrorCode = 20006 // 灌溉系统错误 | Irrigation system error
	ErrorCode_FARM_INVENTORY_ERROR      ErrorCode = 20007 // 库存管理错误 | Inventory management error
	ErrorCode_USER_FARM_NOT_FOUND_ERROR ErrorCode = 20008 // 用户农场不存在 | User farm does not exist
	// 配置相关错误码 (90000-99999)
	// Configuration related error codes (90000-99999)
	ErrorCode_CONFIG_NOT_FOUND_ERROR  ErrorCode = 90000 // 配置不存在 | Configuration not found
	ErrorCode_CONFIG_INVALID_ERROR    ErrorCode = 90001 // 配置无效 | Invalid configuration
	ErrorCode_CONFIG_UPDATE_ERROR     ErrorCode = 90002 // 更新配置失败 | Failed to update configuration
	ErrorCode_CONFIG_PERMISSION_ERROR ErrorCode = 90003 // 无权修改配置 | No permission to modify configuration
	ErrorCode_CONFIG_FORMAT_ERROR     ErrorCode = 90004 // 配置格式错误 | Configuration format error
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "ERROR_CODE_UNSPECIFIED",
		200:   "SUCCESS_CODE",
		400:   "PARAM_ERROR",
		401:   "UNAUTHORIZED_ERROR",
		500:   "SERVER_ERROR",
		501:   "SERVER_INTERNAL_ERROR",
		600:   "DB_ERROR",
		700:   "CAPTCHA_ERROR",
		701:   "GOOGLE_AUTH_CODE_REQUIRED",
		10000: "USER_NOT_FOUND_ERROR",
		10001: "USER_CREATE_ERROR",
		10002: "USER_SIGN_IN_ERROR",
		10003: "USER_FORGOT_PWD_ERROR",
		10004: "USER_VALIDATE_ERROR",
		10005: "USER_AGREEMENT_ERROR",
		10006: "USER_SEND_CAPTCHA_ERROR",
		10007: "USER_PASSWORD_MISMATCH_ERROR",
		10008: "USER_ACCOUNT_DISABLED_ERROR",
		10009: "USER_DUPLICATE_USERNAME_ERROR",
		10010: "USER_INVALID_EMAIL_ERROR",
		10011: "USER_TOKEN_EXPIRED_ERROR",
		10012: "USER_INVALID_PHONE_ERROR",
		10013: "USER_VALIDATION_TYPE_ERROR",
		10014: "USER_CREDENTIALS_ERROR",
		10015: "USER_NAME_EXISTS_ERROR",
		10016: "USER_VALIDATION_MATCH_ERROR",
		10017: "USER_STORAGE_NOT_FOUND_ERROR",
		10018: "USER_INFO_FIND_ERROR",
		20000: "FARM_NOT_FOUND_ERROR",
		20001: "FARM_CREATE_ERROR",
		20002: "FARM_UPDATE_ERROR",
		20003: "FARM_DELETE_ERROR",
		20004: "FARM_PERMISSION_ERROR",
		20005: "FARM_CROP_ERROR",
		20006: "FARM_IRRIGATION_ERROR",
		20007: "FARM_INVENTORY_ERROR",
		20008: "USER_FARM_NOT_FOUND_ERROR",
		90000: "CONFIG_NOT_FOUND_ERROR",
		90001: "CONFIG_INVALID_ERROR",
		90002: "CONFIG_UPDATE_ERROR",
		90003: "CONFIG_PERMISSION_ERROR",
		90004: "CONFIG_FORMAT_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":        0,
		"SUCCESS_CODE":                  200,
		"PARAM_ERROR":                   400,
		"UNAUTHORIZED_ERROR":            401,
		"SERVER_ERROR":                  500,
		"SERVER_INTERNAL_ERROR":         501,
		"DB_ERROR":                      600,
		"CAPTCHA_ERROR":                 700,
		"GOOGLE_AUTH_CODE_REQUIRED":     701,
		"USER_NOT_FOUND_ERROR":          10000,
		"USER_CREATE_ERROR":             10001,
		"USER_SIGN_IN_ERROR":            10002,
		"USER_FORGOT_PWD_ERROR":         10003,
		"USER_VALIDATE_ERROR":           10004,
		"USER_AGREEMENT_ERROR":          10005,
		"USER_SEND_CAPTCHA_ERROR":       10006,
		"USER_PASSWORD_MISMATCH_ERROR":  10007,
		"USER_ACCOUNT_DISABLED_ERROR":   10008,
		"USER_DUPLICATE_USERNAME_ERROR": 10009,
		"USER_INVALID_EMAIL_ERROR":      10010,
		"USER_TOKEN_EXPIRED_ERROR":      10011,
		"USER_INVALID_PHONE_ERROR":      10012,
		"USER_VALIDATION_TYPE_ERROR":    10013,
		"USER_CREDENTIALS_ERROR":        10014,
		"USER_NAME_EXISTS_ERROR":        10015,
		"USER_VALIDATION_MATCH_ERROR":   10016,
		"USER_STORAGE_NOT_FOUND_ERROR":  10017,
		"USER_INFO_FIND_ERROR":          10018,
		"FARM_NOT_FOUND_ERROR":          20000,
		"FARM_CREATE_ERROR":             20001,
		"FARM_UPDATE_ERROR":             20002,
		"FARM_DELETE_ERROR":             20003,
		"FARM_PERMISSION_ERROR":         20004,
		"FARM_CROP_ERROR":               20005,
		"FARM_IRRIGATION_ERROR":         20006,
		"FARM_INVENTORY_ERROR":          20007,
		"USER_FARM_NOT_FOUND_ERROR":     20008,
		"CONFIG_NOT_FOUND_ERROR":        90000,
		"CONFIG_INVALID_ERROR":          90001,
		"CONFIG_UPDATE_ERROR":           90002,
		"CONFIG_PERMISSION_ERROR":       90003,
		"CONFIG_FORMAT_ERROR":           90004,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_err_v1_err_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_err_v1_err_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_err_v1_err_proto_rawDescGZIP(), []int{0}
}

var File_err_v1_err_proto protoreflect.FileDescriptor

var file_err_v1_err_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x72, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x65, 0x72, 0x72, 0x2e, 0x76, 0x31, 0x2a, 0x97, 0x09, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x91, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5,
	0x03, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd8, 0x04,
	0x12, 0x12, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xbc, 0x05, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xbd, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x90, 0x4e, 0x12,
	0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x91, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x92, 0x4e,
	0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x4f, 0x54, 0x5f,
	0x50, 0x57, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x93, 0x4e, 0x12, 0x18, 0x0a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x94, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x95,
	0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x96, 0x4e, 0x12,
	0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x97, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x98, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x99, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x9a, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x9b, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x9c, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x9d, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x9e, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9f, 0x4e,
	0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xa0, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xa1, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2, 0x4e,
	0x12, 0x1a, 0x0a, 0x14, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x17, 0x0a, 0x11,
	0x46, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x17, 0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x17,
	0x0a, 0x11, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x46, 0x41, 0x52, 0x4d, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xa4, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x46, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x52, 0x4f,
	0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x46,
	0x41, 0x52, 0x4d, 0x5f, 0x49, 0x52, 0x52, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x46, 0x41, 0x52, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xa7, 0x9c, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xa8, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x90, 0xbf, 0x05, 0x12, 0x1a, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x91, 0xbf, 0x05, 0x12,
	0x19, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x92, 0xbf, 0x05, 0x12, 0x1d, 0x0a, 0x17, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x93, 0xbf, 0x05, 0x12, 0x19, 0x0a, 0x13, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x94, 0xbf, 0x05, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_err_v1_err_proto_rawDescOnce sync.Once
	file_err_v1_err_proto_rawDescData = file_err_v1_err_proto_rawDesc
)

func file_err_v1_err_proto_rawDescGZIP() []byte {
	file_err_v1_err_proto_rawDescOnce.Do(func() {
		file_err_v1_err_proto_rawDescData = protoimpl.X.CompressGZIP(file_err_v1_err_proto_rawDescData)
	})
	return file_err_v1_err_proto_rawDescData
}

var file_err_v1_err_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_err_v1_err_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: err.v1.ErrorCode
}
var file_err_v1_err_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_err_v1_err_proto_init() }
func file_err_v1_err_proto_init() {
	if File_err_v1_err_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_err_v1_err_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_err_v1_err_proto_goTypes,
		DependencyIndexes: file_err_v1_err_proto_depIdxs,
		EnumInfos:         file_err_v1_err_proto_enumTypes,
	}.Build()
	File_err_v1_err_proto = out.File
	file_err_v1_err_proto_rawDesc = nil
	file_err_v1_err_proto_goTypes = nil
	file_err_v1_err_proto_depIdxs = nil
}
