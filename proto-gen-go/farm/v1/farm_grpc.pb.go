// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: farm/v1/farm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FarmService_Test_FullMethodName = "/farm.v1.FarmService/Test"
)

// FarmServiceClient is the client API for FarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmServiceClient interface {
	Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error)
}

type farmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServiceClient(cc grpc.ClientConnInterface) FarmServiceClient {
	return &farmServiceClient{cc}
}

func (c *farmServiceClient) Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error) {
	out := new(FarmReply)
	err := c.cc.Invoke(ctx, FarmService_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServiceServer is the server API for FarmService service.
// All implementations must embed UnimplementedFarmServiceServer
// for forward compatibility
type FarmServiceServer interface {
	Test(context.Context, *FarmReq) (*FarmReply, error)
	mustEmbedUnimplementedFarmServiceServer()
}

// UnimplementedFarmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFarmServiceServer struct {
}

func (UnimplementedFarmServiceServer) Test(context.Context, *FarmReq) (*FarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedFarmServiceServer) mustEmbedUnimplementedFarmServiceServer() {}

// UnsafeFarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmServiceServer will
// result in compilation errors.
type UnsafeFarmServiceServer interface {
	mustEmbedUnimplementedFarmServiceServer()
}

func RegisterFarmServiceServer(s grpc.ServiceRegistrar, srv FarmServiceServer) {
	s.RegisterService(&FarmService_ServiceDesc, srv)
}

func _FarmService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).Test(ctx, req.(*FarmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmService_ServiceDesc is the grpc.ServiceDesc for FarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.v1.FarmService",
	HandlerType: (*FarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _FarmService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm/v1/farm.proto",
}

const (
	FarmInnerService_FarmsStoreInfo_FullMethodName     = "/farm.v1.FarmInnerService/FarmsStoreInfo"
	FarmInnerService_StoreProductInfo_FullMethodName   = "/farm.v1.FarmInnerService/StoreProductInfo"
	FarmInnerService_UpdateProductStock_FullMethodName = "/farm.v1.FarmInnerService/UpdateProductStock"
	FarmInnerService_CropsProductInfo_FullMethodName   = "/farm.v1.FarmInnerService/CropsProductInfo"
	FarmInnerService_CropsInfoList_FullMethodName      = "/farm.v1.FarmInnerService/CropsInfoList"
)

// FarmInnerServiceClient is the client API for FarmInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmInnerServiceClient interface {
	// 农场商店信息
	FarmsStoreInfo(ctx context.Context, in *FarmsStoreInfoMsgReq, opts ...grpc.CallOption) (*FarmsStoreInfoMsgReply, error)
	// 单个商品信息
	StoreProductInfo(ctx context.Context, in *StoreProductInfoMsgReq, opts ...grpc.CallOption) (*StoreProductInfoMsgReply, error)
	// 更新商品库存
	UpdateProductStock(ctx context.Context, in *StoreProductInfoMsgReq, opts ...grpc.CallOption) (*FarmReply, error)
	// 获取种子信息
	CropsProductInfo(ctx context.Context, in *CropsProductInfoMsgReq, opts ...grpc.CallOption) (*CropsProductInfoMsgReply, error)
	// 获取种子列表
	CropsInfoList(ctx context.Context, in *CropsInfoListMsgReq, opts ...grpc.CallOption) (*CropsInfoListMsgReply, error)
}

type farmInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmInnerServiceClient(cc grpc.ClientConnInterface) FarmInnerServiceClient {
	return &farmInnerServiceClient{cc}
}

func (c *farmInnerServiceClient) FarmsStoreInfo(ctx context.Context, in *FarmsStoreInfoMsgReq, opts ...grpc.CallOption) (*FarmsStoreInfoMsgReply, error) {
	out := new(FarmsStoreInfoMsgReply)
	err := c.cc.Invoke(ctx, FarmInnerService_FarmsStoreInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmInnerServiceClient) StoreProductInfo(ctx context.Context, in *StoreProductInfoMsgReq, opts ...grpc.CallOption) (*StoreProductInfoMsgReply, error) {
	out := new(StoreProductInfoMsgReply)
	err := c.cc.Invoke(ctx, FarmInnerService_StoreProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmInnerServiceClient) UpdateProductStock(ctx context.Context, in *StoreProductInfoMsgReq, opts ...grpc.CallOption) (*FarmReply, error) {
	out := new(FarmReply)
	err := c.cc.Invoke(ctx, FarmInnerService_UpdateProductStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmInnerServiceClient) CropsProductInfo(ctx context.Context, in *CropsProductInfoMsgReq, opts ...grpc.CallOption) (*CropsProductInfoMsgReply, error) {
	out := new(CropsProductInfoMsgReply)
	err := c.cc.Invoke(ctx, FarmInnerService_CropsProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmInnerServiceClient) CropsInfoList(ctx context.Context, in *CropsInfoListMsgReq, opts ...grpc.CallOption) (*CropsInfoListMsgReply, error) {
	out := new(CropsInfoListMsgReply)
	err := c.cc.Invoke(ctx, FarmInnerService_CropsInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmInnerServiceServer is the server API for FarmInnerService service.
// All implementations must embed UnimplementedFarmInnerServiceServer
// for forward compatibility
type FarmInnerServiceServer interface {
	// 农场商店信息
	FarmsStoreInfo(context.Context, *FarmsStoreInfoMsgReq) (*FarmsStoreInfoMsgReply, error)
	// 单个商品信息
	StoreProductInfo(context.Context, *StoreProductInfoMsgReq) (*StoreProductInfoMsgReply, error)
	// 更新商品库存
	UpdateProductStock(context.Context, *StoreProductInfoMsgReq) (*FarmReply, error)
	// 获取种子信息
	CropsProductInfo(context.Context, *CropsProductInfoMsgReq) (*CropsProductInfoMsgReply, error)
	// 获取种子列表
	CropsInfoList(context.Context, *CropsInfoListMsgReq) (*CropsInfoListMsgReply, error)
	mustEmbedUnimplementedFarmInnerServiceServer()
}

// UnimplementedFarmInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFarmInnerServiceServer struct {
}

func (UnimplementedFarmInnerServiceServer) FarmsStoreInfo(context.Context, *FarmsStoreInfoMsgReq) (*FarmsStoreInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmsStoreInfo not implemented")
}
func (UnimplementedFarmInnerServiceServer) StoreProductInfo(context.Context, *StoreProductInfoMsgReq) (*StoreProductInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProductInfo not implemented")
}
func (UnimplementedFarmInnerServiceServer) UpdateProductStock(context.Context, *StoreProductInfoMsgReq) (*FarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStock not implemented")
}
func (UnimplementedFarmInnerServiceServer) CropsProductInfo(context.Context, *CropsProductInfoMsgReq) (*CropsProductInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CropsProductInfo not implemented")
}
func (UnimplementedFarmInnerServiceServer) CropsInfoList(context.Context, *CropsInfoListMsgReq) (*CropsInfoListMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CropsInfoList not implemented")
}
func (UnimplementedFarmInnerServiceServer) mustEmbedUnimplementedFarmInnerServiceServer() {}

// UnsafeFarmInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmInnerServiceServer will
// result in compilation errors.
type UnsafeFarmInnerServiceServer interface {
	mustEmbedUnimplementedFarmInnerServiceServer()
}

func RegisterFarmInnerServiceServer(s grpc.ServiceRegistrar, srv FarmInnerServiceServer) {
	s.RegisterService(&FarmInnerService_ServiceDesc, srv)
}

func _FarmInnerService_FarmsStoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmsStoreInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).FarmsStoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_FarmsStoreInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).FarmsStoreInfo(ctx, req.(*FarmsStoreInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmInnerService_StoreProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreProductInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).StoreProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_StoreProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).StoreProductInfo(ctx, req.(*StoreProductInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmInnerService_UpdateProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreProductInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).UpdateProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_UpdateProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).UpdateProductStock(ctx, req.(*StoreProductInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmInnerService_CropsProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CropsProductInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).CropsProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_CropsProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).CropsProductInfo(ctx, req.(*CropsProductInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmInnerService_CropsInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CropsInfoListMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).CropsInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_CropsInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).CropsInfoList(ctx, req.(*CropsInfoListMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmInnerService_ServiceDesc is the grpc.ServiceDesc for FarmInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.v1.FarmInnerService",
	HandlerType: (*FarmInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmsStoreInfo",
			Handler:    _FarmInnerService_FarmsStoreInfo_Handler,
		},
		{
			MethodName: "StoreProductInfo",
			Handler:    _FarmInnerService_StoreProductInfo_Handler,
		},
		{
			MethodName: "UpdateProductStock",
			Handler:    _FarmInnerService_UpdateProductStock_Handler,
		},
		{
			MethodName: "CropsProductInfo",
			Handler:    _FarmInnerService_CropsProductInfo_Handler,
		},
		{
			MethodName: "CropsInfoList",
			Handler:    _FarmInnerService_CropsInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm/v1/farm.proto",
}
