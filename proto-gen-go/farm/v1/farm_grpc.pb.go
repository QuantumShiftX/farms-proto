// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: farm/v1/farm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FarmService_Test_FullMethodName = "/farm.v1.FarmService/Test"
)

// FarmServiceClient is the client API for FarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmServiceClient interface {
	Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error)
}

type farmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServiceClient(cc grpc.ClientConnInterface) FarmServiceClient {
	return &farmServiceClient{cc}
}

func (c *farmServiceClient) Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FarmReply)
	err := c.cc.Invoke(ctx, FarmService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServiceServer is the server API for FarmService service.
// All implementations must embed UnimplementedFarmServiceServer
// for forward compatibility.
type FarmServiceServer interface {
	Test(context.Context, *FarmReq) (*FarmReply, error)
	mustEmbedUnimplementedFarmServiceServer()
}

// UnimplementedFarmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarmServiceServer struct{}

func (UnimplementedFarmServiceServer) Test(context.Context, *FarmReq) (*FarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedFarmServiceServer) mustEmbedUnimplementedFarmServiceServer() {}
func (UnimplementedFarmServiceServer) testEmbeddedByValue()                     {}

// UnsafeFarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmServiceServer will
// result in compilation errors.
type UnsafeFarmServiceServer interface {
	mustEmbedUnimplementedFarmServiceServer()
}

func RegisterFarmServiceServer(s grpc.ServiceRegistrar, srv FarmServiceServer) {
	// If the following call pancis, it indicates UnimplementedFarmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FarmService_ServiceDesc, srv)
}

func _FarmService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).Test(ctx, req.(*FarmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmService_ServiceDesc is the grpc.ServiceDesc for FarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.v1.FarmService",
	HandlerType: (*FarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _FarmService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm/v1/farm.proto",
}

const (
	FarmInnerService_Test_FullMethodName = "/farm.v1.FarmInnerService/Test"
)

// FarmInnerServiceClient is the client API for FarmInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmInnerServiceClient interface {
	Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error)
}

type farmInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmInnerServiceClient(cc grpc.ClientConnInterface) FarmInnerServiceClient {
	return &farmInnerServiceClient{cc}
}

func (c *farmInnerServiceClient) Test(ctx context.Context, in *FarmReq, opts ...grpc.CallOption) (*FarmReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FarmReply)
	err := c.cc.Invoke(ctx, FarmInnerService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmInnerServiceServer is the server API for FarmInnerService service.
// All implementations must embed UnimplementedFarmInnerServiceServer
// for forward compatibility.
type FarmInnerServiceServer interface {
	Test(context.Context, *FarmReq) (*FarmReply, error)
	mustEmbedUnimplementedFarmInnerServiceServer()
}

// UnimplementedFarmInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarmInnerServiceServer struct{}

func (UnimplementedFarmInnerServiceServer) Test(context.Context, *FarmReq) (*FarmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedFarmInnerServiceServer) mustEmbedUnimplementedFarmInnerServiceServer() {}
func (UnimplementedFarmInnerServiceServer) testEmbeddedByValue()                          {}

// UnsafeFarmInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmInnerServiceServer will
// result in compilation errors.
type UnsafeFarmInnerServiceServer interface {
	mustEmbedUnimplementedFarmInnerServiceServer()
}

func RegisterFarmInnerServiceServer(s grpc.ServiceRegistrar, srv FarmInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFarmInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FarmInnerService_ServiceDesc, srv)
}

func _FarmInnerService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmInnerServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmInnerService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmInnerServiceServer).Test(ctx, req.(*FarmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmInnerService_ServiceDesc is the grpc.ServiceDesc for FarmInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.v1.FarmInnerService",
	HandlerType: (*FarmInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _FarmInnerService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm/v1/farm.proto",
}
