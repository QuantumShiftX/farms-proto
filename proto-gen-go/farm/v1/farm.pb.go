// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.3
// source: farm/v1/farm.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MessageID 枚举
// 定义系统中所有消息类型的唯一标识符
type MessageID int32

const (
	// 未知消息
	MessageID_MESSAGE_ID_UNSPECIFIED MessageID = 0
	// 商店相关消息 (200-299)
	MessageID_FARMS_STORE_INFO_MSG MessageID = 200
	MessageID_STORE_INFO           MessageID = 201
)

// Enum value maps for MessageID.
var (
	MessageID_name = map[int32]string{
		0:   "MESSAGE_ID_UNSPECIFIED",
		200: "FARMS_STORE_INFO_MSG",
		201: "STORE_INFO",
	}
	MessageID_value = map[string]int32{
		"MESSAGE_ID_UNSPECIFIED": 0,
		"FARMS_STORE_INFO_MSG":   200,
		"STORE_INFO":             201,
	}
)

func (x MessageID) Enum() *MessageID {
	p := new(MessageID)
	*p = x
	return p
}

func (x MessageID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageID) Descriptor() protoreflect.EnumDescriptor {
	return file_farm_v1_farm_proto_enumTypes[0].Descriptor()
}

func (MessageID) Type() protoreflect.EnumType {
	return &file_farm_v1_farm_proto_enumTypes[0]
}

func (x MessageID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageID.Descriptor instead.
func (MessageID) EnumDescriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{0}
}

// *
// 是否状态枚举
// 通用的是否状态枚举（用于多个字段）
type BooleanStatus int32

const (
	BooleanStatus_BOOLEAN_UNSPECIFIED BooleanStatus = 0 // 未指定
	BooleanStatus_NO                  BooleanStatus = 1 // 否
	BooleanStatus_YES                 BooleanStatus = 2 // 是
)

// Enum value maps for BooleanStatus.
var (
	BooleanStatus_name = map[int32]string{
		0: "BOOLEAN_UNSPECIFIED",
		1: "NO",
		2: "YES",
	}
	BooleanStatus_value = map[string]int32{
		"BOOLEAN_UNSPECIFIED": 0,
		"NO":                  1,
		"YES":                 2,
	}
)

func (x BooleanStatus) Enum() *BooleanStatus {
	p := new(BooleanStatus)
	*p = x
	return p
}

func (x BooleanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_farm_v1_farm_proto_enumTypes[1].Descriptor()
}

func (BooleanStatus) Type() protoreflect.EnumType {
	return &file_farm_v1_farm_proto_enumTypes[1]
}

func (x BooleanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanStatus.Descriptor instead.
func (BooleanStatus) EnumDescriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{1}
}

// *
// 商品类型枚举
// 定义商店中商品的类型
type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0 // 未指定类型
	ProductType_SEED                     ProductType = 1 // 种子
	ProductType_FERTILIZER               ProductType = 2 // 肥料
	ProductType_OTHER                    ProductType = 3 // 其他道具
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "SEED",
		2: "FERTILIZER",
		3: "OTHER",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"SEED":                     1,
		"FERTILIZER":               2,
		"OTHER":                    3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_farm_v1_farm_proto_enumTypes[2].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_farm_v1_farm_proto_enumTypes[2]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{2}
}

type FarmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FarmReq) Reset() {
	*x = FarmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmReq) ProtoMessage() {}

func (x *FarmReq) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmReq.ProtoReflect.Descriptor instead.
func (*FarmReq) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{0}
}

type FarmReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FarmReply) Reset() {
	*x = FarmReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmReply) ProtoMessage() {}

func (x *FarmReply) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmReply.ProtoReflect.Descriptor instead.
func (*FarmReply) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{1}
}

type StoreProductInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stock int64 `protobuf:"varint,2,opt,name=stock,proto3" json:"stock,omitempty"`
}

func (x *StoreProductInfoMsgReq) Reset() {
	*x = StoreProductInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreProductInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreProductInfoMsgReq) ProtoMessage() {}

func (x *StoreProductInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreProductInfoMsgReq.ProtoReflect.Descriptor instead.
func (*StoreProductInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{2}
}

func (x *StoreProductInfoMsgReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreProductInfoMsgReq) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

type StoreProductInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // 自增主键
	ProductType     ProductType   `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=farm.v1.ProductType" json:"product_type,omitempty"` // 商品类型
	ProductName     string        `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           // 商品名称
	ProductImageUrl string        `protobuf:"bytes,4,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`             // 商品图片地址
	ProductId       int64         `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                // 商品ID
	Stock           int64         `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                                         // 库存数量，-1表示无限
	Sort            int64         `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                           // 排序字段
	IsFree          BooleanStatus `protobuf:"varint,8,opt,name=is_free,json=isFree,proto3,enum=farm.v1.BooleanStatus" json:"is_free,omitempty"`              // 是否可以免费领取
	IsEnabled       BooleanStatus `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,proto3,enum=farm.v1.BooleanStatus" json:"is_enabled,omitempty"`     // 是否启用
}

func (x *StoreProductInfoMsgReply) Reset() {
	*x = StoreProductInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreProductInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreProductInfoMsgReply) ProtoMessage() {}

func (x *StoreProductInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreProductInfoMsgReply.ProtoReflect.Descriptor instead.
func (*StoreProductInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{3}
}

func (x *StoreProductInfoMsgReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreProductInfoMsgReply) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *StoreProductInfoMsgReply) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StoreProductInfoMsgReply) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *StoreProductInfoMsgReply) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *StoreProductInfoMsgReply) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *StoreProductInfoMsgReply) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *StoreProductInfoMsgReply) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreProductInfoMsgReply) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

type CropsProductInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CropsProductInfoMsgReq) Reset() {
	*x = CropsProductInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsProductInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsProductInfoMsgReq) ProtoMessage() {}

func (x *CropsProductInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsProductInfoMsgReq.ProtoReflect.Descriptor instead.
func (*CropsProductInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{4}
}

func (x *CropsProductInfoMsgReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CropsProductInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[int64]*CropsProductInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CropsProductInfoMsgReply) Reset() {
	*x = CropsProductInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsProductInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsProductInfoMsgReply) ProtoMessage() {}

func (x *CropsProductInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsProductInfoMsgReply.ProtoReflect.Descriptor instead.
func (*CropsProductInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{5}
}

func (x *CropsProductInfoMsgReply) GetResult() map[int64]*CropsProductInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

type CropsProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                   // 作物ID
	Name                                string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                // 作物名称
	Price                               int64         `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`                                                                                                             // 作物价格（单位：代币）
	MaturityIncome                      int64         `protobuf:"varint,4,opt,name=maturity_income,json=maturityIncome,proto3" json:"maturity_income,omitempty"`                                                                     // 成熟收益（代币）
	MaturityPeriod                      int64         `protobuf:"varint,5,opt,name=maturity_period,json=maturityPeriod,proto3" json:"maturity_period,omitempty"`                                                                     // 成熟周期（单位：分）
	WateringFrequency                   int64         `protobuf:"varint,6,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                            // 浇水频率（次/天）
	FertilizingFrequency                int64         `protobuf:"varint,7,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                                   // 施肥频率（次/天）
	SelfWateringDecreaseTime            int64         `protobuf:"varint,8,opt,name=self_watering_decrease_time,json=selfWateringDecreaseTime,proto3" json:"self_watering_decrease_time,omitempty"`                                   // 自己每次浇水减少时间（单位：分）
	SelfWateringDecreasePercentage      int64         `protobuf:"varint,9,opt,name=self_watering_decrease_percentage,json=selfWateringDecreasePercentage,proto3" json:"self_watering_decrease_percentage,omitempty"`                 // 自己每次浇水减少百分比（0-100）
	SelfFertilizingDecreaseTime         int64         `protobuf:"varint,10,opt,name=self_fertilizing_decrease_time,json=selfFertilizingDecreaseTime,proto3" json:"self_fertilizing_decrease_time,omitempty"`                         // 自己每次施肥减少时间（单位：分）
	SelfFertilizingDecreasePercentage   int64         `protobuf:"varint,11,opt,name=self_fertilizing_decrease_percentage,json=selfFertilizingDecreasePercentage,proto3" json:"self_fertilizing_decrease_percentage,omitempty"`       // 自己每次施肥减少百分比（0-100）
	FriendWateringDecreaseTime          int64         `protobuf:"varint,12,opt,name=friend_watering_decrease_time,json=friendWateringDecreaseTime,proto3" json:"friend_watering_decrease_time,omitempty"`                            // 好友每次浇水减少时间（单位：分）
	FriendWateringDecreasePercentage    int64         `protobuf:"varint,13,opt,name=friend_watering_decrease_percentage,json=friendWateringDecreasePercentage,proto3" json:"friend_watering_decrease_percentage,omitempty"`          // 好友每次浇水减少百分比（0-100）
	FriendFertilizingDecreaseTime       int64         `protobuf:"varint,14,opt,name=friend_fertilizing_decrease_time,json=friendFertilizingDecreaseTime,proto3" json:"friend_fertilizing_decrease_time,omitempty"`                   // 好友每次施肥减少时间（单位：分）
	FriendFertilizingDecreasePercentage int64         `protobuf:"varint,15,opt,name=friend_fertilizing_decrease_percentage,json=friendFertilizingDecreasePercentage,proto3" json:"friend_fertilizing_decrease_percentage,omitempty"` // 好友每次施肥减少百分比（0-100）
	IsAvailable                         BooleanStatus `protobuf:"varint,16,opt,name=is_available,json=isAvailable,proto3,enum=farm.v1.BooleanStatus" json:"is_available,omitempty"`                                                  // 是否上架（1 = 上架, 2 = 下架）
	Sort                                int64         `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                                              // 排序（用于显示顺序）
	IsEnabled                           BooleanStatus `protobuf:"varint,18,opt,name=is_enabled,json=isEnabled,proto3,enum=farm.v1.BooleanStatus" json:"is_enabled,omitempty"`                                                        // 是否启用（1 = 启用, 2 = 禁用）
}

func (x *CropsProductInfo) Reset() {
	*x = CropsProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropsProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropsProductInfo) ProtoMessage() {}

func (x *CropsProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropsProductInfo.ProtoReflect.Descriptor instead.
func (*CropsProductInfo) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{6}
}

func (x *CropsProductInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CropsProductInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CropsProductInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CropsProductInfo) GetMaturityIncome() int64 {
	if x != nil {
		return x.MaturityIncome
	}
	return 0
}

func (x *CropsProductInfo) GetMaturityPeriod() int64 {
	if x != nil {
		return x.MaturityPeriod
	}
	return 0
}

func (x *CropsProductInfo) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *CropsProductInfo) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *CropsProductInfo) GetSelfWateringDecreaseTime() int64 {
	if x != nil {
		return x.SelfWateringDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetSelfWateringDecreasePercentage() int64 {
	if x != nil {
		return x.SelfWateringDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetSelfFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.SelfFertilizingDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetSelfFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.SelfFertilizingDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetFriendWateringDecreaseTime() int64 {
	if x != nil {
		return x.FriendWateringDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetFriendWateringDecreasePercentage() int64 {
	if x != nil {
		return x.FriendWateringDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetFriendFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.FriendFertilizingDecreaseTime
	}
	return 0
}

func (x *CropsProductInfo) GetFriendFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.FriendFertilizingDecreasePercentage
	}
	return 0
}

func (x *CropsProductInfo) GetIsAvailable() BooleanStatus {
	if x != nil {
		return x.IsAvailable
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *CropsProductInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CropsProductInfo) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

// *
// MQTT请求消息基础结构
// 所有请求消息的基础结构，可根据需要扩展
type MsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReq) Reset() {
	*x = MsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReq) ProtoMessage() {}

func (x *MsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReq.ProtoReflect.Descriptor instead.
func (*MsgReq) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{7}
}

// *
// MQTT响应消息基础结构
// 所有响应消息的基础结构，可根据需要扩展
type MsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgReply) Reset() {
	*x = MsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReply) ProtoMessage() {}

func (x *MsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReply.ProtoReflect.Descriptor instead.
func (*MsgReply) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{8}
}

// *
// 获取用户商店信息请求
// 用于查询当前用户的商店相关信息
type FarmsStoreInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FarmsStoreInfoMsgReq) Reset() {
	*x = FarmsStoreInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReq) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReq.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{9}
}

func (x *FarmsStoreInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// *
// 商店信息响应
// 包含商店内可购买的商品列表
type FarmsStoreInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64        `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*StoreInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"` // 商品信息列表
	Extend    string       `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (x *FarmsStoreInfoMsgReply) Reset() {
	*x = FarmsStoreInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmsStoreInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmsStoreInfoMsgReply) ProtoMessage() {}

func (x *FarmsStoreInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmsStoreInfoMsgReply.ProtoReflect.Descriptor instead.
func (*FarmsStoreInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{10}
}

func (x *FarmsStoreInfoMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *FarmsStoreInfoMsgReply) GetRows() []*StoreInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FarmsStoreInfoMsgReply) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// *
// 商店商品信息
// 表示商店中的单个商品信息
type StoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                   // 自增主键
	ProductType                         ProductType   `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=farm.v1.ProductType" json:"product_type,omitempty"`                                                     // 商品类型
	ProductName                         string        `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                                               // 商品名称
	ProductImageUrl                     string        `protobuf:"bytes,4,opt,name=product_image_url,json=productImageUrl,proto3" json:"product_image_url,omitempty"`                                                                 // 商品图片地址
	ProductId                           int64         `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                                                                    // 商品ID
	Stock                               int64         `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                                                                                             // 库存数量，-1表示无限
	Sort                                int64         `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                                               // 排序字段
	IsFree                              BooleanStatus `protobuf:"varint,8,opt,name=is_free,json=isFree,proto3,enum=farm.v1.BooleanStatus" json:"is_free,omitempty"`                                                                  // 是否可以免费领取
	IsEnabled                           BooleanStatus `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,proto3,enum=farm.v1.BooleanStatus" json:"is_enabled,omitempty"`                                                         // 是否启用
	CropName                            string        `protobuf:"bytes,12,opt,name=crop_name,json=cropName,proto3" json:"crop_name,omitempty"`                                                                                       // 作物名称
	CropPrice                           int64         `protobuf:"varint,13,opt,name=crop_price,json=cropPrice,proto3" json:"crop_price,omitempty"`                                                                                   // 作物价格（单位：代币）
	MaturityIncome                      int64         `protobuf:"varint,14,opt,name=maturity_income,json=maturityIncome,proto3" json:"maturity_income,omitempty"`                                                                    // 成熟收益（代币）
	MaturityPeriod                      int64         `protobuf:"varint,15,opt,name=maturity_period,json=maturityPeriod,proto3" json:"maturity_period,omitempty"`                                                                    // 成熟周期（单位：分）
	WateringFrequency                   int64         `protobuf:"varint,16,opt,name=watering_frequency,json=wateringFrequency,proto3" json:"watering_frequency,omitempty"`                                                           // 浇水频率（次/天）
	FertilizingFrequency                int64         `protobuf:"varint,17,opt,name=fertilizing_frequency,json=fertilizingFrequency,proto3" json:"fertilizing_frequency,omitempty"`                                                  // 施肥频率（次/天）
	SelfWateringDecreaseTime            int64         `protobuf:"varint,18,opt,name=self_watering_decrease_time,json=selfWateringDecreaseTime,proto3" json:"self_watering_decrease_time,omitempty"`                                  // 自己每次浇水减少时间（单位：分）
	SelfWateringDecreasePercentage      int64         `protobuf:"varint,19,opt,name=self_watering_decrease_percentage,json=selfWateringDecreasePercentage,proto3" json:"self_watering_decrease_percentage,omitempty"`                // 自己每次浇水减少百分比（0-100）
	SelfFertilizingDecreaseTime         int64         `protobuf:"varint,20,opt,name=self_fertilizing_decrease_time,json=selfFertilizingDecreaseTime,proto3" json:"self_fertilizing_decrease_time,omitempty"`                         // 自己每次施肥减少时间（单位：分）
	SelfFertilizingDecreasePercentage   int64         `protobuf:"varint,21,opt,name=self_fertilizing_decrease_percentage,json=selfFertilizingDecreasePercentage,proto3" json:"self_fertilizing_decrease_percentage,omitempty"`       // 自己每次施肥减少百分比（0-100）
	FriendWateringDecreaseTime          int64         `protobuf:"varint,22,opt,name=friend_watering_decrease_time,json=friendWateringDecreaseTime,proto3" json:"friend_watering_decrease_time,omitempty"`                            // 好友每次浇水减少时间（单位：分）
	FriendWateringDecreasePercentage    int64         `protobuf:"varint,23,opt,name=friend_watering_decrease_percentage,json=friendWateringDecreasePercentage,proto3" json:"friend_watering_decrease_percentage,omitempty"`          // 好友每次浇水减少百分比（0-100）
	FriendFertilizingDecreaseTime       int64         `protobuf:"varint,24,opt,name=friend_fertilizing_decrease_time,json=friendFertilizingDecreaseTime,proto3" json:"friend_fertilizing_decrease_time,omitempty"`                   // 好友每次施肥减少时间（单位：分）
	FriendFertilizingDecreasePercentage int64         `protobuf:"varint,25,opt,name=friend_fertilizing_decrease_percentage,json=friendFertilizingDecreasePercentage,proto3" json:"friend_fertilizing_decrease_percentage,omitempty"` // 好友每次施肥减少百分比（0-100）
}

func (x *StoreInfo) Reset() {
	*x = StoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_farm_v1_farm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreInfo) ProtoMessage() {}

func (x *StoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_farm_v1_farm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreInfo.ProtoReflect.Descriptor instead.
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return file_farm_v1_farm_proto_rawDescGZIP(), []int{11}
}

func (x *StoreInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreInfo) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *StoreInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StoreInfo) GetProductImageUrl() string {
	if x != nil {
		return x.ProductImageUrl
	}
	return ""
}

func (x *StoreInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *StoreInfo) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *StoreInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *StoreInfo) GetIsFree() BooleanStatus {
	if x != nil {
		return x.IsFree
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreInfo) GetIsEnabled() BooleanStatus {
	if x != nil {
		return x.IsEnabled
	}
	return BooleanStatus_BOOLEAN_UNSPECIFIED
}

func (x *StoreInfo) GetCropName() string {
	if x != nil {
		return x.CropName
	}
	return ""
}

func (x *StoreInfo) GetCropPrice() int64 {
	if x != nil {
		return x.CropPrice
	}
	return 0
}

func (x *StoreInfo) GetMaturityIncome() int64 {
	if x != nil {
		return x.MaturityIncome
	}
	return 0
}

func (x *StoreInfo) GetMaturityPeriod() int64 {
	if x != nil {
		return x.MaturityPeriod
	}
	return 0
}

func (x *StoreInfo) GetWateringFrequency() int64 {
	if x != nil {
		return x.WateringFrequency
	}
	return 0
}

func (x *StoreInfo) GetFertilizingFrequency() int64 {
	if x != nil {
		return x.FertilizingFrequency
	}
	return 0
}

func (x *StoreInfo) GetSelfWateringDecreaseTime() int64 {
	if x != nil {
		return x.SelfWateringDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetSelfWateringDecreasePercentage() int64 {
	if x != nil {
		return x.SelfWateringDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetSelfFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.SelfFertilizingDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetSelfFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.SelfFertilizingDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetFriendWateringDecreaseTime() int64 {
	if x != nil {
		return x.FriendWateringDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetFriendWateringDecreasePercentage() int64 {
	if x != nil {
		return x.FriendWateringDecreasePercentage
	}
	return 0
}

func (x *StoreInfo) GetFriendFertilizingDecreaseTime() int64 {
	if x != nil {
		return x.FriendFertilizingDecreaseTime
	}
	return 0
}

func (x *StoreInfo) GetFriendFertilizingDecreasePercentage() int64 {
	if x != nil {
		return x.FriendFertilizingDecreasePercentage
	}
	return 0
}

var File_farm_v1_farm_proto protoreflect.FileDescriptor

var file_farm_v1_farm_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x09, 0x0a,
	0x07, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a, 0x09, 0x46, 0x61, 0x72, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0xe3, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x69, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x43,
	0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x6f, 0x70,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x54, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd8, 0x07, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x65, 0x6c,
	0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1e, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x26, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x08, 0x0a, 0x06,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x60, 0x0a, 0x14, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x96, 0x09, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x65, 0x72,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x21, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a,
	0x24, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x73, 0x65, 0x6c,
	0x66, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2a, 0x53,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x41, 0x52, 0x4d, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0xc8, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0xc9, 0x01, 0x2a, 0x39, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x50,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49,
	0x5a, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03,
	0x32, 0x3d, 0x0a, 0x0b, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32,
	0xe7, 0x02, 0x0a, 0x10, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_farm_v1_farm_proto_rawDescOnce sync.Once
	file_farm_v1_farm_proto_rawDescData = file_farm_v1_farm_proto_rawDesc
)

func file_farm_v1_farm_proto_rawDescGZIP() []byte {
	file_farm_v1_farm_proto_rawDescOnce.Do(func() {
		file_farm_v1_farm_proto_rawDescData = protoimpl.X.CompressGZIP(file_farm_v1_farm_proto_rawDescData)
	})
	return file_farm_v1_farm_proto_rawDescData
}

var file_farm_v1_farm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_farm_v1_farm_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_farm_v1_farm_proto_goTypes = []interface{}{
	(MessageID)(0),                   // 0: farm.v1.MessageID
	(BooleanStatus)(0),               // 1: farm.v1.BooleanStatus
	(ProductType)(0),                 // 2: farm.v1.ProductType
	(*FarmReq)(nil),                  // 3: farm.v1.FarmReq
	(*FarmReply)(nil),                // 4: farm.v1.FarmReply
	(*StoreProductInfoMsgReq)(nil),   // 5: farm.v1.StoreProductInfoMsgReq
	(*StoreProductInfoMsgReply)(nil), // 6: farm.v1.StoreProductInfoMsgReply
	(*CropsProductInfoMsgReq)(nil),   // 7: farm.v1.CropsProductInfoMsgReq
	(*CropsProductInfoMsgReply)(nil), // 8: farm.v1.CropsProductInfoMsgReply
	(*CropsProductInfo)(nil),         // 9: farm.v1.CropsProductInfo
	(*MsgReq)(nil),                   // 10: farm.v1.MsgReq
	(*MsgReply)(nil),                 // 11: farm.v1.MsgReply
	(*FarmsStoreInfoMsgReq)(nil),     // 12: farm.v1.FarmsStoreInfoMsgReq
	(*FarmsStoreInfoMsgReply)(nil),   // 13: farm.v1.FarmsStoreInfoMsgReply
	(*StoreInfo)(nil),                // 14: farm.v1.StoreInfo
	nil,                              // 15: farm.v1.CropsProductInfoMsgReply.ResultEntry
}
var file_farm_v1_farm_proto_depIdxs = []int32{
	2,  // 0: farm.v1.StoreProductInfoMsgReply.product_type:type_name -> farm.v1.ProductType
	1,  // 1: farm.v1.StoreProductInfoMsgReply.is_free:type_name -> farm.v1.BooleanStatus
	1,  // 2: farm.v1.StoreProductInfoMsgReply.is_enabled:type_name -> farm.v1.BooleanStatus
	15, // 3: farm.v1.CropsProductInfoMsgReply.result:type_name -> farm.v1.CropsProductInfoMsgReply.ResultEntry
	1,  // 4: farm.v1.CropsProductInfo.is_available:type_name -> farm.v1.BooleanStatus
	1,  // 5: farm.v1.CropsProductInfo.is_enabled:type_name -> farm.v1.BooleanStatus
	14, // 6: farm.v1.FarmsStoreInfoMsgReply.rows:type_name -> farm.v1.StoreInfo
	2,  // 7: farm.v1.StoreInfo.product_type:type_name -> farm.v1.ProductType
	1,  // 8: farm.v1.StoreInfo.is_free:type_name -> farm.v1.BooleanStatus
	1,  // 9: farm.v1.StoreInfo.is_enabled:type_name -> farm.v1.BooleanStatus
	9,  // 10: farm.v1.CropsProductInfoMsgReply.ResultEntry.value:type_name -> farm.v1.CropsProductInfo
	3,  // 11: farm.v1.FarmService.Test:input_type -> farm.v1.FarmReq
	12, // 12: farm.v1.FarmInnerService.FarmsStoreInfo:input_type -> farm.v1.FarmsStoreInfoMsgReq
	5,  // 13: farm.v1.FarmInnerService.StoreProductInfo:input_type -> farm.v1.StoreProductInfoMsgReq
	5,  // 14: farm.v1.FarmInnerService.UpdateProductStock:input_type -> farm.v1.StoreProductInfoMsgReq
	7,  // 15: farm.v1.FarmInnerService.CropsProductInfo:input_type -> farm.v1.CropsProductInfoMsgReq
	4,  // 16: farm.v1.FarmService.Test:output_type -> farm.v1.FarmReply
	13, // 17: farm.v1.FarmInnerService.FarmsStoreInfo:output_type -> farm.v1.FarmsStoreInfoMsgReply
	6,  // 18: farm.v1.FarmInnerService.StoreProductInfo:output_type -> farm.v1.StoreProductInfoMsgReply
	4,  // 19: farm.v1.FarmInnerService.UpdateProductStock:output_type -> farm.v1.FarmReply
	8,  // 20: farm.v1.FarmInnerService.CropsProductInfo:output_type -> farm.v1.CropsProductInfoMsgReply
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_farm_v1_farm_proto_init() }
func file_farm_v1_farm_proto_init() {
	if File_farm_v1_farm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_farm_v1_farm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreProductInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreProductInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsProductInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsProductInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropsProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmsStoreInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_farm_v1_farm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_farm_v1_farm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_farm_v1_farm_proto_goTypes,
		DependencyIndexes: file_farm_v1_farm_proto_depIdxs,
		EnumInfos:         file_farm_v1_farm_proto_enumTypes,
		MessageInfos:      file_farm_v1_farm_proto_msgTypes,
	}.Build()
	File_farm_v1_farm_proto = out.File
	file_farm_v1_farm_proto_rawDesc = nil
	file_farm_v1_farm_proto_goTypes = nil
	file_farm_v1_farm_proto_depIdxs = nil
}
