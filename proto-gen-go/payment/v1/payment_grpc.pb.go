// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: payment/v1/payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentPayInnerService_ApplyAgentPay_FullMethodName            = "/payment.v1.AgentPayInnerService/ApplyAgentPay"
	AgentPayInnerService_QueryAgentPayOrder_FullMethodName       = "/payment.v1.AgentPayInnerService/QueryAgentPayOrder"
	AgentPayInnerService_QueryAgentPayCertificate_FullMethodName = "/payment.v1.AgentPayInnerService/QueryAgentPayCertificate"
	AgentPayInnerService_QueryAgentPayBalance_FullMethodName     = "/payment.v1.AgentPayInnerService/QueryAgentPayBalance"
	AgentPayInnerService_HandleAgentPayNotify_FullMethodName     = "/payment.v1.AgentPayInnerService/HandleAgentPayNotify"
)

// AgentPayInnerServiceClient is the client API for AgentPayInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentPayInnerServiceClient interface {
	// 申请代付
	ApplyAgentPay(ctx context.Context, in *ApplyAgentPayRequest, opts ...grpc.CallOption) (*ApplyAgentPayResponse, error)
	// 查询代付订单
	QueryAgentPayOrder(ctx context.Context, in *QueryAgentPayOrderRequest, opts ...grpc.CallOption) (*QueryAgentPayOrderResponse, error)
	// 查询代付凭证
	QueryAgentPayCertificate(ctx context.Context, in *QueryAgentPayCertificateRequest, opts ...grpc.CallOption) (*QueryAgentPayCertificateResponse, error)
	// 查询余额
	QueryAgentPayBalance(ctx context.Context, in *QueryAgentPayBalanceRequest, opts ...grpc.CallOption) (*QueryAgentPayBalanceResponse, error)
	// 验证回调通知(内部使用)
	HandleAgentPayNotify(ctx context.Context, in *AgentPayNotifyRequest, opts ...grpc.CallOption) (*AgentPayNotifyResponse, error)
}

type agentPayInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPayInnerServiceClient(cc grpc.ClientConnInterface) AgentPayInnerServiceClient {
	return &agentPayInnerServiceClient{cc}
}

func (c *agentPayInnerServiceClient) ApplyAgentPay(ctx context.Context, in *ApplyAgentPayRequest, opts ...grpc.CallOption) (*ApplyAgentPayResponse, error) {
	out := new(ApplyAgentPayResponse)
	err := c.cc.Invoke(ctx, AgentPayInnerService_ApplyAgentPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryAgentPayOrder(ctx context.Context, in *QueryAgentPayOrderRequest, opts ...grpc.CallOption) (*QueryAgentPayOrderResponse, error) {
	out := new(QueryAgentPayOrderResponse)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryAgentPayOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryAgentPayCertificate(ctx context.Context, in *QueryAgentPayCertificateRequest, opts ...grpc.CallOption) (*QueryAgentPayCertificateResponse, error) {
	out := new(QueryAgentPayCertificateResponse)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryAgentPayCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryAgentPayBalance(ctx context.Context, in *QueryAgentPayBalanceRequest, opts ...grpc.CallOption) (*QueryAgentPayBalanceResponse, error) {
	out := new(QueryAgentPayBalanceResponse)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryAgentPayBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) HandleAgentPayNotify(ctx context.Context, in *AgentPayNotifyRequest, opts ...grpc.CallOption) (*AgentPayNotifyResponse, error) {
	out := new(AgentPayNotifyResponse)
	err := c.cc.Invoke(ctx, AgentPayInnerService_HandleAgentPayNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentPayInnerServiceServer is the server API for AgentPayInnerService service.
// All implementations must embed UnimplementedAgentPayInnerServiceServer
// for forward compatibility
type AgentPayInnerServiceServer interface {
	// 申请代付
	ApplyAgentPay(context.Context, *ApplyAgentPayRequest) (*ApplyAgentPayResponse, error)
	// 查询代付订单
	QueryAgentPayOrder(context.Context, *QueryAgentPayOrderRequest) (*QueryAgentPayOrderResponse, error)
	// 查询代付凭证
	QueryAgentPayCertificate(context.Context, *QueryAgentPayCertificateRequest) (*QueryAgentPayCertificateResponse, error)
	// 查询余额
	QueryAgentPayBalance(context.Context, *QueryAgentPayBalanceRequest) (*QueryAgentPayBalanceResponse, error)
	// 验证回调通知(内部使用)
	HandleAgentPayNotify(context.Context, *AgentPayNotifyRequest) (*AgentPayNotifyResponse, error)
	mustEmbedUnimplementedAgentPayInnerServiceServer()
}

// UnimplementedAgentPayInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentPayInnerServiceServer struct {
}

func (UnimplementedAgentPayInnerServiceServer) ApplyAgentPay(context.Context, *ApplyAgentPayRequest) (*ApplyAgentPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAgentPay not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryAgentPayOrder(context.Context, *QueryAgentPayOrderRequest) (*QueryAgentPayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAgentPayOrder not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryAgentPayCertificate(context.Context, *QueryAgentPayCertificateRequest) (*QueryAgentPayCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAgentPayCertificate not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryAgentPayBalance(context.Context, *QueryAgentPayBalanceRequest) (*QueryAgentPayBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAgentPayBalance not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) HandleAgentPayNotify(context.Context, *AgentPayNotifyRequest) (*AgentPayNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAgentPayNotify not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) mustEmbedUnimplementedAgentPayInnerServiceServer() {}

// UnsafeAgentPayInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentPayInnerServiceServer will
// result in compilation errors.
type UnsafeAgentPayInnerServiceServer interface {
	mustEmbedUnimplementedAgentPayInnerServiceServer()
}

func RegisterAgentPayInnerServiceServer(s grpc.ServiceRegistrar, srv AgentPayInnerServiceServer) {
	s.RegisterService(&AgentPayInnerService_ServiceDesc, srv)
}

func _AgentPayInnerService_ApplyAgentPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAgentPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).ApplyAgentPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_ApplyAgentPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).ApplyAgentPay(ctx, req.(*ApplyAgentPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryAgentPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAgentPayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryAgentPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayOrder(ctx, req.(*QueryAgentPayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryAgentPayCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAgentPayCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryAgentPayCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayCertificate(ctx, req.(*QueryAgentPayCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryAgentPayBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAgentPayBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryAgentPayBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryAgentPayBalance(ctx, req.(*QueryAgentPayBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_HandleAgentPayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).HandleAgentPayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_HandleAgentPayNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).HandleAgentPayNotify(ctx, req.(*AgentPayNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentPayInnerService_ServiceDesc is the grpc.ServiceDesc for AgentPayInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentPayInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.AgentPayInnerService",
	HandlerType: (*AgentPayInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyAgentPay",
			Handler:    _AgentPayInnerService_ApplyAgentPay_Handler,
		},
		{
			MethodName: "QueryAgentPayOrder",
			Handler:    _AgentPayInnerService_QueryAgentPayOrder_Handler,
		},
		{
			MethodName: "QueryAgentPayCertificate",
			Handler:    _AgentPayInnerService_QueryAgentPayCertificate_Handler,
		},
		{
			MethodName: "QueryAgentPayBalance",
			Handler:    _AgentPayInnerService_QueryAgentPayBalance_Handler,
		},
		{
			MethodName: "HandleAgentPayNotify",
			Handler:    _AgentPayInnerService_HandleAgentPayNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}

const (
	PaymentInnerService_CreateOrder_FullMethodName     = "/payment.v1.PaymentInnerService/CreateOrder"
	PaymentInnerService_QueryOrder_FullMethodName      = "/payment.v1.PaymentInnerService/QueryOrder"
	PaymentInnerService_QueryOrderByUTR_FullMethodName = "/payment.v1.PaymentInnerService/QueryOrderByUTR"
	PaymentInnerService_CreateCashier_FullMethodName   = "/payment.v1.PaymentInnerService/CreateCashier"
)

// PaymentInnerServiceClient is the client API for PaymentInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentInnerServiceClient interface {
	// 统一下单接口
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// 查询订单接口
	QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	// 通过UTR查询订单接口
	QueryOrderByUTR(ctx context.Context, in *QueryOrderByUTRRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	// 创建收银台接口
	CreateCashier(ctx context.Context, in *CreateCashierRequest, opts ...grpc.CallOption) (*CreateCashierResponse, error)
}

type paymentInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentInnerServiceClient(cc grpc.ClientConnInterface) PaymentInnerServiceClient {
	return &paymentInnerServiceClient{cc}
}

func (c *paymentInnerServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, PaymentInnerService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentInnerServiceClient) QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, PaymentInnerService_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentInnerServiceClient) QueryOrderByUTR(ctx context.Context, in *QueryOrderByUTRRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, PaymentInnerService_QueryOrderByUTR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentInnerServiceClient) CreateCashier(ctx context.Context, in *CreateCashierRequest, opts ...grpc.CallOption) (*CreateCashierResponse, error) {
	out := new(CreateCashierResponse)
	err := c.cc.Invoke(ctx, PaymentInnerService_CreateCashier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentInnerServiceServer is the server API for PaymentInnerService service.
// All implementations must embed UnimplementedPaymentInnerServiceServer
// for forward compatibility
type PaymentInnerServiceServer interface {
	// 统一下单接口
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// 查询订单接口
	QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	// 通过UTR查询订单接口
	QueryOrderByUTR(context.Context, *QueryOrderByUTRRequest) (*QueryOrderResponse, error)
	// 创建收银台接口
	CreateCashier(context.Context, *CreateCashierRequest) (*CreateCashierResponse, error)
	mustEmbedUnimplementedPaymentInnerServiceServer()
}

// UnimplementedPaymentInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentInnerServiceServer struct {
}

func (UnimplementedPaymentInnerServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPaymentInnerServiceServer) QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedPaymentInnerServiceServer) QueryOrderByUTR(context.Context, *QueryOrderByUTRRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderByUTR not implemented")
}
func (UnimplementedPaymentInnerServiceServer) CreateCashier(context.Context, *CreateCashierRequest) (*CreateCashierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashier not implemented")
}
func (UnimplementedPaymentInnerServiceServer) mustEmbedUnimplementedPaymentInnerServiceServer() {}

// UnsafePaymentInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentInnerServiceServer will
// result in compilation errors.
type UnsafePaymentInnerServiceServer interface {
	mustEmbedUnimplementedPaymentInnerServiceServer()
}

func RegisterPaymentInnerServiceServer(s grpc.ServiceRegistrar, srv PaymentInnerServiceServer) {
	s.RegisterService(&PaymentInnerService_ServiceDesc, srv)
}

func _PaymentInnerService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentInnerServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentInnerService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentInnerServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentInnerService_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentInnerServiceServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentInnerService_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentInnerServiceServer).QueryOrder(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentInnerService_QueryOrderByUTR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderByUTRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentInnerServiceServer).QueryOrderByUTR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentInnerService_QueryOrderByUTR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentInnerServiceServer).QueryOrderByUTR(ctx, req.(*QueryOrderByUTRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentInnerService_CreateCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentInnerServiceServer).CreateCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentInnerService_CreateCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentInnerServiceServer).CreateCashier(ctx, req.(*CreateCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentInnerService_ServiceDesc is the grpc.ServiceDesc for PaymentInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentInnerService",
	HandlerType: (*PaymentInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _PaymentInnerService_CreateOrder_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _PaymentInnerService_QueryOrder_Handler,
		},
		{
			MethodName: "QueryOrderByUTR",
			Handler:    _PaymentInnerService_QueryOrderByUTR_Handler,
		},
		{
			MethodName: "CreateCashier",
			Handler:    _PaymentInnerService_CreateCashier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}

const (
	UserPaymentInnerService_UserRecharge_FullMethodName         = "/payment.v1.UserPaymentInnerService/UserRecharge"
	UserPaymentInnerService_UserWithdraw_FullMethodName         = "/payment.v1.UserPaymentInnerService/UserWithdraw"
	UserPaymentInnerService_ReceivePaymentNotice_FullMethodName = "/payment.v1.UserPaymentInnerService/ReceivePaymentNotice"
	UserPaymentInnerService_UserRechargeChannel_FullMethodName  = "/payment.v1.UserPaymentInnerService/UserRechargeChannel"
	UserPaymentInnerService_UserWithdrawChannel_FullMethodName  = "/payment.v1.UserPaymentInnerService/UserWithdrawChannel"
)

// UserPaymentInnerServiceClient is the client API for UserPaymentInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPaymentInnerServiceClient interface {
	// 用户充值
	UserRecharge(ctx context.Context, in *UserRechargeInfoMsgReq, opts ...grpc.CallOption) (*UserRechargeInfoMsgReply, error)
	// 用户提现
	UserWithdraw(ctx context.Context, in *UserWithdrawInfoMsgReq, opts ...grpc.CallOption) (*UserWithdrawInfoMsgReply, error)
	// 接收支付通知
	ReceivePaymentNotice(ctx context.Context, in *PaymentNotificationReq, opts ...grpc.CallOption) (*PaymentReply, error)
	// 充值通道列表响应
	UserRechargeChannel(ctx context.Context, in *RechargeChannelsInfoMsgReq, opts ...grpc.CallOption) (*RechargeChannelsInfoMsgReply, error)
	// 用户提现通道列表响应
	UserWithdrawChannel(ctx context.Context, in *UserWithdrawChannelInfoMsgReq, opts ...grpc.CallOption) (*UserWithdrawChannelInfoMsgReply, error)
}

type userPaymentInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPaymentInnerServiceClient(cc grpc.ClientConnInterface) UserPaymentInnerServiceClient {
	return &userPaymentInnerServiceClient{cc}
}

func (c *userPaymentInnerServiceClient) UserRecharge(ctx context.Context, in *UserRechargeInfoMsgReq, opts ...grpc.CallOption) (*UserRechargeInfoMsgReply, error) {
	out := new(UserRechargeInfoMsgReply)
	err := c.cc.Invoke(ctx, UserPaymentInnerService_UserRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPaymentInnerServiceClient) UserWithdraw(ctx context.Context, in *UserWithdrawInfoMsgReq, opts ...grpc.CallOption) (*UserWithdrawInfoMsgReply, error) {
	out := new(UserWithdrawInfoMsgReply)
	err := c.cc.Invoke(ctx, UserPaymentInnerService_UserWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPaymentInnerServiceClient) ReceivePaymentNotice(ctx context.Context, in *PaymentNotificationReq, opts ...grpc.CallOption) (*PaymentReply, error) {
	out := new(PaymentReply)
	err := c.cc.Invoke(ctx, UserPaymentInnerService_ReceivePaymentNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPaymentInnerServiceClient) UserRechargeChannel(ctx context.Context, in *RechargeChannelsInfoMsgReq, opts ...grpc.CallOption) (*RechargeChannelsInfoMsgReply, error) {
	out := new(RechargeChannelsInfoMsgReply)
	err := c.cc.Invoke(ctx, UserPaymentInnerService_UserRechargeChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPaymentInnerServiceClient) UserWithdrawChannel(ctx context.Context, in *UserWithdrawChannelInfoMsgReq, opts ...grpc.CallOption) (*UserWithdrawChannelInfoMsgReply, error) {
	out := new(UserWithdrawChannelInfoMsgReply)
	err := c.cc.Invoke(ctx, UserPaymentInnerService_UserWithdrawChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPaymentInnerServiceServer is the server API for UserPaymentInnerService service.
// All implementations must embed UnimplementedUserPaymentInnerServiceServer
// for forward compatibility
type UserPaymentInnerServiceServer interface {
	// 用户充值
	UserRecharge(context.Context, *UserRechargeInfoMsgReq) (*UserRechargeInfoMsgReply, error)
	// 用户提现
	UserWithdraw(context.Context, *UserWithdrawInfoMsgReq) (*UserWithdrawInfoMsgReply, error)
	// 接收支付通知
	ReceivePaymentNotice(context.Context, *PaymentNotificationReq) (*PaymentReply, error)
	// 充值通道列表响应
	UserRechargeChannel(context.Context, *RechargeChannelsInfoMsgReq) (*RechargeChannelsInfoMsgReply, error)
	// 用户提现通道列表响应
	UserWithdrawChannel(context.Context, *UserWithdrawChannelInfoMsgReq) (*UserWithdrawChannelInfoMsgReply, error)
	mustEmbedUnimplementedUserPaymentInnerServiceServer()
}

// UnimplementedUserPaymentInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPaymentInnerServiceServer struct {
}

func (UnimplementedUserPaymentInnerServiceServer) UserRecharge(context.Context, *UserRechargeInfoMsgReq) (*UserRechargeInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecharge not implemented")
}
func (UnimplementedUserPaymentInnerServiceServer) UserWithdraw(context.Context, *UserWithdrawInfoMsgReq) (*UserWithdrawInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWithdraw not implemented")
}
func (UnimplementedUserPaymentInnerServiceServer) ReceivePaymentNotice(context.Context, *PaymentNotificationReq) (*PaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePaymentNotice not implemented")
}
func (UnimplementedUserPaymentInnerServiceServer) UserRechargeChannel(context.Context, *RechargeChannelsInfoMsgReq) (*RechargeChannelsInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRechargeChannel not implemented")
}
func (UnimplementedUserPaymentInnerServiceServer) UserWithdrawChannel(context.Context, *UserWithdrawChannelInfoMsgReq) (*UserWithdrawChannelInfoMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWithdrawChannel not implemented")
}
func (UnimplementedUserPaymentInnerServiceServer) mustEmbedUnimplementedUserPaymentInnerServiceServer() {
}

// UnsafeUserPaymentInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPaymentInnerServiceServer will
// result in compilation errors.
type UnsafeUserPaymentInnerServiceServer interface {
	mustEmbedUnimplementedUserPaymentInnerServiceServer()
}

func RegisterUserPaymentInnerServiceServer(s grpc.ServiceRegistrar, srv UserPaymentInnerServiceServer) {
	s.RegisterService(&UserPaymentInnerService_ServiceDesc, srv)
}

func _UserPaymentInnerService_UserRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPaymentInnerServiceServer).UserRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPaymentInnerService_UserRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPaymentInnerServiceServer).UserRecharge(ctx, req.(*UserRechargeInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPaymentInnerService_UserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithdrawInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPaymentInnerServiceServer).UserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPaymentInnerService_UserWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPaymentInnerServiceServer).UserWithdraw(ctx, req.(*UserWithdrawInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPaymentInnerService_ReceivePaymentNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPaymentInnerServiceServer).ReceivePaymentNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPaymentInnerService_ReceivePaymentNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPaymentInnerServiceServer).ReceivePaymentNotice(ctx, req.(*PaymentNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPaymentInnerService_UserRechargeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeChannelsInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPaymentInnerServiceServer).UserRechargeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPaymentInnerService_UserRechargeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPaymentInnerServiceServer).UserRechargeChannel(ctx, req.(*RechargeChannelsInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPaymentInnerService_UserWithdrawChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithdrawChannelInfoMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPaymentInnerServiceServer).UserWithdrawChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPaymentInnerService_UserWithdrawChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPaymentInnerServiceServer).UserWithdrawChannel(ctx, req.(*UserWithdrawChannelInfoMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPaymentInnerService_ServiceDesc is the grpc.ServiceDesc for UserPaymentInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPaymentInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.UserPaymentInnerService",
	HandlerType: (*UserPaymentInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRecharge",
			Handler:    _UserPaymentInnerService_UserRecharge_Handler,
		},
		{
			MethodName: "UserWithdraw",
			Handler:    _UserPaymentInnerService_UserWithdraw_Handler,
		},
		{
			MethodName: "ReceivePaymentNotice",
			Handler:    _UserPaymentInnerService_ReceivePaymentNotice_Handler,
		},
		{
			MethodName: "UserRechargeChannel",
			Handler:    _UserPaymentInnerService_UserRechargeChannel_Handler,
		},
		{
			MethodName: "UserWithdrawChannel",
			Handler:    _UserPaymentInnerService_UserWithdrawChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
