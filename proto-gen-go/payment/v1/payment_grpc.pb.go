// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: payment/v1/payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentPayInnerService_Apply_FullMethodName        = "/payment.v1.AgentPayInnerService/Apply"
	AgentPayInnerService_QueryOrder_FullMethodName   = "/payment.v1.AgentPayInnerService/QueryOrder"
	AgentPayInnerService_QueryCep_FullMethodName     = "/payment.v1.AgentPayInnerService/QueryCep"
	AgentPayInnerService_QueryBalance_FullMethodName = "/payment.v1.AgentPayInnerService/QueryBalance"
	AgentPayInnerService_VerifyNotify_FullMethodName = "/payment.v1.AgentPayInnerService/VerifyNotify"
)

// AgentPayInnerServiceClient is the client API for AgentPayInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentPayInnerServiceClient interface {
	// 申请代付
	Apply(ctx context.Context, in *AgentPayApplyReq, opts ...grpc.CallOption) (*AgentPayApplyReply, error)
	// 查询代付订单
	QueryOrder(ctx context.Context, in *AgentPayQueryReq, opts ...grpc.CallOption) (*AgentPayQueryReply, error)
	// 查询代付凭证
	QueryCep(ctx context.Context, in *AgentPayQueryReq, opts ...grpc.CallOption) (*AgentPayQueryCepReply, error)
	// 查询余额
	QueryBalance(ctx context.Context, in *AgentPayBalanceReq, opts ...grpc.CallOption) (*AgentPayBalanceReply, error)
	// 验证回调通知
	VerifyNotify(ctx context.Context, in *AgentPayNotifyReq, opts ...grpc.CallOption) (*VerifyNotifyReply, error)
}

type agentPayInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPayInnerServiceClient(cc grpc.ClientConnInterface) AgentPayInnerServiceClient {
	return &agentPayInnerServiceClient{cc}
}

func (c *agentPayInnerServiceClient) Apply(ctx context.Context, in *AgentPayApplyReq, opts ...grpc.CallOption) (*AgentPayApplyReply, error) {
	out := new(AgentPayApplyReply)
	err := c.cc.Invoke(ctx, AgentPayInnerService_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryOrder(ctx context.Context, in *AgentPayQueryReq, opts ...grpc.CallOption) (*AgentPayQueryReply, error) {
	out := new(AgentPayQueryReply)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryCep(ctx context.Context, in *AgentPayQueryReq, opts ...grpc.CallOption) (*AgentPayQueryCepReply, error) {
	out := new(AgentPayQueryCepReply)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryCep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) QueryBalance(ctx context.Context, in *AgentPayBalanceReq, opts ...grpc.CallOption) (*AgentPayBalanceReply, error) {
	out := new(AgentPayBalanceReply)
	err := c.cc.Invoke(ctx, AgentPayInnerService_QueryBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPayInnerServiceClient) VerifyNotify(ctx context.Context, in *AgentPayNotifyReq, opts ...grpc.CallOption) (*VerifyNotifyReply, error) {
	out := new(VerifyNotifyReply)
	err := c.cc.Invoke(ctx, AgentPayInnerService_VerifyNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentPayInnerServiceServer is the server API for AgentPayInnerService service.
// All implementations must embed UnimplementedAgentPayInnerServiceServer
// for forward compatibility
type AgentPayInnerServiceServer interface {
	// 申请代付
	Apply(context.Context, *AgentPayApplyReq) (*AgentPayApplyReply, error)
	// 查询代付订单
	QueryOrder(context.Context, *AgentPayQueryReq) (*AgentPayQueryReply, error)
	// 查询代付凭证
	QueryCep(context.Context, *AgentPayQueryReq) (*AgentPayQueryCepReply, error)
	// 查询余额
	QueryBalance(context.Context, *AgentPayBalanceReq) (*AgentPayBalanceReply, error)
	// 验证回调通知
	VerifyNotify(context.Context, *AgentPayNotifyReq) (*VerifyNotifyReply, error)
	mustEmbedUnimplementedAgentPayInnerServiceServer()
}

// UnimplementedAgentPayInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentPayInnerServiceServer struct {
}

func (UnimplementedAgentPayInnerServiceServer) Apply(context.Context, *AgentPayApplyReq) (*AgentPayApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryOrder(context.Context, *AgentPayQueryReq) (*AgentPayQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryCep(context.Context, *AgentPayQueryReq) (*AgentPayQueryCepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCep not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) QueryBalance(context.Context, *AgentPayBalanceReq) (*AgentPayBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalance not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) VerifyNotify(context.Context, *AgentPayNotifyReq) (*VerifyNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyNotify not implemented")
}
func (UnimplementedAgentPayInnerServiceServer) mustEmbedUnimplementedAgentPayInnerServiceServer() {}

// UnsafeAgentPayInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentPayInnerServiceServer will
// result in compilation errors.
type UnsafeAgentPayInnerServiceServer interface {
	mustEmbedUnimplementedAgentPayInnerServiceServer()
}

func RegisterAgentPayInnerServiceServer(s grpc.ServiceRegistrar, srv AgentPayInnerServiceServer) {
	s.RegisterService(&AgentPayInnerService_ServiceDesc, srv)
}

func _AgentPayInnerService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).Apply(ctx, req.(*AgentPayApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryOrder(ctx, req.(*AgentPayQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryCep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryCep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryCep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryCep(ctx, req.(*AgentPayQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_QueryBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).QueryBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_QueryBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).QueryBalance(ctx, req.(*AgentPayBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPayInnerService_VerifyNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPayInnerServiceServer).VerifyNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPayInnerService_VerifyNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPayInnerServiceServer).VerifyNotify(ctx, req.(*AgentPayNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentPayInnerService_ServiceDesc is the grpc.ServiceDesc for AgentPayInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentPayInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.AgentPayInnerService",
	HandlerType: (*AgentPayInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _AgentPayInnerService_Apply_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _AgentPayInnerService_QueryOrder_Handler,
		},
		{
			MethodName: "QueryCep",
			Handler:    _AgentPayInnerService_QueryCep_Handler,
		},
		{
			MethodName: "QueryBalance",
			Handler:    _AgentPayInnerService_QueryBalance_Handler,
		},
		{
			MethodName: "VerifyNotify",
			Handler:    _AgentPayInnerService_VerifyNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
