// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: payment/v1/payment.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PaymentReq) Reset() {
	*x = PaymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReq) ProtoMessage() {}

func (x *PaymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReq.ProtoReflect.Descriptor instead.
func (*PaymentReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{0}
}

type PaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PaymentReply) Reset() {
	*x = PaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReply) ProtoMessage() {}

func (x *PaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReply.ProtoReflect.Descriptor instead.
func (*PaymentReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{1}
}

// 通用请求时间和签名字段
type CommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchId   int64  `protobuf:"varint,1,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`      // 商户ID
	ReqTime string `protobuf:"bytes,2,opt,name=req_time,json=reqTime,proto3" json:"req_time,omitempty"` // 请求时间(格式:yyyyMMddHHmmss)
	Sign    string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`                      // 签名
}

func (x *CommonRequest) Reset() {
	*x = CommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRequest) ProtoMessage() {}

func (x *CommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRequest.ProtoReflect.Descriptor instead.
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{2}
}

func (x *CommonRequest) GetMchId() int64 {
	if x != nil {
		return x.MchId
	}
	return 0
}

func (x *CommonRequest) GetReqTime() string {
	if x != nil {
		return x.ReqTime
	}
	return ""
}

func (x *CommonRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 代付申请请求
type ApplyAgentPayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchOrderNo     string `protobuf:"bytes,3,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`           // 商户代付单号
	Amount         int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                      // 代付金额(分)
	Currency       string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                   // 币种
	CollectionType string `protobuf:"bytes,6,opt,name=collection_type,json=collectionType,proto3" json:"collection_type,omitempty"` // 收款类型
	BankName       string `protobuf:"bytes,7,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                   // 银行名称或账户类型
	AccountName    string `protobuf:"bytes,8,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`          // 收款人账户名
	AccountNo      string `protobuf:"bytes,9,opt,name=account_no,json=accountNo,proto3" json:"account_no,omitempty"`                // 收款人账户号
	Province       string `protobuf:"bytes,10,opt,name=province,proto3" json:"province,omitempty"`                                  // 开户所在地域(可选)
	City           string `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`                                          // 开户所在地区(可选)
	AccountAttr    int32  `protobuf:"varint,12,opt,name=account_attr,json=accountAttr,proto3" json:"account_attr,omitempty"`        // 账户属性(0-对私,1-对公)
	BankNumber     string `protobuf:"bytes,13,opt,name=bank_number,json=bankNumber,proto3" json:"bank_number,omitempty"`            // 联行号或CPF号码
	Uid            string `protobuf:"bytes,14,opt,name=uid,proto3" json:"uid,omitempty"`                                            // 用户唯一标识(可选)
	UserName       string `protobuf:"bytes,15,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                  // 用户姓名(可选)
	UserMobile     string `protobuf:"bytes,16,opt,name=user_mobile,json=userMobile,proto3" json:"user_mobile,omitempty"`            // 用户电话(可选)
	UserEmail      string `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`               // 用户邮箱(可选)
	NotifyUrl      string `protobuf:"bytes,18,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`               // 回调URL(可选)
	Remark         string `protobuf:"bytes,19,opt,name=remark,proto3" json:"remark,omitempty"`                                      // 备注
	Extra          string `protobuf:"bytes,20,opt,name=extra,proto3" json:"extra,omitempty"`                                        // 扩展域(可选)
	Sign           string `protobuf:"bytes,22,opt,name=sign,proto3" json:"sign,omitempty"`                                          // 签名
}

func (x *ApplyAgentPayRequest) Reset() {
	*x = ApplyAgentPayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAgentPayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAgentPayRequest) ProtoMessage() {}

func (x *ApplyAgentPayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAgentPayRequest.ProtoReflect.Descriptor instead.
func (*ApplyAgentPayRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyAgentPayRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ApplyAgentPayRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetCollectionType() string {
	if x != nil {
		return x.CollectionType
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetAccountNo() string {
	if x != nil {
		return x.AccountNo
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetAccountAttr() int32 {
	if x != nil {
		return x.AccountAttr
	}
	return 0
}

func (x *ApplyAgentPayRequest) GetBankNumber() string {
	if x != nil {
		return x.BankNumber
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetUserMobile() string {
	if x != nil {
		return x.UserMobile
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ApplyAgentPayRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 代付申请响应
type ApplyAgentPayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode         string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`                             // 返回状态码
	RetMsg          string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`                                // 返回信息
	AgentPayOrderId string `protobuf:"bytes,3,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号
	Fee             int64  `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`                                                   // 手续费
	Extra           string `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                                // 扩展域
	Status          int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                             // 状态
	Sign            string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                                                  // 签名
}

func (x *ApplyAgentPayResponse) Reset() {
	*x = ApplyAgentPayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAgentPayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAgentPayResponse) ProtoMessage() {}

func (x *ApplyAgentPayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAgentPayResponse.ProtoReflect.Descriptor instead.
func (*ApplyAgentPayResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyAgentPayResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *ApplyAgentPayResponse) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *ApplyAgentPayResponse) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *ApplyAgentPayResponse) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ApplyAgentPayResponse) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ApplyAgentPayResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ApplyAgentPayResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询代付订单请求
type QueryAgentPayOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchOrderNo      string `protobuf:"bytes,2,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`                  // 商户代付单号(与代付单号二选一)
	AgentPayOrderId string `protobuf:"bytes,3,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号(与商户代付单号二选一)
	Sign            string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`                                                  // 签名
}

func (x *QueryAgentPayOrderRequest) Reset() {
	*x = QueryAgentPayOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayOrderRequest) ProtoMessage() {}

func (x *QueryAgentPayOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayOrderRequest.ProtoReflect.Descriptor instead.
func (*QueryAgentPayOrderRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{5}
}

func (x *QueryAgentPayOrderRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryAgentPayOrderRequest) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *QueryAgentPayOrderRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询代付订单响应
type QueryAgentPayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode         string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`                             // 返回状态码
	MchOrderNo      string `protobuf:"bytes,2,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`                  // 商户代付单号
	AgentPayOrderId string `protobuf:"bytes,3,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号
	Amount          int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                             // 代付金额
	Fee             int64  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`                                                   // 手续费
	Status          int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                             // 状态
	TransMsg        string `protobuf:"bytes,7,opt,name=trans_msg,json=transMsg,proto3" json:"trans_msg,omitempty"`                          // 转账提示
	Extra           string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`                                                // 扩展域
	Sign            string `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`                                                  // 签名
}

func (x *QueryAgentPayOrderResponse) Reset() {
	*x = QueryAgentPayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayOrderResponse) ProtoMessage() {}

func (x *QueryAgentPayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayOrderResponse.ProtoReflect.Descriptor instead.
func (*QueryAgentPayOrderResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{6}
}

func (x *QueryAgentPayOrderResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *QueryAgentPayOrderResponse) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryAgentPayOrderResponse) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *QueryAgentPayOrderResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryAgentPayOrderResponse) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *QueryAgentPayOrderResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryAgentPayOrderResponse) GetTransMsg() string {
	if x != nil {
		return x.TransMsg
	}
	return ""
}

func (x *QueryAgentPayOrderResponse) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *QueryAgentPayOrderResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询余额请求
type QueryAgentPayBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"` // 签名
}

func (x *QueryAgentPayBalanceRequest) Reset() {
	*x = QueryAgentPayBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayBalanceRequest) ProtoMessage() {}

func (x *QueryAgentPayBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayBalanceRequest.ProtoReflect.Descriptor instead.
func (*QueryAgentPayBalanceRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{7}
}

func (x *QueryAgentPayBalanceRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询代付账户余额响应
type QueryAgentPayBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode                  string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`                                                         // 返回状态码
	AvailableAgentPayBalance int64  `protobuf:"varint,2,opt,name=available_agent_pay_balance,json=availableAgentPayBalance,proto3" json:"available_agent_pay_balance,omitempty"` // 可用代付余额
	AgentPayBalance          int64  `protobuf:"varint,3,opt,name=agent_pay_balance,json=agentPayBalance,proto3" json:"agent_pay_balance,omitempty"`                              // 代付余额
	AvailableBalance         int64  `protobuf:"varint,4,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`                             // 可用账户余额
	Balance                  int64  `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`                                                                       // 账户余额
	Sign                     string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`                                                                              // 签名
}

func (x *QueryAgentPayBalanceResponse) Reset() {
	*x = QueryAgentPayBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayBalanceResponse) ProtoMessage() {}

func (x *QueryAgentPayBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayBalanceResponse.ProtoReflect.Descriptor instead.
func (*QueryAgentPayBalanceResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{8}
}

func (x *QueryAgentPayBalanceResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *QueryAgentPayBalanceResponse) GetAvailableAgentPayBalance() int64 {
	if x != nil {
		return x.AvailableAgentPayBalance
	}
	return 0
}

func (x *QueryAgentPayBalanceResponse) GetAgentPayBalance() int64 {
	if x != nil {
		return x.AgentPayBalance
	}
	return 0
}

func (x *QueryAgentPayBalanceResponse) GetAvailableBalance() int64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *QueryAgentPayBalanceResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *QueryAgentPayBalanceResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询代付凭证请求
type QueryAgentPayCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchOrderNo      string `protobuf:"bytes,2,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`                  // 商户代付单号(与代付单号二选一)
	AgentPayOrderId string `protobuf:"bytes,3,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号(与商户代付单号二选一)
	Sign            string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`                                                  // 签名
}

func (x *QueryAgentPayCertificateRequest) Reset() {
	*x = QueryAgentPayCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayCertificateRequest) ProtoMessage() {}

func (x *QueryAgentPayCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayCertificateRequest.ProtoReflect.Descriptor instead.
func (*QueryAgentPayCertificateRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{9}
}

func (x *QueryAgentPayCertificateRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryAgentPayCertificateRequest) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *QueryAgentPayCertificateRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 查询代付凭证响应
type QueryAgentPayCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode         string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`                             // 返回状态码
	MchOrderNo      string `protobuf:"bytes,2,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`                  // 商户代付单号
	AgentPayOrderId string `protobuf:"bytes,3,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号
	Amount          int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                             // 代付金额
	Fee             int64  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`                                                   // 手续费
	Status          int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                             // 状态
	TransMsg        string `protobuf:"bytes,7,opt,name=trans_msg,json=transMsg,proto3" json:"trans_msg,omitempty"`                          // 转账提示
	Extra           string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`                                                // 扩展域
	UrlCep          string `protobuf:"bytes,9,opt,name=url_cep,json=urlCep,proto3" json:"url_cep,omitempty"`                                // 凭证地址
	Sign            string `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`                                                 // 签名
}

func (x *QueryAgentPayCertificateResponse) Reset() {
	*x = QueryAgentPayCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAgentPayCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAgentPayCertificateResponse) ProtoMessage() {}

func (x *QueryAgentPayCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAgentPayCertificateResponse.ProtoReflect.Descriptor instead.
func (*QueryAgentPayCertificateResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{10}
}

func (x *QueryAgentPayCertificateResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryAgentPayCertificateResponse) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *QueryAgentPayCertificateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryAgentPayCertificateResponse) GetTransMsg() string {
	if x != nil {
		return x.TransMsg
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetUrlCep() string {
	if x != nil {
		return x.UrlCep
	}
	return ""
}

func (x *QueryAgentPayCertificateResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 代付通知请求
type AgentPayNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentPayOrderId string `protobuf:"bytes,1,opt,name=agent_pay_order_id,json=agentPayOrderId,proto3" json:"agent_pay_order_id,omitempty"` // 代付单号
	MchOrderNo      string `protobuf:"bytes,2,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`                  // 商户代付单号
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                             // 状态
	Amount          int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                             // 代付金额
	Fee             int64  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`                                                   // 手续费
	TransMsg        string `protobuf:"bytes,6,opt,name=trans_msg,json=transMsg,proto3" json:"trans_msg,omitempty"`                          // 转账提示
	Extra           string `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`                                                // 扩展域
	Sign            string `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`                                                  // 签名
}

func (x *AgentPayNotifyRequest) Reset() {
	*x = AgentPayNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPayNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPayNotifyRequest) ProtoMessage() {}

func (x *AgentPayNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPayNotifyRequest.ProtoReflect.Descriptor instead.
func (*AgentPayNotifyRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{11}
}

func (x *AgentPayNotifyRequest) GetAgentPayOrderId() string {
	if x != nil {
		return x.AgentPayOrderId
	}
	return ""
}

func (x *AgentPayNotifyRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *AgentPayNotifyRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgentPayNotifyRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AgentPayNotifyRequest) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *AgentPayNotifyRequest) GetTransMsg() string {
	if x != nil {
		return x.TransMsg
	}
	return ""
}

func (x *AgentPayNotifyRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *AgentPayNotifyRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 代付通知响应
type AgentPayNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 响应信息，返回 "success" 表示成功接收
}

func (x *AgentPayNotifyResponse) Reset() {
	*x = AgentPayNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPayNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPayNotifyResponse) ProtoMessage() {}

func (x *AgentPayNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPayNotifyResponse.ProtoReflect.Descriptor instead.
func (*AgentPayNotifyResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{12}
}

func (x *AgentPayNotifyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 统一下单请求
type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchId       string `protobuf:"bytes,1,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                    // 商户号
	ProductId   string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`        // 渠道号
	MchOrderNo  string `protobuf:"bytes,3,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`   // 商户订单号
	Currency    string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                           // 币种
	Amount      int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                              // 支付金额(分)
	ClientIp    string `protobuf:"bytes,6,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`           // 客户端IP
	Device      string `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`                               // 设备
	Subject     string `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`                            // 商品主题
	OrderDesc   string `protobuf:"bytes,11,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`       // 商品描述信息
	Uid         string `protobuf:"bytes,12,opt,name=uid,proto3" json:"uid,omitempty"`                                    // 用户唯一标识
	UserName    string `protobuf:"bytes,13,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`          // 用户姓名
	UserMobile  string `protobuf:"bytes,14,opt,name=user_mobile,json=userMobile,proto3" json:"user_mobile,omitempty"`    // 用户电话
	UserEmail   string `protobuf:"bytes,15,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`       // 用户邮箱
	MchWebsite  string `protobuf:"bytes,16,opt,name=mch_website,json=mchWebsite,proto3" json:"mch_website,omitempty"`    // 商户网址
	UserAddress string `protobuf:"bytes,17,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"` // 用户收货地址
	Param1      string `protobuf:"bytes,18,opt,name=param1,proto3" json:"param1,omitempty"`                              // 扩展参数1
	Param2      string `protobuf:"bytes,19,opt,name=param2,proto3" json:"param2,omitempty"`                              // 扩展参数2
	Extra       string `protobuf:"bytes,20,opt,name=extra,proto3" json:"extra,omitempty"`                                // 附加参数
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{13}
}

func (x *CreateOrderRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *CreateOrderRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateOrderRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *CreateOrderRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateOrderRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateOrderRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *CreateOrderRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CreateOrderRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *CreateOrderRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateOrderRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateOrderRequest) GetUserMobile() string {
	if x != nil {
		return x.UserMobile
	}
	return ""
}

func (x *CreateOrderRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOrderRequest) GetMchWebsite() string {
	if x != nil {
		return x.MchWebsite
	}
	return ""
}

func (x *CreateOrderRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *CreateOrderRequest) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *CreateOrderRequest) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *CreateOrderRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// 统一下单响应
type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayUrl     string `protobuf:"bytes,2,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"`               // 支付URL
	PayOrderId string `protobuf:"bytes,3,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"` // 支付订单号
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{14}
}

func (x *CreateOrderResponse) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *CreateOrderResponse) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

// 支付参数
type PayParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayMethod        string            `protobuf:"bytes,1,opt,name=pay_method,json=payMethod,proto3" json:"pay_method,omitempty"`                                                                                                              // 支付方式
	PayUrl           string            `protobuf:"bytes,2,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"`                                                                                                                       // 支付URL
	AdditionalParams map[string]string `protobuf:"bytes,3,rep,name=additional_params,json=additionalParams,proto3" json:"additional_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外参数
}

func (x *PayParams) Reset() {
	*x = PayParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayParams) ProtoMessage() {}

func (x *PayParams) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayParams.ProtoReflect.Descriptor instead.
func (*PayParams) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{15}
}

func (x *PayParams) GetPayMethod() string {
	if x != nil {
		return x.PayMethod
	}
	return ""
}

func (x *PayParams) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *PayParams) GetAdditionalParams() map[string]string {
	if x != nil {
		return x.AdditionalParams
	}
	return nil
}

// 查询订单请求
type QueryOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchId         string `protobuf:"bytes,1,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                          // 商户号
	ProductId     string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`              // 渠道号
	PayOrderId    string `protobuf:"bytes,3,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"`         // 支付订单号
	MchOrderNo    string `protobuf:"bytes,4,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`         // 商户订单号
	ExecuteNotify bool   `protobuf:"varint,5,opt,name=execute_notify,json=executeNotify,proto3" json:"execute_notify,omitempty"` // 是否执行回调
}

func (x *QueryOrderRequest) Reset() {
	*x = QueryOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderRequest) ProtoMessage() {}

func (x *QueryOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderRequest.ProtoReflect.Descriptor instead.
func (*QueryOrderRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{16}
}

func (x *QueryOrderRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *QueryOrderRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *QueryOrderRequest) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

func (x *QueryOrderRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryOrderRequest) GetExecuteNotify() bool {
	if x != nil {
		return x.ExecuteNotify
	}
	return false
}

// 查询订单响应
type QueryOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode        string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`                         // 返回状态码
	RetMsg         string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`                            // 返回信息
	MchId          int64  `protobuf:"varint,3,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                              // 商户ID
	ProductId      int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                  // 支付产品ID
	PayOrderId     string `protobuf:"bytes,5,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"`              // 支付订单号
	MchOrderNo     string `protobuf:"bytes,6,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`              // 商户订单号
	Amount         int64  `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`                                         // 支付金额
	Currency       string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`                                      // 币种
	Status         int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                         // 状态
	ChannelUser    string `protobuf:"bytes,10,opt,name=channel_user,json=channelUser,proto3" json:"channel_user,omitempty"`            // 渠道用户ID
	ChannelOrderNo string `protobuf:"bytes,11,opt,name=channel_order_no,json=channelOrderNo,proto3" json:"channel_order_no,omitempty"` // 渠道订单号
	ChannelAttach  string `protobuf:"bytes,12,opt,name=channel_attach,json=channelAttach,proto3" json:"channel_attach,omitempty"`      // 渠道数据包
	PaySuccTime    int64  `protobuf:"varint,13,opt,name=pay_succ_time,json=paySuccTime,proto3" json:"pay_succ_time,omitempty"`         // 支付成功时间
	Sign           string `protobuf:"bytes,14,opt,name=sign,proto3" json:"sign,omitempty"`                                             // 签名
}

func (x *QueryOrderResponse) Reset() {
	*x = QueryOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderResponse) ProtoMessage() {}

func (x *QueryOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderResponse.ProtoReflect.Descriptor instead.
func (*QueryOrderResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{17}
}

func (x *QueryOrderResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *QueryOrderResponse) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *QueryOrderResponse) GetMchId() int64 {
	if x != nil {
		return x.MchId
	}
	return 0
}

func (x *QueryOrderResponse) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryOrderResponse) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

func (x *QueryOrderResponse) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryOrderResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryOrderResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *QueryOrderResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryOrderResponse) GetChannelUser() string {
	if x != nil {
		return x.ChannelUser
	}
	return ""
}

func (x *QueryOrderResponse) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

func (x *QueryOrderResponse) GetChannelAttach() string {
	if x != nil {
		return x.ChannelAttach
	}
	return ""
}

func (x *QueryOrderResponse) GetPaySuccTime() int64 {
	if x != nil {
		return x.PaySuccTime
	}
	return 0
}

func (x *QueryOrderResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 通过UTR查询订单请求
type QueryOrderByUTRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderId    string `protobuf:"bytes,2,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"`         // 支付订单号
	MchOrderNo    string `protobuf:"bytes,3,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`         // 商户订单号
	Utr           string `protobuf:"bytes,4,opt,name=utr,proto3" json:"utr,omitempty"`                                           // 支付UTR
	ExecuteNotify bool   `protobuf:"varint,5,opt,name=execute_notify,json=executeNotify,proto3" json:"execute_notify,omitempty"` // 是否执行回调
}

func (x *QueryOrderByUTRRequest) Reset() {
	*x = QueryOrderByUTRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderByUTRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderByUTRRequest) ProtoMessage() {}

func (x *QueryOrderByUTRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderByUTRRequest.ProtoReflect.Descriptor instead.
func (*QueryOrderByUTRRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{18}
}

func (x *QueryOrderByUTRRequest) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

func (x *QueryOrderByUTRRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *QueryOrderByUTRRequest) GetUtr() string {
	if x != nil {
		return x.Utr
	}
	return ""
}

func (x *QueryOrderByUTRRequest) GetExecuteNotify() bool {
	if x != nil {
		return x.ExecuteNotify
	}
	return false
}

// 创建收银台请求
type CreateCashierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MchOrderNo string `protobuf:"bytes,3,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"` // 商户订单号
	Amount     int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                            // 支付金额
	Subject    string `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`                           // 商品主题
	OrderDesc  string `protobuf:"bytes,8,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`      // 商品描述信息
	Uid        string `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`                                   // 用户唯一标识
	Extra      string `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                              // 用户唯一标识
}

func (x *CreateCashierRequest) Reset() {
	*x = CreateCashierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashierRequest) ProtoMessage() {}

func (x *CreateCashierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashierRequest.ProtoReflect.Descriptor instead.
func (*CreateCashierRequest) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{19}
}

func (x *CreateCashierRequest) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *CreateCashierRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateCashierRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateCashierRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *CreateCashierRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateCashierRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// 创建收银台响应
type CreateCashierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode string `protobuf:"bytes,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 返回状态码
	RetMsg  string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`    // 返回信息
	PayUrl  string `protobuf:"bytes,3,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"`    // 收银台URL
	Sign    string `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`                      // 签名
}

func (x *CreateCashierResponse) Reset() {
	*x = CreateCashierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashierResponse) ProtoMessage() {}

func (x *CreateCashierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashierResponse.ProtoReflect.Descriptor instead.
func (*CreateCashierResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{20}
}

func (x *CreateCashierResponse) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *CreateCashierResponse) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *CreateCashierResponse) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *CreateCashierResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 支付通知数据
type PayNotifyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderId     string `protobuf:"bytes,1,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"`             // 支付订单号
	MchOrderNo     string `protobuf:"bytes,4,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`             // 商户订单号
	Amount         int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                        // 支付金额
	Status         int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                        // 状态
	ChannelOrderNo string `protobuf:"bytes,7,opt,name=channel_order_no,json=channelOrderNo,proto3" json:"channel_order_no,omitempty"` // 渠道订单号
	ChannelAttach  string `protobuf:"bytes,8,opt,name=channel_attach,json=channelAttach,proto3" json:"channel_attach,omitempty"`      // 渠道数据包
	Param1         string `protobuf:"bytes,9,opt,name=param1,proto3" json:"param1,omitempty"`                                         // 扩展参数1
	Param2         string `protobuf:"bytes,10,opt,name=param2,proto3" json:"param2,omitempty"`                                        // 扩展参数2
	PaySuccTime    int64  `protobuf:"varint,11,opt,name=pay_succ_time,json=paySuccTime,proto3" json:"pay_succ_time,omitempty"`        // 支付成功时间
	BackType       int64  `protobuf:"varint,12,opt,name=back_type,json=backType,proto3" json:"back_type,omitempty"`                   // 通知类型
	Sign           string `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`                                            // 签名
}

func (x *PayNotifyData) Reset() {
	*x = PayNotifyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotifyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotifyData) ProtoMessage() {}

func (x *PayNotifyData) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotifyData.ProtoReflect.Descriptor instead.
func (*PayNotifyData) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{21}
}

func (x *PayNotifyData) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

func (x *PayNotifyData) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *PayNotifyData) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayNotifyData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayNotifyData) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

func (x *PayNotifyData) GetChannelAttach() string {
	if x != nil {
		return x.ChannelAttach
	}
	return ""
}

func (x *PayNotifyData) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *PayNotifyData) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *PayNotifyData) GetPaySuccTime() int64 {
	if x != nil {
		return x.PaySuccTime
	}
	return 0
}

func (x *PayNotifyData) GetBackType() int64 {
	if x != nil {
		return x.BackType
	}
	return 0
}

func (x *PayNotifyData) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 支付通知响应
type PayNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 处理结果
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 处理消息
}

func (x *PayNotifyResponse) Reset() {
	*x = PayNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotifyResponse) ProtoMessage() {}

func (x *PayNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotifyResponse.ProtoReflect.Descriptor instead.
func (*PayNotifyResponse) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{22}
}

func (x *PayNotifyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PayNotifyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserRechargeInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	RechargeChannelId int64  `protobuf:"varint,2,opt,name=recharge_channel_id,json=rechargeChannelId,proto3" json:"recharge_channel_id,omitempty"` // 充值通道id
	Amount            int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                  // 充值金额(金额*1000000)
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	UsdtExchangeRate  int64  `protobuf:"varint,5,opt,name=usdt_exchange_rate,json=usdtExchangeRate,proto3" json:"usdt_exchange_rate,omitempty"`    // USDT兑换比例（1u=>多少指定货币）
	PayerAccount      string `protobuf:"bytes,6,opt,name=payer_account,json=payerAccount,proto3" json:"payer_account,omitempty"`                   // 付款人账号
	PayerName         string `protobuf:"bytes,7,opt,name=payer_name,json=payerName,proto3" json:"payer_name,omitempty"`                            // 付款人姓名
	Remark            string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
	Protocol          string `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`                                               // 虚拟货币支持的协议，例如USDT支持["TRC-20","ERC-20"，"BEP-20"]
}

func (x *UserRechargeInfoMsgReq) Reset() {
	*x = UserRechargeInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeInfoMsgReq) ProtoMessage() {}

func (x *UserRechargeInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserRechargeInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{23}
}

func (x *UserRechargeInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetRechargeChannelId() int64 {
	if x != nil {
		return x.RechargeChannelId
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserRechargeInfoMsgReq) GetUsdtExchangeRate() int64 {
	if x != nil {
		return x.UsdtExchangeRate
	}
	return 0
}

func (x *UserRechargeInfoMsgReq) GetPayerAccount() string {
	if x != nil {
		return x.PayerAccount
	}
	return ""
}

func (x *UserRechargeInfoMsgReq) GetPayerName() string {
	if x != nil {
		return x.PayerName
	}
	return ""
}

func (x *UserRechargeInfoMsgReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserRechargeInfoMsgReq) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type UserRechargeInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                  // 响应状态码  200 正常
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                     // 响应消息    success 成功
	PayUrl string `protobuf:"bytes,3,opt,name=pay_url,json=payUrl,proto3" json:"pay_url,omitempty"` // 支付URL  银行卡充值 返回的是空
}

func (x *UserRechargeInfoMsgReply) Reset() {
	*x = UserRechargeInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeInfoMsgReply) ProtoMessage() {}

func (x *UserRechargeInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserRechargeInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{24}
}

func (x *UserRechargeInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRechargeInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRechargeInfoMsgReply) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

type UserWithdrawInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户ID
	Amount            int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                  // 提现金额(金额*1000000)
	WithdrawAccountId int64  `protobuf:"varint,3,opt,name=withdraw_account_id,json=withdrawAccountId,proto3" json:"withdraw_account_id,omitempty"` //提现账号
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	Remark            string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
}

func (x *UserWithdrawInfoMsgReq) Reset() {
	*x = UserWithdrawInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawInfoMsgReq) ProtoMessage() {}

func (x *UserWithdrawInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserWithdrawInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{25}
}

func (x *UserWithdrawInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetWithdrawAccountId() int64 {
	if x != nil {
		return x.WithdrawAccountId
	}
	return 0
}

func (x *UserWithdrawInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UserWithdrawInfoMsgReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type UserWithdrawInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserWithdrawInfoMsgReply) Reset() {
	*x = UserWithdrawInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawInfoMsgReply) ProtoMessage() {}

func (x *UserWithdrawInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserWithdrawInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{26}
}

func (x *UserWithdrawInfoMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserWithdrawInfoMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 支付通知消息请求
type PaymentNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderId     string `protobuf:"bytes,1,opt,name=pay_order_id,json=payOrderId,proto3" json:"pay_order_id,omitempty"`             // 交易中心生成的订单号
	MchId          string `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                              // 交易中心分配的商户号
	ProductId      int64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                 // 支付产品ID也叫渠道编码
	MchOrderNo     string `protobuf:"bytes,4,opt,name=mch_order_no,json=mchOrderNo,proto3" json:"mch_order_no,omitempty"`             // 商户生成的订单号
	Amount         int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                        // 支付金额,单位分
	Status         int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                        // 支付状态,-1-创建失败,0-订单生成,1-支付中,2-支付成功,3-业务处理完成
	ChannelOrderNo string `protobuf:"bytes,7,opt,name=channel_order_no,json=channelOrderNo,proto3" json:"channel_order_no,omitempty"` // 三方支付渠道订单号
	ChannelAttach  string `protobuf:"bytes,8,opt,name=channel_attach,json=channelAttach,proto3" json:"channel_attach,omitempty"`      // 支付渠道数据包
	Param1         string `protobuf:"bytes,9,opt,name=param1,proto3" json:"param1,omitempty"`                                         // 扩展参数1
	Param2         string `protobuf:"bytes,10,opt,name=param2,proto3" json:"param2,omitempty"`                                        // 扩展参数2
	PaySuccTime    int64  `protobuf:"varint,11,opt,name=pay_succ_time,json=paySuccTime,proto3" json:"pay_succ_time,omitempty"`        // 支付成功时间
	BackType       int64  `protobuf:"varint,12,opt,name=back_type,json=backType,proto3" json:"back_type,omitempty"`                   // 通知类型, 1-前台通知, 2-后台通知
	Sign           string `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`                                            // 签名值
}

func (x *PaymentNotificationReq) Reset() {
	*x = PaymentNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentNotificationReq) ProtoMessage() {}

func (x *PaymentNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentNotificationReq.ProtoReflect.Descriptor instead.
func (*PaymentNotificationReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{27}
}

func (x *PaymentNotificationReq) GetPayOrderId() string {
	if x != nil {
		return x.PayOrderId
	}
	return ""
}

func (x *PaymentNotificationReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PaymentNotificationReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PaymentNotificationReq) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *PaymentNotificationReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentNotificationReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaymentNotificationReq) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

func (x *PaymentNotificationReq) GetChannelAttach() string {
	if x != nil {
		return x.ChannelAttach
	}
	return ""
}

func (x *PaymentNotificationReq) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *PaymentNotificationReq) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *PaymentNotificationReq) GetPaySuccTime() int64 {
	if x != nil {
		return x.PaySuccTime
	}
	return 0
}

func (x *PaymentNotificationReq) GetBackType() int64 {
	if x != nil {
		return x.BackType
	}
	return 0
}

func (x *PaymentNotificationReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 充值通道列表响应
type RechargeChannelsInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // 用户ID
	PaymentConfigId int64 `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"` // 支付配置ID
}

func (x *RechargeChannelsInfoMsgReq) Reset() {
	*x = RechargeChannelsInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannelsInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannelsInfoMsgReq) ProtoMessage() {}

func (x *RechargeChannelsInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannelsInfoMsgReq.ProtoReflect.Descriptor instead.
func (*RechargeChannelsInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{28}
}

func (x *RechargeChannelsInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RechargeChannelsInfoMsgReq) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

// 充值通道列表响应
type RechargeChannelsInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*RechargeChannel `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"` // 充值通道列表
}

func (x *RechargeChannelsInfoMsgReply) Reset() {
	*x = RechargeChannelsInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannelsInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannelsInfoMsgReply) ProtoMessage() {}

func (x *RechargeChannelsInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannelsInfoMsgReply.ProtoReflect.Descriptor instead.
func (*RechargeChannelsInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{29}
}

func (x *RechargeChannelsInfoMsgReply) GetRows() []*RechargeChannel {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 充值通道信息
type RechargeChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // 充值通道ID
	PaymentConfigId       int64  `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"`                   // 支付配置ID
	CurrencyCode          string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                               // 币种
	RechargeChannelName   string `protobuf:"bytes,4,opt,name=recharge_channel_name,json=rechargeChannelName,proto3" json:"recharge_channel_name,omitempty"`        // 充值通道名称
	RechargeChannelCode   string `protobuf:"bytes,5,opt,name=recharge_channel_code,json=rechargeChannelCode,proto3" json:"recharge_channel_code,omitempty"`        // 充值通道编码
	RechargeChannelLogo   string `protobuf:"bytes,6,opt,name=recharge_channel_logo,json=rechargeChannelLogo,proto3" json:"recharge_channel_logo,omitempty"`        // 充值通道logo
	RechargeChannelType   int64  `protobuf:"varint,7,opt,name=recharge_channel_type,json=rechargeChannelType,proto3" json:"recharge_channel_type,omitempty"`       // 充值通道类型 1:USDT虚拟货币 2:银行卡 3: 快捷支付
	RechargeMerchantId    int64  `protobuf:"varint,8,opt,name=recharge_merchant_id,json=rechargeMerchantId,proto3" json:"recharge_merchant_id,omitempty"`          // 充值商户ID
	BankId                int64  `protobuf:"varint,9,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                                // 银行ID
	BankName              string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                                          // 银行名称
	BankBranch            string `protobuf:"bytes,11,opt,name=bank_branch,json=bankBranch,proto3" json:"bank_branch,omitempty"`                                    // 银行支行名称
	ReceiveAccount        string `protobuf:"bytes,12,opt,name=receive_account,json=receiveAccount,proto3" json:"receive_account,omitempty"`                        // 收款账号
	ReceiveName           string `protobuf:"bytes,13,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`                                 // 收款人姓名
	Ifsc                  string `protobuf:"bytes,14,opt,name=ifsc,proto3" json:"ifsc,omitempty"`                                                                  // IFSC
	CryptoAddress         string `protobuf:"bytes,15,opt,name=crypto_address,json=cryptoAddress,proto3" json:"crypto_address,omitempty"`                           //  公链地址
	CryptoNetwork         string `protobuf:"bytes,16,opt,name=crypto_network,json=cryptoNetwork,proto3" json:"crypto_network,omitempty"`                           // 公链名称
	MinLimitAmount        string `protobuf:"bytes,17,opt,name=min_limit_amount,json=minLimitAmount,proto3" json:"min_limit_amount,omitempty"`                      // 单笔充值最小限额
	MaxLimitAmount        string `protobuf:"bytes,18,opt,name=max_limit_amount,json=maxLimitAmount,proto3" json:"max_limit_amount,omitempty"`                      // 单笔充值最大限额
	RecommendAmountConfig string `protobuf:"bytes,19,opt,name=recommend_amount_config,json=recommendAmountConfig,proto3" json:"recommend_amount_config,omitempty"` // 推荐金额配置
	Hint                  string `protobuf:"bytes,20,opt,name=hint,proto3" json:"hint,omitempty"`                                                                  // 提示语
}

func (x *RechargeChannel) Reset() {
	*x = RechargeChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeChannel) ProtoMessage() {}

func (x *RechargeChannel) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeChannel.ProtoReflect.Descriptor instead.
func (*RechargeChannel) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{30}
}

func (x *RechargeChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RechargeChannel) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

func (x *RechargeChannel) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelName() string {
	if x != nil {
		return x.RechargeChannelName
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelCode() string {
	if x != nil {
		return x.RechargeChannelCode
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelLogo() string {
	if x != nil {
		return x.RechargeChannelLogo
	}
	return ""
}

func (x *RechargeChannel) GetRechargeChannelType() int64 {
	if x != nil {
		return x.RechargeChannelType
	}
	return 0
}

func (x *RechargeChannel) GetRechargeMerchantId() int64 {
	if x != nil {
		return x.RechargeMerchantId
	}
	return 0
}

func (x *RechargeChannel) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *RechargeChannel) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *RechargeChannel) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *RechargeChannel) GetReceiveAccount() string {
	if x != nil {
		return x.ReceiveAccount
	}
	return ""
}

func (x *RechargeChannel) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *RechargeChannel) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

func (x *RechargeChannel) GetCryptoAddress() string {
	if x != nil {
		return x.CryptoAddress
	}
	return ""
}

func (x *RechargeChannel) GetCryptoNetwork() string {
	if x != nil {
		return x.CryptoNetwork
	}
	return ""
}

func (x *RechargeChannel) GetMinLimitAmount() string {
	if x != nil {
		return x.MinLimitAmount
	}
	return ""
}

func (x *RechargeChannel) GetMaxLimitAmount() string {
	if x != nil {
		return x.MaxLimitAmount
	}
	return ""
}

func (x *RechargeChannel) GetRecommendAmountConfig() string {
	if x != nil {
		return x.RecommendAmountConfig
	}
	return ""
}

func (x *RechargeChannel) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

type UserWithdrawChannelInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // 用户ID
	PaymentConfigId int64 `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"` // 支付配置ID
}

func (x *UserWithdrawChannelInfoMsgReq) Reset() {
	*x = UserWithdrawChannelInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawChannelInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawChannelInfoMsgReq) ProtoMessage() {}

func (x *UserWithdrawChannelInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawChannelInfoMsgReq.ProtoReflect.Descriptor instead.
func (*UserWithdrawChannelInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{31}
}

func (x *UserWithdrawChannelInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserWithdrawChannelInfoMsgReq) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

type UserWithdrawChannelInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*WithdrawChannel `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"` // 提现通道列表
}

func (x *UserWithdrawChannelInfoMsgReply) Reset() {
	*x = UserWithdrawChannelInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithdrawChannelInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithdrawChannelInfoMsgReply) ProtoMessage() {}

func (x *UserWithdrawChannelInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithdrawChannelInfoMsgReply.ProtoReflect.Descriptor instead.
func (*UserWithdrawChannelInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{32}
}

func (x *UserWithdrawChannelInfoMsgReply) GetRows() []*WithdrawChannel {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 提现通道信息
type WithdrawChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // 提现通道ID
	PaymentConfigId       int64  `protobuf:"varint,2,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"`                   // 支付配置ID
	CurrencyCode          string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                               // 币种
	WithdrawChannelName   string `protobuf:"bytes,4,opt,name=withdraw_channel_name,json=withdrawChannelName,proto3" json:"withdraw_channel_name,omitempty"`        // 提现通道名称
	WithdrawChannelCode   string `protobuf:"bytes,5,opt,name=withdraw_channel_code,json=withdrawChannelCode,proto3" json:"withdraw_channel_code,omitempty"`        // 提现通道编码
	WithdrawChannelLogo   string `protobuf:"bytes,6,opt,name=withdraw_channel_logo,json=withdrawChannelLogo,proto3" json:"withdraw_channel_logo,omitempty"`        // 提现通道logo
	WithdrawChannelType   int64  `protobuf:"varint,7,opt,name=withdraw_channel_type,json=withdrawChannelType,proto3" json:"withdraw_channel_type,omitempty"`       // 提现通道类型 1:USDT虚拟货币 2:银行卡 3: 快捷支付
	WithdrawMerchantId    int64  `protobuf:"varint,8,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"`          // 提现商户ID
	BankId                int64  `protobuf:"varint,9,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                                // 银行ID
	BankName              string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                                          // 银行名称
	BankBranch            string `protobuf:"bytes,11,opt,name=bank_branch,json=bankBranch,proto3" json:"bank_branch,omitempty"`                                    // 银行支行名称
	BankAccount           string `protobuf:"bytes,12,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`                                 // 银行账号
	BankAccountName       string `protobuf:"bytes,13,opt,name=bank_account_name,json=bankAccountName,proto3" json:"bank_account_name,omitempty"`                   // 账户名
	CryptoAddress         string `protobuf:"bytes,15,opt,name=crypto_address,json=cryptoAddress,proto3" json:"crypto_address,omitempty"`                           //  公链地址
	CryptoNetwork         string `protobuf:"bytes,16,opt,name=crypto_network,json=cryptoNetwork,proto3" json:"crypto_network,omitempty"`                           // 公链名称
	MinLimitAmount        string `protobuf:"bytes,17,opt,name=min_limit_amount,json=minLimitAmount,proto3" json:"min_limit_amount,omitempty"`                      // 单笔充值最小限额
	MaxLimitAmount        string `protobuf:"bytes,18,opt,name=max_limit_amount,json=maxLimitAmount,proto3" json:"max_limit_amount,omitempty"`                      // 单笔充值最大限额
	RecommendAmountConfig string `protobuf:"bytes,19,opt,name=recommend_amount_config,json=recommendAmountConfig,proto3" json:"recommend_amount_config,omitempty"` // 推荐金额配置
	Hint                  string `protobuf:"bytes,20,opt,name=hint,proto3" json:"hint,omitempty"`                                                                  // 提示语
}

func (x *WithdrawChannel) Reset() {
	*x = WithdrawChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawChannel) ProtoMessage() {}

func (x *WithdrawChannel) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawChannel.ProtoReflect.Descriptor instead.
func (*WithdrawChannel) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{33}
}

func (x *WithdrawChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithdrawChannel) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

func (x *WithdrawChannel) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelName() string {
	if x != nil {
		return x.WithdrawChannelName
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelCode() string {
	if x != nil {
		return x.WithdrawChannelCode
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelLogo() string {
	if x != nil {
		return x.WithdrawChannelLogo
	}
	return ""
}

func (x *WithdrawChannel) GetWithdrawChannelType() int64 {
	if x != nil {
		return x.WithdrawChannelType
	}
	return 0
}

func (x *WithdrawChannel) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *WithdrawChannel) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *WithdrawChannel) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *WithdrawChannel) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *WithdrawChannel) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *WithdrawChannel) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *WithdrawChannel) GetCryptoAddress() string {
	if x != nil {
		return x.CryptoAddress
	}
	return ""
}

func (x *WithdrawChannel) GetCryptoNetwork() string {
	if x != nil {
		return x.CryptoNetwork
	}
	return ""
}

func (x *WithdrawChannel) GetMinLimitAmount() string {
	if x != nil {
		return x.MinLimitAmount
	}
	return ""
}

func (x *WithdrawChannel) GetMaxLimitAmount() string {
	if x != nil {
		return x.MaxLimitAmount
	}
	return ""
}

func (x *WithdrawChannel) GetRecommendAmountConfig() string {
	if x != nil {
		return x.RecommendAmountConfig
	}
	return ""
}

func (x *WithdrawChannel) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

type UserSetWithdrawChannelMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	AccountType       int64  `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`                  // 账号类型 1:手机号 2:银行卡 3:PIX 4:电子钱包
	BankId            int64  `protobuf:"varint,3,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                 // 银行卡ID
	RealName          string `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                            //  提现账号/地址
	Account           string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                                              //  提现账号/地址
	IsDefault         int64  `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                        //  是否默认账户 1:是 2:否
	OperateType       int64  `protobuf:"varint,7,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`                  // 操作类型，必填 1:新增 2:修改 3:删除
	Remark            string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`                                                // 备注
	SecondaryPassword string `protobuf:"bytes,9,opt,name=secondary_password,json=secondaryPassword,proto3" json:"secondary_password,omitempty"` // 验证二级密码
}

func (x *UserSetWithdrawChannelMsgReq) Reset() {
	*x = UserSetWithdrawChannelMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetWithdrawChannelMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetWithdrawChannelMsgReq) ProtoMessage() {}

func (x *UserSetWithdrawChannelMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetWithdrawChannelMsgReq.ProtoReflect.Descriptor instead.
func (*UserSetWithdrawChannelMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{34}
}

func (x *UserSetWithdrawChannelMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetAccountType() int64 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetOperateType() int64 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserSetWithdrawChannelMsgReq) GetSecondaryPassword() string {
	if x != nil {
		return x.SecondaryPassword
	}
	return ""
}

type UserSetWithdrawChannelMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 响应状态码  200 正常
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 响应消息    success 成功
}

func (x *UserSetWithdrawChannelMsgReply) Reset() {
	*x = UserSetWithdrawChannelMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetWithdrawChannelMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetWithdrawChannelMsgReply) ProtoMessage() {}

func (x *UserSetWithdrawChannelMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetWithdrawChannelMsgReply.ProtoReflect.Descriptor instead.
func (*UserSetWithdrawChannelMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{35}
}

func (x *UserSetWithdrawChannelMsgReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserSetWithdrawChannelMsgReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserTransactionRecordsMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户身份验证令牌，必填
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Category int64 `protobuf:"varint,4,opt,name=category,proto3" json:"category,omitempty"` // 交易类型 (1 充值、2 提现、3 换汇)
}

func (x *UserTransactionRecordsMsgReq) Reset() {
	*x = UserTransactionRecordsMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransactionRecordsMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransactionRecordsMsgReq) ProtoMessage() {}

func (x *UserTransactionRecordsMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransactionRecordsMsgReq.ProtoReflect.Descriptor instead.
func (*UserTransactionRecordsMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{36}
}

func (x *UserTransactionRecordsMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserTransactionRecordsMsgReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

type UserTransactionRecordsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64                `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*TransactionRecord `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UserTransactionRecordsMsgReply) Reset() {
	*x = UserTransactionRecordsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransactionRecordsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransactionRecordsMsgReply) ProtoMessage() {}

func (x *UserTransactionRecordsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransactionRecordsMsgReply.ProtoReflect.Descriptor instead.
func (*UserTransactionRecordsMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{37}
}

func (x *UserTransactionRecordsMsgReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *UserTransactionRecordsMsgReply) GetRows() []*TransactionRecord {
	if x != nil {
		return x.Rows
	}
	return nil
}

type TransactionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                   // 主键，自动增长
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                        // 用户账号
	OrderNo         string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                           // 订单编号
	CurrencyCode    string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`            // 币种编码
	Category        int64  `protobuf:"varint,5,opt,name=category,proto3" json:"category,omitempty"`                                       // 交易类型 (1 充值、2 提现、3 换汇)
	AmountIcon      int64  `protobuf:"varint,6,opt,name=amount_icon,json=amountIcon,proto3" json:"amount_icon,omitempty"`                 // 金币变动金额, 单位:微
	AmountUsdt      int64  `protobuf:"varint,7,opt,name=amount_usdt,json=amountUsdt,proto3" json:"amount_usdt,omitempty"`                 // USDT变动金额 单位:微
	FeeAmount       int64  `protobuf:"varint,8,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`                    // 手续费金额, 单位:微
	Address         string `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`                                          // 钱包地址
	Protocol        string `protobuf:"bytes,10,opt,name=protocol,proto3" json:"protocol,omitempty"`                                       // 网络协议
	MerchantId      int64  `protobuf:"varint,11,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`                // 币商ID
	MerchantName    string `protobuf:"bytes,12,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`           // 币商名字
	Status          int64  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                          // 订单状态：1-处理中，2-成功，3-失败
	Remark          string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`                                           // 备注信息
	TransactionTime int64  `protobuf:"varint,15,opt,name=transaction_time,json=transactionTime,proto3" json:"transaction_time,omitempty"` // 交易时间
	RelatedId       string `protobuf:"bytes,16,opt,name=related_id,json=relatedId,proto3" json:"related_id,omitempty"`                    // 关联ID，如游戏ID，商品ID，活动ID
}

func (x *TransactionRecord) Reset() {
	*x = TransactionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRecord) ProtoMessage() {}

func (x *TransactionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRecord.ProtoReflect.Descriptor instead.
func (*TransactionRecord) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{38}
}

func (x *TransactionRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionRecord) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TransactionRecord) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TransactionRecord) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *TransactionRecord) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *TransactionRecord) GetAmountIcon() int64 {
	if x != nil {
		return x.AmountIcon
	}
	return 0
}

func (x *TransactionRecord) GetAmountUsdt() int64 {
	if x != nil {
		return x.AmountUsdt
	}
	return 0
}

func (x *TransactionRecord) GetFeeAmount() int64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *TransactionRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransactionRecord) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TransactionRecord) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *TransactionRecord) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *TransactionRecord) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionRecord) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TransactionRecord) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *TransactionRecord) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

type GetBankListInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户身份验证令牌，必填
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种编码
}

func (x *GetBankListInfoMsgReq) Reset() {
	*x = GetBankListInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListInfoMsgReq) ProtoMessage() {}

func (x *GetBankListInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListInfoMsgReq.ProtoReflect.Descriptor instead.
func (*GetBankListInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{39}
}

func (x *GetBankListInfoMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBankListInfoMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetBankListInfoMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*BankConfig `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetBankListInfoMsgReply) Reset() {
	*x = GetBankListInfoMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListInfoMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListInfoMsgReply) ProtoMessage() {}

func (x *GetBankListInfoMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListInfoMsgReply.ProtoReflect.Descriptor instead.
func (*GetBankListInfoMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{40}
}

func (x *GetBankListInfoMsgReply) GetRows() []*BankConfig {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 银行信息
type BankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 主键
	CountryCode  string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`      // 国家/地区代码
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`   // 币种
	BankName     string `protobuf:"bytes,5,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`               // 银行名称
	BankShowName string `protobuf:"bytes,6,opt,name=bank_show_name,json=bankShowName,proto3" json:"bank_show_name,omitempty"` // 银行显示名称
	BankIcon     string `protobuf:"bytes,7,opt,name=bank_icon,json=bankIcon,proto3" json:"bank_icon,omitempty"`               // 银行图标
	Fee          int64  `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`                                        // 手续费
	Description  string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`                         // 银行描述
	Code         string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`                                      // 银行编码
}

func (x *BankConfig) Reset() {
	*x = BankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankConfig) ProtoMessage() {}

func (x *BankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankConfig.ProtoReflect.Descriptor instead.
func (*BankConfig) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{41}
}

func (x *BankConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *BankConfig) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *BankConfig) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BankConfig) GetBankShowName() string {
	if x != nil {
		return x.BankShowName
	}
	return ""
}

func (x *BankConfig) GetBankIcon() string {
	if x != nil {
		return x.BankIcon
	}
	return ""
}

func (x *BankConfig) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BankConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BankConfig) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPaymentConfListMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户身份验证令牌，必填
	CurrencyCode      string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种编码
	PaymentConfigType int64  `protobuf:"varint,3,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 支付配置类型 1: 充值 2: 提现
}

func (x *GetPaymentConfListMsgReq) Reset() {
	*x = GetPaymentConfListMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentConfListMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentConfListMsgReq) ProtoMessage() {}

func (x *GetPaymentConfListMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentConfListMsgReq.ProtoReflect.Descriptor instead.
func (*GetPaymentConfListMsgReq) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{42}
}

func (x *GetPaymentConfListMsgReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPaymentConfListMsgReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetPaymentConfListMsgReq) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

type GetPaymentConfListMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*PaymentConfInfo `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetPaymentConfListMsgReply) Reset() {
	*x = GetPaymentConfListMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentConfListMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentConfListMsgReply) ProtoMessage() {}

func (x *GetPaymentConfListMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentConfListMsgReply.ProtoReflect.Descriptor instead.
func (*GetPaymentConfListMsgReply) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{43}
}

func (x *GetPaymentConfListMsgReply) GetRows() []*PaymentConfInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type PaymentConfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentConfigType int64  `protobuf:"varint,2,opt,name=payment_config_type,json=paymentConfigType,proto3" json:"payment_config_type,omitempty"` // 存款方式渠道类型，1:USDT虚拟货币  2:银行卡  3:快捷支付
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                       // 名称
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                   // 币种
	LogoUrl           string `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                  // 图标
	ExchangeRate      int64  `protobuf:"varint,6,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                  // 兑换比例 1 USDT 兑换目标货币的汇率 1usdt兑换0.998美元 那么exchange_rate=0.998*1000000
	FixedFee          int64  `protobuf:"varint,7,opt,name=fixed_fee,json=fixedFee,proto3" json:"fixed_fee,omitempty"`                              // 固定手续费
	PercentageFee     int64  `protobuf:"varint,8,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty"`               // 百分比手续费 以1000000为单位，例如 20%=0.20=0.20×1,000,000=200,000
}

func (x *PaymentConfInfo) Reset() {
	*x = PaymentConfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_v1_payment_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentConfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentConfInfo) ProtoMessage() {}

func (x *PaymentConfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payment_v1_payment_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentConfInfo.ProtoReflect.Descriptor instead.
func (*PaymentConfInfo) Descriptor() ([]byte, []int) {
	return file_payment_v1_payment_proto_rawDescGZIP(), []int{44}
}

func (x *PaymentConfInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentConfInfo) GetPaymentConfigType() int64 {
	if x != nil {
		return x.PaymentConfigType
	}
	return 0
}

func (x *PaymentConfInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentConfInfo) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PaymentConfInfo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PaymentConfInfo) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *PaymentConfInfo) GetFixedFee() int64 {
	if x != nil {
		return x.FixedFee
	}
	return 0
}

func (x *PaymentConfInfo) GetPercentageFee() int64 {
	if x != nil {
		return x.PercentageFee
	}
	return 0
}

var File_payment_v1_payment_proto protoreflect.FileDescriptor

var file_payment_v1_payment_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x55, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xb8, 0x04, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x7e, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x31, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xff, 0x01, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x84, 0x01, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0xae, 0x02, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x63,
	0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x43, 0x65, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x63,
	0x68, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x58, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x22, 0xba, 0x03, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x95, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x54, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x74, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x78, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63, 0x68,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0x47, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x64, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x73, 0x64, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x59, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xb6, 0x01, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x40, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x98, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x63,
	0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x22, 0x61, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x99, 0x06, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x66, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x66, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x22, 0x64, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x88, 0x06, 0x0a,
	0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x32, 0x0a,
	0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x46, 0x0a,
	0x1e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb9, 0x01, 0x0a,
	0x1e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x64, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x64, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22, 0x55, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x65, 0x65, 0x32, 0x9c, 0x04, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x12,
	0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xe7, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x54, 0x52,
	0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x54, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x68, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa8,
	0x07, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_v1_payment_proto_rawDescOnce sync.Once
	file_payment_v1_payment_proto_rawDescData = file_payment_v1_payment_proto_rawDesc
)

func file_payment_v1_payment_proto_rawDescGZIP() []byte {
	file_payment_v1_payment_proto_rawDescOnce.Do(func() {
		file_payment_v1_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_v1_payment_proto_rawDescData)
	})
	return file_payment_v1_payment_proto_rawDescData
}

var file_payment_v1_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_payment_v1_payment_proto_goTypes = []interface{}{
	(*PaymentReq)(nil),                       // 0: payment.v1.PaymentReq
	(*PaymentReply)(nil),                     // 1: payment.v1.PaymentReply
	(*CommonRequest)(nil),                    // 2: payment.v1.CommonRequest
	(*ApplyAgentPayRequest)(nil),             // 3: payment.v1.ApplyAgentPayRequest
	(*ApplyAgentPayResponse)(nil),            // 4: payment.v1.ApplyAgentPayResponse
	(*QueryAgentPayOrderRequest)(nil),        // 5: payment.v1.QueryAgentPayOrderRequest
	(*QueryAgentPayOrderResponse)(nil),       // 6: payment.v1.QueryAgentPayOrderResponse
	(*QueryAgentPayBalanceRequest)(nil),      // 7: payment.v1.QueryAgentPayBalanceRequest
	(*QueryAgentPayBalanceResponse)(nil),     // 8: payment.v1.QueryAgentPayBalanceResponse
	(*QueryAgentPayCertificateRequest)(nil),  // 9: payment.v1.QueryAgentPayCertificateRequest
	(*QueryAgentPayCertificateResponse)(nil), // 10: payment.v1.QueryAgentPayCertificateResponse
	(*AgentPayNotifyRequest)(nil),            // 11: payment.v1.AgentPayNotifyRequest
	(*AgentPayNotifyResponse)(nil),           // 12: payment.v1.AgentPayNotifyResponse
	(*CreateOrderRequest)(nil),               // 13: payment.v1.CreateOrderRequest
	(*CreateOrderResponse)(nil),              // 14: payment.v1.CreateOrderResponse
	(*PayParams)(nil),                        // 15: payment.v1.PayParams
	(*QueryOrderRequest)(nil),                // 16: payment.v1.QueryOrderRequest
	(*QueryOrderResponse)(nil),               // 17: payment.v1.QueryOrderResponse
	(*QueryOrderByUTRRequest)(nil),           // 18: payment.v1.QueryOrderByUTRRequest
	(*CreateCashierRequest)(nil),             // 19: payment.v1.CreateCashierRequest
	(*CreateCashierResponse)(nil),            // 20: payment.v1.CreateCashierResponse
	(*PayNotifyData)(nil),                    // 21: payment.v1.PayNotifyData
	(*PayNotifyResponse)(nil),                // 22: payment.v1.PayNotifyResponse
	(*UserRechargeInfoMsgReq)(nil),           // 23: payment.v1.UserRechargeInfoMsgReq
	(*UserRechargeInfoMsgReply)(nil),         // 24: payment.v1.UserRechargeInfoMsgReply
	(*UserWithdrawInfoMsgReq)(nil),           // 25: payment.v1.UserWithdrawInfoMsgReq
	(*UserWithdrawInfoMsgReply)(nil),         // 26: payment.v1.UserWithdrawInfoMsgReply
	(*PaymentNotificationReq)(nil),           // 27: payment.v1.PaymentNotificationReq
	(*RechargeChannelsInfoMsgReq)(nil),       // 28: payment.v1.RechargeChannelsInfoMsgReq
	(*RechargeChannelsInfoMsgReply)(nil),     // 29: payment.v1.RechargeChannelsInfoMsgReply
	(*RechargeChannel)(nil),                  // 30: payment.v1.RechargeChannel
	(*UserWithdrawChannelInfoMsgReq)(nil),    // 31: payment.v1.UserWithdrawChannelInfoMsgReq
	(*UserWithdrawChannelInfoMsgReply)(nil),  // 32: payment.v1.UserWithdrawChannelInfoMsgReply
	(*WithdrawChannel)(nil),                  // 33: payment.v1.WithdrawChannel
	(*UserSetWithdrawChannelMsgReq)(nil),     // 34: payment.v1.UserSetWithdrawChannelMsgReq
	(*UserSetWithdrawChannelMsgReply)(nil),   // 35: payment.v1.UserSetWithdrawChannelMsgReply
	(*UserTransactionRecordsMsgReq)(nil),     // 36: payment.v1.UserTransactionRecordsMsgReq
	(*UserTransactionRecordsMsgReply)(nil),   // 37: payment.v1.UserTransactionRecordsMsgReply
	(*TransactionRecord)(nil),                // 38: payment.v1.TransactionRecord
	(*GetBankListInfoMsgReq)(nil),            // 39: payment.v1.GetBankListInfoMsgReq
	(*GetBankListInfoMsgReply)(nil),          // 40: payment.v1.GetBankListInfoMsgReply
	(*BankConfig)(nil),                       // 41: payment.v1.BankConfig
	(*GetPaymentConfListMsgReq)(nil),         // 42: payment.v1.GetPaymentConfListMsgReq
	(*GetPaymentConfListMsgReply)(nil),       // 43: payment.v1.GetPaymentConfListMsgReply
	(*PaymentConfInfo)(nil),                  // 44: payment.v1.PaymentConfInfo
	nil,                                      // 45: payment.v1.PayParams.AdditionalParamsEntry
}
var file_payment_v1_payment_proto_depIdxs = []int32{
	45, // 0: payment.v1.PayParams.additional_params:type_name -> payment.v1.PayParams.AdditionalParamsEntry
	30, // 1: payment.v1.RechargeChannelsInfoMsgReply.rows:type_name -> payment.v1.RechargeChannel
	33, // 2: payment.v1.UserWithdrawChannelInfoMsgReply.rows:type_name -> payment.v1.WithdrawChannel
	38, // 3: payment.v1.UserTransactionRecordsMsgReply.rows:type_name -> payment.v1.TransactionRecord
	41, // 4: payment.v1.GetBankListInfoMsgReply.rows:type_name -> payment.v1.BankConfig
	44, // 5: payment.v1.GetPaymentConfListMsgReply.rows:type_name -> payment.v1.PaymentConfInfo
	3,  // 6: payment.v1.AgentPayInnerService.ApplyAgentPay:input_type -> payment.v1.ApplyAgentPayRequest
	5,  // 7: payment.v1.AgentPayInnerService.QueryAgentPayOrder:input_type -> payment.v1.QueryAgentPayOrderRequest
	9,  // 8: payment.v1.AgentPayInnerService.QueryAgentPayCertificate:input_type -> payment.v1.QueryAgentPayCertificateRequest
	7,  // 9: payment.v1.AgentPayInnerService.QueryAgentPayBalance:input_type -> payment.v1.QueryAgentPayBalanceRequest
	11, // 10: payment.v1.AgentPayInnerService.HandleAgentPayNotify:input_type -> payment.v1.AgentPayNotifyRequest
	13, // 11: payment.v1.PaymentInnerService.CreateOrder:input_type -> payment.v1.CreateOrderRequest
	16, // 12: payment.v1.PaymentInnerService.QueryOrder:input_type -> payment.v1.QueryOrderRequest
	18, // 13: payment.v1.PaymentInnerService.QueryOrderByUTR:input_type -> payment.v1.QueryOrderByUTRRequest
	19, // 14: payment.v1.PaymentInnerService.CreateCashier:input_type -> payment.v1.CreateCashierRequest
	23, // 15: payment.v1.UserPaymentInnerService.UserRecharge:input_type -> payment.v1.UserRechargeInfoMsgReq
	25, // 16: payment.v1.UserPaymentInnerService.UserWithdraw:input_type -> payment.v1.UserWithdrawInfoMsgReq
	27, // 17: payment.v1.UserPaymentInnerService.ReceivePaymentNotice:input_type -> payment.v1.PaymentNotificationReq
	28, // 18: payment.v1.UserPaymentInnerService.UserRechargeChannel:input_type -> payment.v1.RechargeChannelsInfoMsgReq
	34, // 19: payment.v1.UserPaymentInnerService.UserSetWithdrawChannel:input_type -> payment.v1.UserSetWithdrawChannelMsgReq
	31, // 20: payment.v1.UserPaymentInnerService.UserWithdrawChannel:input_type -> payment.v1.UserWithdrawChannelInfoMsgReq
	36, // 21: payment.v1.UserPaymentInnerService.UserTransactionRecords:input_type -> payment.v1.UserTransactionRecordsMsgReq
	39, // 22: payment.v1.UserPaymentInnerService.GetBankList:input_type -> payment.v1.GetBankListInfoMsgReq
	42, // 23: payment.v1.UserPaymentInnerService.GetPaymentConfList:input_type -> payment.v1.GetPaymentConfListMsgReq
	4,  // 24: payment.v1.AgentPayInnerService.ApplyAgentPay:output_type -> payment.v1.ApplyAgentPayResponse
	6,  // 25: payment.v1.AgentPayInnerService.QueryAgentPayOrder:output_type -> payment.v1.QueryAgentPayOrderResponse
	10, // 26: payment.v1.AgentPayInnerService.QueryAgentPayCertificate:output_type -> payment.v1.QueryAgentPayCertificateResponse
	8,  // 27: payment.v1.AgentPayInnerService.QueryAgentPayBalance:output_type -> payment.v1.QueryAgentPayBalanceResponse
	12, // 28: payment.v1.AgentPayInnerService.HandleAgentPayNotify:output_type -> payment.v1.AgentPayNotifyResponse
	14, // 29: payment.v1.PaymentInnerService.CreateOrder:output_type -> payment.v1.CreateOrderResponse
	17, // 30: payment.v1.PaymentInnerService.QueryOrder:output_type -> payment.v1.QueryOrderResponse
	17, // 31: payment.v1.PaymentInnerService.QueryOrderByUTR:output_type -> payment.v1.QueryOrderResponse
	20, // 32: payment.v1.PaymentInnerService.CreateCashier:output_type -> payment.v1.CreateCashierResponse
	24, // 33: payment.v1.UserPaymentInnerService.UserRecharge:output_type -> payment.v1.UserRechargeInfoMsgReply
	26, // 34: payment.v1.UserPaymentInnerService.UserWithdraw:output_type -> payment.v1.UserWithdrawInfoMsgReply
	1,  // 35: payment.v1.UserPaymentInnerService.ReceivePaymentNotice:output_type -> payment.v1.PaymentReply
	29, // 36: payment.v1.UserPaymentInnerService.UserRechargeChannel:output_type -> payment.v1.RechargeChannelsInfoMsgReply
	35, // 37: payment.v1.UserPaymentInnerService.UserSetWithdrawChannel:output_type -> payment.v1.UserSetWithdrawChannelMsgReply
	32, // 38: payment.v1.UserPaymentInnerService.UserWithdrawChannel:output_type -> payment.v1.UserWithdrawChannelInfoMsgReply
	37, // 39: payment.v1.UserPaymentInnerService.UserTransactionRecords:output_type -> payment.v1.UserTransactionRecordsMsgReply
	40, // 40: payment.v1.UserPaymentInnerService.GetBankList:output_type -> payment.v1.GetBankListInfoMsgReply
	43, // 41: payment.v1.UserPaymentInnerService.GetPaymentConfList:output_type -> payment.v1.GetPaymentConfListMsgReply
	24, // [24:42] is the sub-list for method output_type
	6,  // [6:24] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_payment_v1_payment_proto_init() }
func file_payment_v1_payment_proto_init() {
	if File_payment_v1_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payment_v1_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAgentPayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAgentPayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAgentPayCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPayNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPayNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderByUTRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotifyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannelsInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannelsInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawChannelInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithdrawChannelInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetWithdrawChannelMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetWithdrawChannelMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransactionRecordsMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransactionRecordsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListInfoMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentConfListMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentConfListMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_v1_payment_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentConfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_v1_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_payment_v1_payment_proto_goTypes,
		DependencyIndexes: file_payment_v1_payment_proto_depIdxs,
		MessageInfos:      file_payment_v1_payment_proto_msgTypes,
	}.Build()
	File_payment_v1_payment_proto = out.File
	file_payment_v1_payment_proto_rawDesc = nil
	file_payment_v1_payment_proto_goTypes = nil
	file_payment_v1_payment_proto_depIdxs = nil
}
